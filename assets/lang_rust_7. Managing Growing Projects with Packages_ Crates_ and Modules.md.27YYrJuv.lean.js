import{_ as s,c as i,a2 as a,o as t}from"./chunks/framework.DRc6tsBz.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"lang/rust/7. Managing Growing Projects with Packages, Crates, and Modules.md","filePath":"lang/rust/7. Managing Growing Projects with Packages, Crates, and Modules.md","lastUpdated":1715180821000}');const l=s({name:"lang/rust/7. Managing Growing Projects with Packages, Crates, and Modules.md"},[["render",function(s,n,l,e,h,p){return t(),i("div",null,n[0]||(n[0]=[a('<p>模块系统(the module system)</p><ul><li>包(<em>Packages</em>): Cargo 的一个功能，它允许你构建、测试和分享 crate。</li><li><strong>Crates</strong> :一个模块的树形结构，它形成了库或二进制项目。</li><li>模块(<em>Modules</em>)和 <strong>use</strong>: 允许你控制作用域和路径的私有性。</li><li>路径(<em>path</em>):一个命名例如结构体、函数或模块等项的方式</li></ul><h2 id="包和-crate" tabindex="-1">包和 <strong>crate</strong> <a class="header-anchor" href="#包和-crate" aria-label="Permalink to &quot;包和 **crate**&quot;">​</a></h2><p>crate 是一个二进制项或者库</p><p>包是提供一系列功能的一个或者多个crate,一个包会包含一个Cargo.toml文件,阐述如何去构建这些crate</p><p>包中包含的内容规则:</p><ul><li>一个包中至多 只能 包含一个库 crate(library crate);</li><li>包中可以包含任意多个二进制 crate(binary crate);</li><li>包中至少包含一个 crate，无论是库的还是 二进制的。</li></ul><p>约定:<em>src/main.rs</em> 就是一个与包同名的<strong>二进制 crate</strong> 的 crate 根</p><p>如果包目录中包含 <em>src/lib.rs</em>，则包带有与其同名的<strong>库 crate</strong>，且 <em>src/lib.rs</em> 是 crate 根</p><p>Cargo将crate根传递给rustc来实际构建库或者二进制项目</p><p>几种情况:</p><ul><li>只包含<code>src/lib.rs</code></li><li>只包含<code>src/main.rs</code></li><li>同时包含<code>src/main.rs</code>和<code>src/lib.rs</code></li><li>源文件写在<code>src/bin</code>目录下,可以有多个二进制crate,生成</li></ul><h2 id="定义模块来控制作用域与私有性" tabindex="-1">定义模块来控制作用域与私有性 <a class="header-anchor" href="#定义模块来控制作用域与私有性" aria-label="Permalink to &quot;定义模块来控制作用域与私有性&quot;">​</a></h2><p>内容:</p><ul><li>项的路径</li><li>use</li><li>pub</li><li>as</li><li>外部包</li><li>glob运算符</li></ul><p>模块 让我们可以将一个 crate 中的代码进行分组,以提高可读性与重用性</p><p>模块树 (<em>module tree</em>)</p><p>crate └── front_of_house</p><p>​ ├── hosting</p><p>​ │ ├── add_to_waitlist</p><p>​ │ └── seat_at_table</p><p>​ └── serving</p><p>​ ├── take_order</p><p>​ ├── serve_order</p><p>​ └── take_payment</p><h2 id="路径用于引用模块树中的项" tabindex="-1">路径用于引用模块树中的项 <a class="header-anchor" href="#路径用于引用模块树中的项" aria-label="Permalink to &quot;路径用于引用模块树中的项&quot;">​</a></h2><ul><li>绝对路径(<em>absolute path</em>)从 crate 根开始，以 crate 名或者字面值 crate 开头。</li><li>相对路径(<em>relative path</em>)从当前模块开始，以 self 、 super 或当前模块的标识符开 头。</li></ul><h3 id="使用-super-起始的相对路径" tabindex="-1">使用 <strong>super</strong> 起始的相对路径 <a class="header-anchor" href="#使用-super-起始的相对路径" aria-label="Permalink to &quot;使用 **super** 起始的相对路径&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> serve_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> back_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fix_incorrect_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cook_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serve_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cook_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><h2 id="使用-use-关键字将名称引入作用域" tabindex="-1">使用 <strong>use</strong> 关键字将名称引入作用域 <a class="header-anchor" href="#使用-use-关键字将名称引入作用域" aria-label="Permalink to &quot;使用 **use** 关键字将名称引入作用域&quot;">​</a></h2><h3 id="使用-as-关键字提供新的名称" tabindex="-1">使用 <strong>as</strong> 关键字提供新的名称 <a class="header-anchor" href="#使用-as-关键字提供新的名称" aria-label="Permalink to &quot;使用 **as** 关键字提供新的名称&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IoResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // --snip--</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(())</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IoResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;()&gt; {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // --snip--</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(())</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="使用-pub-use-重导出名称" tabindex="-1">使用 <strong>pub use</strong> 重导出名称 <a class="header-anchor" href="#使用-pub-use-重导出名称" aria-label="Permalink to &quot;使用 **pub use** 重导出名称&quot;">​</a></h3><h3 id="使用外部包" tabindex="-1">使用外部包 <a class="header-anchor" href="#使用外部包" aria-label="Permalink to &quot;使用外部包&quot;">​</a></h3><h3 id="嵌套路径来消除大量的-use-行" tabindex="-1">嵌套路径来消除大量的 <strong>use</strong> 行 <a class="header-anchor" href="#嵌套路径来消除大量的-use-行" aria-label="Permalink to &quot;嵌套路径来消除大量的 **use** 行&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="通过-glob-运算符将所有的公有定义引入作用域" tabindex="-1">通过 <strong>glob</strong> 运算符将所有的公有定义引入作用域 <a class="header-anchor" href="#通过-glob-运算符将所有的公有定义引入作用域" aria-label="Permalink to &quot;通过 **glob** 运算符将所有的公有定义引入作用域&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collections</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="将模块分割进不同文件" tabindex="-1">将模块分割进不同文件 <a class="header-anchor" href="#将模块分割进不同文件" aria-label="Permalink to &quot;将模块分割进不同文件&quot;">​</a></h2><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hosting;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 mod front_of_house 后使用分号，而不是代码块，这将告诉 Rust 在另一个与模块同名的 文件中加载模块的内容</p><p>src/front_of_house.rs</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>重构</strong>:保持<em>模块树</em></p><p>src/front_of_house.rs</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>src/front_of_house/hosting.rs</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div>',48)]))}]]);export{n as __pageData,l as default};
