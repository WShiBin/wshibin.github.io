import{_ as t,c as s,a2 as a,o as u}from"./chunks/framework.DRc6tsBz.js";const r=JSON.parse('{"title":"【Rust】Rust","description":"","frontmatter":{"title":"【Rust】Rust","layout":"doc","categories":"Rust","tags":["Rust"],"prev":false,"next":false,"comments":true,"date":"2017-04-10T02:09:04.000Z"},"headers":[],"relativePath":"lang/rust/index.md","filePath":"lang/rust/index.md","lastUpdated":1717573316000}');const l=t({name:"lang/rust/index.md"},[["render",function(t,r,l,e,i,o){return u(),s("div",null,r[0]||(r[0]=[a('<h2 id="rust是什么" tabindex="-1">Rust是什么 <a class="header-anchor" href="#rust是什么" aria-label="Permalink to &quot;Rust是什么&quot;">​</a></h2><p>Rust 最初是作为 C 和C++ 的一种更安全的替代语言，它是一种系统编程语言，因基强调安全性、性能和生产效率，在开发人员中大受欢迎。 Rust 是一种静态类型语言，因此变量和表达式类型会在编译时就被检查并确认，这有助于增强内存安全性和错误检测，从而提高架构的可靠性。</p><h2 id="rust怎么诞生的" tabindex="-1">Rust怎么诞生的？ <a class="header-anchor" href="#rust怎么诞生的" aria-label="Permalink to &quot;Rust怎么诞生的？&quot;">​</a></h2><p>2006 年，软件开发人员 Graydon Hoare 在Mozilla 工作期间，將 Rust 作为个人项目启动了。根据《麻省理工科技评论》的采访，Rust 的灵感来自 Hoare 公寓楼里一部坏掉的电梯。 当时电梯操作系统的软件崩溃了，Hoare 明白，美似的问题通常来自程序内存的问题。通常，这类设备的软件都是用 C 或 C++ 编写的，但这些语言需要大量的内存管理，很容易导致错误，造成系统崩溃。因此，Hoare 开始着手研究如何创建一种既紧凌又无内存错误的编程 语言。</p><p>后来，他向一位经理展示了这个项目 -- 这也让Mozilla 在 2009 年赞助了这个项目，作为將 Rust 语言纳入一项实验性浏览器引擎开发的长期努力的一部分。2010年，Mozila Research 正式宣布了 Rust 项目，并将源代码作为开源项目向公众发布。经过几年的开发 Rust 达到了稳定和成熟的状态，千 2015 年5月发布了 Rust 1.0。这一里程碑标志着 Rust 已经为生产做好了准备，并为开发人员提供了一个基础。</p><p>自1.0 发布以来，Rust 的受欢迎程度和买用率星爆炸式增长，微软 windows 等顶级应用软件纷纷利用 Rust 的内存安全代码重号校心库。在科技巨头之外，Rust 还拥有一个充满活力的开发者社区，即 &quot;Rustaceans&quot;，他们致力于让 Rust 体验成为一种活跃的协作体验。</p><h2 id="rust-特点" tabindex="-1">Rust 特点 <a class="header-anchor" href="#rust-特点" aria-label="Permalink to &quot;Rust 特点&quot;">​</a></h2><ul><li><strong>并发安全性</strong>。Rust 通过内置其所有权系统和借用模型为并发编程提供支持，所有权系统对数据访问执行严格的规则，借用模型则是内存安全、类型安全、并发安全以及防止data race的基石。这确保了多个线程可以在共享数据上工作，而不会引入与内存相关的问题。</li><li><strong>无垃圾回收</strong>。与一些编程语言不同，Rust 不采用垃圾回收。相反，它采用所有权和借用规则来管理内存，这有助于开发人员精确控制内存的分配和删除，从而实现高效的资源管理。</li><li><strong>Cargo 软件包管理器</strong>。Rust 内置的软件包管理器 Cargo，简化了项目管理、依赖关系跟踪和构建过程，这有助于高效、有序地完成开发工作流程。但这并不能说明 Cargo 生态系统有多疯狂。根据 Orendorff：“我的团队利用高质量的开源软件包进行散列、序列化、多线程、数据结构、压缩等工作。这些都是对性能全关重要的库。如果没有其中的一些，我们在 GitHub 上重新思考代码搜索的项目就不可能实现。 〞还有一个有趣的事实：Rust 实际上是第一种拥有标准软件包管理器的系統编程语言，因此 Rust 生态系统非常强大。</li><li><strong>零成本抽象</strong>。此功能允许开发人员编写高级代码抽象和功能，而不会引入任何运行时性能开销。</li><li><strong>模式匹配</strong>。这种强大的语言功能使开发人员能够简洁有效地将复杂的数据结构与特定模式进行匹配，以干净且可读的方式提取和处理不同的案例或场景。</li><li><strong>类型推斯</strong>。此功能元许Rust編译器在编码时根据占下交自动检测表达式。&quot;许多編程语亭都有菜种炎型推断，Orendorff 说。&quot;C#和C++有一些，Rust 有更多，Hlaskell、Scala 和 ML 这样的语言有更多。</li></ul><h2 id="rust-应用领域" tabindex="-1">Rust 应用领域 <a class="header-anchor" href="#rust-应用领域" aria-label="Permalink to &quot;Rust 应用领域&quot;">​</a></h2><p>由于可以直接访问硬件和内存，Rust 非常适合嵌入式系统和裸机开发。它也是一种通用语言，因此也可用于各种应用。</p><ul><li>使用 Rust 构建性能关键型后端系统</li><li>使用 Rust 开发操作系统</li><li>Rust 用于与操作系统相关的代码</li><li>使用 Rust 进行 Web 开发</li><li>使用 Rust 进行加密和区块链开发</li><li>使用 Rust 构建 CLI 工具</li><li>使用 Rust 进行嵌入式系统和物联网开发</li><li>使用 Rust 进行游戏开发</li><li>使用 Rust 开发分布式数据库，</li></ul>',11)]))}]]);export{r as __pageData,l as default};
