import{_ as a,c as i,a2 as s,o as e}from"./chunks/framework.DRc6tsBz.js";const h=JSON.parse('{"title":"UNIX基础知识","description":"","frontmatter":{"title":"UNIX基础知识","date":"2021-07-07T01:42:30.000Z"},"headers":[],"relativePath":"linux/02app/01_UNIX_System_Overview.md","filePath":"linux/02app/01_UNIX_System_Overview.md","lastUpdated":1713886889000}');const t=a({name:"linux/02app/01_UNIX_System_Overview.md"},[["render",function(a,h,t,l,n,r){return e(),i("div",null,h[0]||(h[0]=[s('<h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>操作系统都为它们所运行的程序提供服务，比如：执行新程序、打开文件、读文件、分配存储以及获得当前时间</p><h2 id="unix体系结构" tabindex="-1">UNIX体系结构 <a class="header-anchor" href="#unix体系结构" aria-label="Permalink to &quot;UNIX体系结构&quot;">​</a></h2><p>从严格意义上说，可将操作系统定义为一种软件，它控制计算机硬件资源，提供程序去年环境。称为内核kernal。 内核的接口被称为<strong>系统调用</strong>syscall。公用函数库构建在系统调用接口之上，应用程序既可使用函数库，也可使用系统调用。shell是一个特殊的应用程序，为运行其他应用程序提供了一个接口。 从广义上说，操作系统包括了内核和一些其它的软件，这些软件使得计算机能够发挥作用，并使计算机具有自己的特性 <img src="/assets/image-20220427232514343.CDY7D_wy.webp" style="zoom:50%;"></p><h2 id="登录" tabindex="-1">登录 <a class="header-anchor" href="#登录" aria-label="Permalink to &quot;登录&quot;">​</a></h2><h3 id="登录名" tabindex="-1">登录名 <a class="header-anchor" href="#登录名" aria-label="Permalink to &quot;登录名&quot;">​</a></h3><p>用户登录账号、密码时，会去访问<code>/etc/passwd</code>文件 <strong>格式</strong>：登录名、加密口令、数字用户ID、数字组ID、注释字段、起始目录、shell程序</p><h3 id="shell" tabindex="-1">shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;shell&quot;">​</a></h3><p>shell是一个命令行解释器，它读取用户输入，然后执行命令 shell用户输入来源：终端（交互式shell），文件（shell脚本）</p><h2 id="文件和目录" tabindex="-1">文件和目录 <a class="header-anchor" href="#文件和目录" aria-label="Permalink to &quot;文件和目录&quot;">​</a></h2><h3 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h3><p>UNIX文件系统是目录和文件的一种层次结构，起点是称为根root的目录。目录是一个包含目录项的文件。</p><h3 id="文件名" tabindex="-1">文件名 <a class="header-anchor" href="#文件名" aria-label="Permalink to &quot;文件名&quot;">​</a></h3><p>目录中的各个名字称为文件名filename。</p><h3 id="路径名" tabindex="-1">路径名 <a class="header-anchor" href="#路径名" aria-label="Permalink to &quot;路径名&quot;">​</a></h3><p>由斜线分隔的一个或多个文件名组成的序列构成路径名。以斜线开关的路径名称为绝对路径名，否则称为相对路径名</p><h3 id="工作目录" tabindex="-1">工作目录 <a class="header-anchor" href="#工作目录" aria-label="Permalink to &quot;工作目录&quot;">​</a></h3><p>每个进程都有一个工作目录，有时叫当前工作目录。相对路径名都从工作目录开始解释。可以用<code>chdir</code>函数去更改其工作目录</p><h3 id="起始目录" tabindex="-1">起始目录 <a class="header-anchor" href="#起始目录" aria-label="Permalink to &quot;起始目录&quot;">​</a></h3><p>登录时，工作目录设置为起始目录，在<code>/etc/passwd</code>文件中最后一个参数</p><h2 id="输入和输出" tabindex="-1">输入和输出 <a class="header-anchor" href="#输入和输出" aria-label="Permalink to &quot;输入和输出&quot;">​</a></h2><h3 id="文件描述符" tabindex="-1">文件描述符 <a class="header-anchor" href="#文件描述符" aria-label="Permalink to &quot;文件描述符&quot;">​</a></h3><p>文件描述符是内核用来标识一个特定进程正在访问的文件。通常是个小的非负整数。当内核打开或创建一个文件时，就会返回一个文件描述符，通过这个文件技术符对这个文件进行读写</p><h3 id="标准输入、标准输出和标准错误" tabindex="-1">标准输入、标准输出和标准错误 <a class="header-anchor" href="#标准输入、标准输出和标准错误" aria-label="Permalink to &quot;标准输入、标准输出和标准错误&quot;">​</a></h3><p>一般，每当运行一个新程序时，所有的shell都为其打开3个文件描述符，即<strong>标准输入</strong>、<strong>标准输出</strong>和<strong>标准错误</strong>。如果不做特殊处理，3个描述符都链接向终端</p><h3 id="不带缓冲的i-o" tabindex="-1">不带缓冲的I/O <a class="header-anchor" href="#不带缓冲的i-o" aria-label="Permalink to &quot;不带缓冲的I/O&quot;">​</a></h3><p>函数<code>open</code>、<code>read</code>、<code>write</code>、<code>lseek</code>以及<code>close</code> 常量：<code>STDIN_FILENO</code>、<code>STDOUT_FILENOT</code>，<code>STDERR_FILENO</code>对应0、1、2，在<code>&lt;unistd.h&gt;</code>头文件中</p><h3 id="标准i-o" tabindex="-1">标准I/O <a class="header-anchor" href="#标准i-o" aria-label="Permalink to &quot;标准I/O&quot;">​</a></h3><p>标准I/O函数为那些不带缓冲的I/O函数提供了一个带缓冲的接口。</p><ul><li>无需担心如何选取最佳的缓冲区大小</li><li>简化了对输入行的处理；<code>gets</code></li></ul><h2 id="程序和进程" tabindex="-1">程序和进程 <a class="header-anchor" href="#程序和进程" aria-label="Permalink to &quot;程序和进程&quot;">​</a></h2><h3 id="程序" tabindex="-1">程序 <a class="header-anchor" href="#程序" aria-label="Permalink to &quot;程序&quot;">​</a></h3><p>程序program是一个存储在磁盘上某个目录中的可执行文件。内核用<code>exec</code>函数，将程序读入内存，并执行程序。</p><h3 id="进程和进程id" tabindex="-1">进程和进程ID <a class="header-anchor" href="#进程和进程id" aria-label="Permalink to &quot;进程和进程ID&quot;">​</a></h3><p>程序的执行实例被称为进程process。UNIX系统确保每个进程都有一个唯一的数字标识符，称为进程ID，一个非负整数</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getppid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="进程控制" tabindex="-1">进程控制 <a class="header-anchor" href="#进程控制" aria-label="Permalink to &quot;进程控制&quot;">​</a></h3><p>3个用于进程控制的主要函数：<code>fork</code>、<code>exec</code>和<code>waitpid</code>。</p><h3 id="线程和线程id" tabindex="-1">线程和线程ID <a class="header-anchor" href="#线程和线程id" aria-label="Permalink to &quot;线程和线程ID&quot;">​</a></h3><p>通常，一个进程只有一个控制线程thread--某一时刻执行的组机器指令。 <strong>好处：</strong></p><ul><li>多个控制线程分别作用于它的不同部分，不同代码处理不同部分，逻辑清晰</li><li>多个线程可以充分利用多处理器系统的并行能力</li></ul><p>一个进程内的所有线程共享同一地址空间、文件描述符、栈以及与进程相关属性。线程的ID只在它所属的进程内起作用</p><h2 id="出错处理" tabindex="-1">出错处理 <a class="header-anchor" href="#出错处理" aria-label="Permalink to &quot;出错处理&quot;">​</a></h2><p>当Unix系统函数出错时，通常会返回一个负值，而且整型变量<code>errno</code>会被设置有特定信息的值。头文件<code>#include &lt;errno.h&gt;</code></p><p>支持多线程，每个线程有它自己的<code>errno</code>。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码链接：https://codebrowser.dev/gcc/include/errno.h.html</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* The error code set by various library functions.  */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__errno_location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) __THROW __attribute_const__;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"># define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> errno</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__errno_location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ())</span></span></code></pre></div><p>提供的两个函数：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strerror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> errnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取errno对应的字符串信息</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> perror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 把s和errno对应的错误信息输出到标准输出；格式为：${s}: ${err_msg}</span></span></code></pre></div><p><strong>错误分类</strong>：致命错误、非致命错误（有些地方可以叫：可恢复错误或不可恢复错误）</p><p>todo：err_msg 定义</p><h2 id="用户标识" tabindex="-1">用户标识 <a class="header-anchor" href="#用户标识" aria-label="Permalink to &quot;用户标识&quot;">​</a></h2><p>用户ID</p><p><code>/etc/passwd</code>中登录项用户ID是一个数值，它向系统标识各个不同的用户。</p><p>todo：为什么？</p><p>组ID</p><p>附属组ID</p><h2 id="信号" tabindex="-1">信号 <a class="header-anchor" href="#信号" aria-label="Permalink to &quot;信号&quot;">​</a></h2><h2 id="时间值" tabindex="-1">时间值 <a class="header-anchor" href="#时间值" aria-label="Permalink to &quot;时间值&quot;">​</a></h2><h2 id="系统调用和库函数" tabindex="-1">系统调用和库函数 <a class="header-anchor" href="#系统调用和库函数" aria-label="Permalink to &quot;系统调用和库函数&quot;">​</a></h2>',59)]))}]]);export{h as __pageData,t as default};
