import{_ as s,c as i,a2 as a,o as e}from"./chunks/framework.DRc6tsBz.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"linux/02app/05_Standard_I_O_Library.md","filePath":"linux/02app/05_Standard_I_O_Library.md","lastUpdated":1713284123000}');const l=s({name:"linux/02app/05_Standard_I_O_Library.md"},[["render",function(s,n,l,t,h,p){return e(),i("div",null,n[0]||(n[0]=[a('<h2 id="标准文件io" tabindex="-1">标准文件IO <a class="header-anchor" href="#标准文件io" aria-label="Permalink to &quot;标准文件IO&quot;">​</a></h2><p><strong>标准文件IO和系统调用open/read/write的关系:</strong></p><p>标准文件IO会去调用open/read/write系统调用,内部是对系统调用的封装</p><p><strong>系统调用open/read/write有什么问题:</strong></p><p>程序中使用open/read/write系统调用,程序会频繁的在<em>用户态</em>和<em>内核态</em>去切换;</p><p>为了减少系统调用的次数,标准文件IO增加了缓冲区,来提高效率</p><p><strong>针对缓冲区Buffer的几个函数:</strong></p><ul><li><code>void setbuf(FILE *stream, char *buf);</code></li><li><code>void setbuffer(FILE *stream, char *buf, size_t size);</code></li><li><code>void setlinebuf(FILE *stream);</code></li><li><code>int setvbuf(FILE *stream, char *buf, int mode, size_t size);</code></li><li><code>int fflush(FILE *stream); </code></li></ul><p>参数mode:</p><ul><li><code>IONBF</code>: unbuffered 不带缓冲</li><li><code>IOLBF</code>: line buffered 行缓冲</li><li><code>IOFBF</code>: fully buffered 全缓冲</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio_ext.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufsize;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        perror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fopen failed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bufsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __fbufsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The buffer size is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%zd\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bufsize);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    putc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bufsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __fbufsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The buffer size is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%zd\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bufsize);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fclose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="操作相关的函数" tabindex="-1">操作相关的函数: <a class="header-anchor" href="#操作相关的函数" aria-label="Permalink to &quot;操作相关的函数:&quot;">​</a></h3><ul><li><code>FILE *fopen(const char *path, const char *mode);</code></li><li><code>int fclose(std::FILE* stream);</code></li><li><code>size_t fread(void *buffer, size_t size, size_t count, FILE *stream);</code></li><li><code>size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);</code></li></ul><h3 id="光标-位置相关函数" tabindex="-1">&quot;光标&quot;位置相关函数: <a class="header-anchor" href="#光标-位置相关函数" aria-label="Permalink to &quot;&quot;光标&quot;位置相关函数:&quot;">​</a></h3><ul><li><code>int fseek(FILE *stream, long offset, int whence);</code></li><li><code>long ftell(FILE *stream);</code></li><li><code>void rewind(FILE *stream);</code></li></ul><h3 id="工具-函数" tabindex="-1">&quot;工具&quot;函数: <a class="header-anchor" href="#工具-函数" aria-label="Permalink to &quot;&quot;工具&quot;函数:&quot;">​</a></h3><ul><li><code>int fgetc(FILE *stream);</code></li><li><code>char *fgets(char *s, int size, FILE *stream);</code></li><li><code>int getc(FILE *stream);</code></li></ul><h3 id="格式化io" tabindex="-1">格式化IO: <a class="header-anchor" href="#格式化io" aria-label="Permalink to &quot;格式化IO:&quot;">​</a></h3><ul><li><code>int fprintf(FILE *stream, const char *format, ... );</code></li><li><code>int fscanf(FILE *stream, const char *format, ... );</code></li></ul><h3 id="other" tabindex="-1">other: <a class="header-anchor" href="#other" aria-label="Permalink to &quot;other:&quot;">​</a></h3><ul><li><code>void clearerr(FILE *stream);</code></li><li><code>int feof(FILE *stream);</code></li><li><code>int ferror(FILE *stream);</code></li><li><code>int fileno(FILE *stream);</code></li></ul><h3 id="临时文件" tabindex="-1">临时文件: <a class="header-anchor" href="#临时文件" aria-label="Permalink to &quot;临时文件:&quot;">​</a></h3><ul><li><code>FILE *tmpfile(void);</code></li></ul>',23)]))}]]);export{n as __pageData,l as default};
