import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.s8d9Ue88.js";const n=JSON.parse('{"title":"Hello world","description":"","frontmatter":{"title":"Hello world","layout":"doc","categories":"CMake","tags":["CMake"],"comments":true,"date":"2021-07-06T00:56:43.000Z"},"headers":[],"relativePath":"misc/cmake/01_helloworld.md","filePath":"misc/cmake/01_helloworld.md","lastUpdated":1715174870000}'),h={name:"misc/cmake/01_helloworld.md"},k=[l('<h1 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h1><blockquote><p>Hello world 仪式:学新的东西的时候，先写一个最简单的demo运行起来</p></blockquote><h2 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h2><ol><li>在根目录新建<code>CMakeLists.txt</code>文件</li><li>在<code>CMakeLists.txt</code>文件中添加脚本</li><li>写C源代码<code>main.c</code></li></ol><p><code>CMakeLists.txt</code>文件:</p><p>CMake项目的配置文件，里面写编译规则</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(00helloworld)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(helloworld main.c)</span></span></code></pre></div><p><code>main.c</code>文件:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    puts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>编译命令:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./helloworld</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span></span></code></pre></div><h2 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h2><h3 id="cmakelists-txt文件" tabindex="-1"><code>CMakeLists.txt</code>文件: <a class="header-anchor" href="#cmakelists-txt文件" aria-label="Permalink to &quot;`CMakeLists.txt`文件:&quot;">​</a></h3><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定最低cmake版本要求为3.12，否则就产生一个FATAL_ERROR，终止编译</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定项目名</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(00helloworld)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用main.c源代码文件生成helloworld程序</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(helloworld main.c)</span></span></code></pre></div><p>CMake项目的配置文件，里面写编译规则</p><p><strong>命令:</strong> 上述中<code>cmake_minimum_required</code>、<code>project</code>、<code>add_executable</code>叫命令(command)</p><ul><li>大小写不敏感，写成大小写都行.建议写小写(辨识度高)</li></ul><blockquote><p>疑问:为什么叫命令，不叫函数? 这不就是个脚本语言吗? 还有括号，和函数调用的写法一模一样. <strong>写法上</strong>和函数类似，<strong>使用上</strong>和命令一样，命令的参数，有些参数是必须的，有些是可选的. 所以，&quot;不要看他说什么，长什么样，要看他做什么，有什么用(功能)&quot;</p></blockquote><p><strong>参数:</strong></p><ul><li>大小写敏感</li><li>参数之间用空格区分</li><li>怎么写? 看<a href="https://cmake.org/cmake/help/latest/index.html" target="_blank" rel="noreferrer">CMake文档</a>.</li></ul><h3 id="编译命令" tabindex="-1">编译命令: <a class="header-anchor" href="#编译命令" aria-label="Permalink to &quot;编译命令:&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./helloworld</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span></span></code></pre></div><h4 id="步骤-1" tabindex="-1">步骤: <a class="header-anchor" href="#步骤-1" aria-label="Permalink to &quot;步骤:&quot;">​</a></h4><ol><li>创建build目录</li><li>生成build system配置</li><li>执行对应build system编译命令</li></ol><p><strong>1.创建build目录:</strong></p><p>cmake配置，编译项目会生成很多文件:</p><ul><li>cmake缓存，配置文件</li><li>build system的配置文件</li><li>编译缓存，中间文件</li></ul><p><strong>2.生成build system配置</strong></p><p>如何去生成build system(告诉cmake项目配置文件(CMakeLists.txt))? 生成哪个build system? 生成到哪个目录下?</p><ul><li>告诉cmake项目配置文件<code>CMakeLists.txt</code>目录.(<code>..</code>表示去当前目录的上一级去找<code>CMakeLists.txt</code>文件)</li><li>生成哪个build system.(没有指定，使用默认，Linux下默认生成make配置，可通过<code>cmake --help</code>来查看)</li><li>生成到哪里去(没有指定，使用默认，当前目录(<code>build</code>目录下))</li></ul><p><strong>3.执行对应build system编译命令</strong></p><p>上面步骤会在<code>build</code>目录生成<code>Makefile</code>文件，然后用make去编译</p><blockquote><p>问题:make，vs或XCode的编译命令也不会用怎么办? 使用<code>cmake --build .</code>，这个命令是对不同build system命令的包装，内部会执行不同build sytem的编译命令</p></blockquote><h2 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h2><ol><li>通过<code>cmake ..</code>去生成Makefile的build system配置</li><li>通过<code>make</code>编译项目</li><li>运行程序</li></ol><p><img src="/assets/image-20210621172724676.wGk1dDe9.webp" alt="" loading="lazy"></p><h2 id="cmake命令行" tabindex="-1">CMake命令行 <a class="header-anchor" href="#cmake命令行" aria-label="Permalink to &quot;CMake命令行&quot;">​</a></h2><p>安装完cmake之后的主要几个命令</p><ul><li><strong>cmake</strong>: cmake主要程序</li><li>ctest:测试</li><li>cpack:打包</li></ul><p><strong>help选项:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Usage</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cmake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path-to-source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cmake ..</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cmake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] -S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path-to-source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path-to-build</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cmake -S . -B build</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Options</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path-to-sourc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Explicitly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directory.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path-to-buil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Explicitly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directory.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">va</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">typ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cmake -D CMAKE_BUILD_TYPE=Debug ..</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -G</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">generator-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Specify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generator.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cmake -G Ninja ..</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --build</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">di</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMake-generated</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tree.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cmake --build build</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --system-information</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [file]  = Dump information about this system.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help,-help,-usage,-h,-H,/?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Print</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> information</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exit.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help-command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;f&gt;]   = Print help </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> one command and exit.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help-command-list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;f&gt;]    = List commands with help available and exit.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help-variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;f&gt;]    = Print help </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> one variable and exit.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help-variable-list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;f&gt;]   = List variables with help available and exit.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help-module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;f&gt;]    = Print help </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> one module and exit.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --help-module-list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [&lt;f&gt;]     = List modules with help available and exit.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Generators</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generators</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (* </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">marks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unix Makefiles               = Generates standard UNIX makefiles.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Ninja</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Generates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.ninja</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Xcode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Xcode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files.</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ......</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印cmake帮助信息</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cmake生成build system目录，-S指定CMakeLists.txt文件目录，-B指定生成cmake配置及build system的目录(没有会创建)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 同上，并指定生成Ninja build system项目</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ninja</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ninja编译命令不会用，怎么办?</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这个命令是对不同build system命令的包装，内部调用不同build system的编译命令来编译项目</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示编译详情信息，指定线程数</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j16</span></span></code></pre></div><h2 id="示例拓展-生成debug版本程序" tabindex="-1">示例拓展:生成Debug版本程序 <a class="header-anchor" href="#示例拓展-生成debug版本程序" aria-label="Permalink to &quot;示例拓展:生成Debug版本程序&quot;">​</a></h2><ul><li><code>CMAKE_BUILD_TYPE</code>变量</li><li><code>set</code>命令</li><li><code>message</code>命令</li><li>cmake命令的<code>-D</code>选项</li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(00helloworld)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CMAKE_BUILD_TYPE:``Debug``、``Release``、``RelWithDebInfo``、``MinSizeRel``</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CMAKE_BUILD_TYPE=Debug</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">CMAKE_BUILD_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Debug)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -DCMAKE_BUILD_TYPE=Debug</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(STATUS </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WARNING:CMAKE_BUILD_TYPE = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ${CMAKE_BUILD_TYPE}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(helloworld main.c)</span></span></code></pre></div><p><strong>CMAKE_BUILD_TYPE变量</strong>:</p><p>CMAKE_XXX打头的变量是cmake内置变量，也可以自定义，后面讲。取值看文档<code>cmake --help-variable CMAKE_BUILD_TYPE</code>，取值:空、<code>Debug</code>、<code>Release</code>、<code>RelWithDebInfo</code>、<code>MinSizeRel</code>.</p><p><strong>set命令</strong>:</p><p>可以理解成其它编程语言中的赋值<code>=</code>等号，相关于<code>CMAKE_BUILD_TYPE=Debug</code></p><p><strong>message命令</strong>:</p><p>类似c语言中的<code>printf()</code>函数，java中的<code>System.out.println()</code>函数，可以查看一些变量的值，取变量值使用类似shell中的<code>${variable_name}</code>表达式</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html" target="_blank" rel="noreferrer">https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html</a></p><blockquote><p>疑问:cmake里面会有很多变量，这些变量是怎么来的?</p></blockquote><ul><li>缺省/默认值，根据你环境自动检测得到; 比如编译器</li><li>根据CMakeLists.txt中的命令产生:版本号，项目路径...</li><li>根据使用<code>cmake</code>命令行参数产生</li></ul><p><strong>project命令</strong>:</p><p><strong>常用变量</strong>:</p><ul><li>CMAKE_C_COMPILER</li><li>CMAKE_CXX_COMPILER</li><li>CMAKE_BUILD_TYPE</li><li>CMAKE_CURRENT_SOURCE_DIR</li></ul><p><strong>查看:</strong></p><ul><li>帮助文档<code>cmake --help-variable PROJECT_VERSION</code></li><li>命令<code>cmake --system-information sys_info.txt</code>查看</li><li>文件<code>build/CMakeCache.txt</code>中</li></ul><h2 id="构建方式" tabindex="-1">构建方式 <a class="header-anchor" href="#构建方式" aria-label="Permalink to &quot;构建方式&quot;">​</a></h2><ul><li>外部构架(out-of-source build)👍</li><li>内部构建(in-source build)</li></ul><p>cmake会去生成一堆配置，缓存文件，以及build system的配置文件，把这生成的文件放在哪里?就有了<strong>外部构建</strong>和<strong>内部构建</strong></p><blockquote><p>生成的上述配置是可以随意删除，不需要提交到仓库，代价就是重新编译</p></blockquote><p><strong>外部构建</strong>:就是把上述生成的文件放在独立的目录，比如前面提到的build目录，</p><p><strong>内部构建</strong>:把上述生成的文件和源代码混合在一起，(不方便管理)</p>',66)];const t=s(h,[["render",function(s,l,n,h,t,e){return a(),i("div",null,k)}]]);export{n as __pageData,t as default};
