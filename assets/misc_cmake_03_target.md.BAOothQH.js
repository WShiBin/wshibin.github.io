import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.s8d9Ue88.js";const l=JSON.parse('{"title":"Targets","description":"","frontmatter":{"title":"Targets","layout":"doc","categories":"CMake","tags":["CMake"],"comments":true,"date":"2021-07-06T00:56:43.000Z"},"headers":[],"relativePath":"misc/cmake/03_target.md","filePath":"misc/cmake/03_target.md","lastUpdated":1715174870000}'),t={name:"misc/cmake/03_target.md"},e=[n('<h1 id="target" tabindex="-1">Target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;Target&quot;">​</a></h1><h2 id="cmake构建规则" tabindex="-1">CMake构建规则: <a class="header-anchor" href="#cmake构建规则" aria-label="Permalink to &quot;CMake构建规则:&quot;">​</a></h2><p>取自<code>cmake --system-information sys_info.txt</code>产生的文件中:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!-- build rules --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CMAKE_C_COMPILE_OBJECT == &quot;&lt;CMAKE_C_COMPILER&gt; &lt;DEFINES&gt; &lt;INCLUDES&gt; &lt;FLAGS&gt; -o &lt;OBJECT&gt; -c &lt;SOURCE&gt;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CMAKE_C_LINK_EXECUTABLE == &quot;&lt;CMAKE_C_COMPILER&gt; &lt;FLAGS&gt; &lt;CMAKE_C_LINK_FLAGS&gt; &lt;LINK_FLAGS&gt; &lt;OBJECTS&gt; -o &lt;TARGET&gt; &lt;LINK_LIBRARIES&gt;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CMAKE_C_CREATE_SHARED_LIBRARY == &quot;&lt;CMAKE_C_COMPILER&gt; &lt;LANGUAGE_COMPILE_FLAGS&gt; &lt;CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS&gt; &lt;LINK_FLAGS&gt; -o &lt;TARGET&gt; &lt;SONAME_FLAG&gt; &lt;TARGET_INSTALLNAME_DIR&gt;&lt;TARGET_SONAME&gt; &lt;OBJECTS&gt; &lt;LINK_LIBRARIES&gt;&quot;</span></span></code></pre></div><p>Makefile项目的两个重要编译流程:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.CMAKE_C_COMPILE_OBJECT 预处理/编译/汇编</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;CMAKE_C_COMPILER&gt; &lt;DEFINES&gt; &lt;INCLUDES&gt; &lt;FLAGS&gt; -o &lt;OBJECT&gt; -c &lt;SOURCE&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.CMAKE_C_LINK_EXECUTABLE 链接</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;CMAKE_C_COMPILER&gt; &lt;FLAGS&gt; &lt;CMAKE_C_LINK_FLAGS&gt; &lt;LINK_FLAGS&gt; &lt;OBJECTS&gt; -o &lt;TARGET&gt; &lt;LINK_LIBRARIES&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h2 id="target目标" tabindex="-1">Target目标 <a class="header-anchor" href="#target目标" aria-label="Permalink to &quot;Target目标&quot;">​</a></h2><blockquote><p>everything is a (self-contained) target</p></blockquote><p>build system构建的目标为了产生<strong>可执行程序</strong>,<strong>动态库</strong>,<strong>静态库</strong>...... 这些被成为<strong>目标target</strong>.</p><h3 id="产生这个target需要哪些条件" tabindex="-1">产生这个target需要哪些条件? <a class="header-anchor" href="#产生这个target需要哪些条件" aria-label="Permalink to &quot;产生这个target需要哪些条件?&quot;">​</a></h3><ul><li>源代码文件</li><li>头文件搜索路径(默认/相对路径/三方库)</li><li>编译器/链接器选项</li><li>编译器/链接器特性</li><li>链接库</li></ul><h3 id="类似面向对象思想-创建target-对象" tabindex="-1">类似面向对象思想，创建target(对象) <a class="header-anchor" href="#类似面向对象思想-创建target-对象" aria-label="Permalink to &quot;类似面向对象思想，创建target(对象)&quot;">​</a></h3><p>构造函数：</p><ul><li>add_executable() 生成可执行文件</li><li>add_library() 生成库(动态库/静态库)</li></ul><p>成员函数：</p><ul><li>target_sources() 编译源文件</li><li><strong>target_include_directories()</strong> 头文件路径</li><li>target_compile_definitions() 编译器传参</li><li>target_compile_features() 编译特性<code>cxx_lambdas/cxx_range_for/...</code></li><li><strong>target_compile_options()</strong> 编译选项</li><li><strong>target_link_libraries()</strong> 链接库</li><li>target_link_options() 链接选项</li><li>target_link_directories() 链接库的目录</li><li>get_target_property() 获取目标的属性</li><li><strong>set_target_properties()</strong> 设置目标的属性</li></ul><p>成员变量</p><ul><li><a href="https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#id4" target="_blank" rel="noreferrer">Target properties（太多）</a>）</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>todo：有库有可执行程序</p><h3 id="动态库版本" tabindex="-1">动态库版本 <a class="header-anchor" href="#动态库版本" aria-label="Permalink to &quot;动态库版本&quot;">​</a></h3><p>todo：</p><p>动态库的版本信息由 VERSION 和 SOVERSION 目标属性定义</p><ul><li>VERSION属性设置为完整的 major.minor.patch 格式</li><li>SOVERSION属性设置为major</li></ul><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mystuff SHARED source1.cpp ...)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set_target_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mystuff PROPERTIES</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\tVERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 2.4.3</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\tSOVERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>libmystuff.so.2.4.3</span></span>\n<span class="line"><span>libmystuff.so.2 --&gt; libmystuff.so.2.4.3</span></span>\n<span class="line"><span>libmystuff.so --&gt; libmystuff.so.2</span></span></code></pre></div><h3 id="不建议使用的命令" tabindex="-1">不建议使用的命令 <a class="header-anchor" href="#不建议使用的命令" aria-label="Permalink to &quot;不建议使用的命令&quot;">​</a></h3><p>这些是全局的命令.避免一些target的选项,配置冲突,产生一些不符合预期的行为</p><ul><li>add_compile_options()</li><li>add_definitions()</li><li>include_directories()</li><li>link_directories()</li><li>link_libraries()</li></ul><h3 id="transitive-usage-requirements" tabindex="-1"><a href="https://cmake.org/cmake/help/v3.0/manual/cmake-buildsystem.7.html#transitive-usage-requirements" target="_blank" rel="noreferrer">Transitive Usage Requirements</a> <a class="header-anchor" href="#transitive-usage-requirements" aria-label="Permalink to &quot;[Transitive Usage Requirements](https://cmake.org/cmake/help/v3.0/manual/cmake-buildsystem.7.html#transitive-usage-requirements)&quot;">​</a></h3><p><strong>问题</strong>:</p><p>当项目增长,依赖增多,面临的问题:多层依赖时,(库/编译flag/option)可见性/传递性的问题</p><p><strong>大型项目依赖关系图:</strong></p><p><img src="/assets/image-20210628003657036.CZ_0a7xX.webp" alt="" loading="lazy"></p><blockquote><p>分析问题,分析最简单的模型就够了,复杂的都是简单的组合形成的</p></blockquote><h4 id="例子1-库依赖public-private" tabindex="-1">例子1:库依赖<code>PUBLIC</code>/<code>PRIVATE</code> <a class="header-anchor" href="#例子1-库依赖public-private" aria-label="Permalink to &quot;例子1:库依赖`PUBLIC`/`PRIVATE`&quot;">​</a></h4><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PUBLIC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## c++ -fPIC -shared -Wl,-soname,liba.so -o liba.so a.cxx.o libb.so libc.so</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PRIVATE/PUBLIC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## c++ -fPIC -shared -Wl,-soname,liba.so -o liba.so a.cxx.o libb.so</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span></code></pre></div><img src="/assets/image-20210628104801087.Cv7nBsSP.webp" style="zoom:50%;"><p><strong>输出编译命令</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fPIC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wl,-soname,liba.so</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> liba.so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.cxx.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libb.so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libc.so</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fPIC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wl,-soname,liba.so</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> liba.so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.cxx.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libb.so</span></span></code></pre></div><h4 id="例子2-编程传参interface" tabindex="-1">例子2:编程传参<code>INTERFACE</code> <a class="header-anchor" href="#例子2-编程传参interface" aria-label="Permalink to &quot;例子2:编程传参`INTERFACE`&quot;">​</a></h4><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># archive库</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(archive archive.cpp)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_compile_definitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(archive </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTERFACE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USING_ARCHIVE_LIB)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># serialization库</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serialization serialization.cpp)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_compile_definitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serialization </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTERFACE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USING_SERIALIZATION_LIB)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># archiveExtras库</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(archiveExtras extras.cpp)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(archiveExtras </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> archive)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(archiveExtras </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serialization)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## archiveExtras 被编译同时带 -DUSING_ARCHIVE_LIB -DUSING_SERIALIZATION_LIB</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># consumer程序</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(consumer consumer.cpp)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## consumer is compiled with -DUSING_ARCHIVE_LIB</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(consumer archiveExtras)</span></span></code></pre></div><p><strong>输出编译命令:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serialization.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serialization.cpp</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> archive.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> archive.cpp</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DUSING_ARCHIVE_LIB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DUSING_SERIALIZATION_LIB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extras.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extras.cpp</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DUSING_ARCHIVE_LIB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> consumer.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> consumer.cpp</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> consumer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libarchiveExtras.a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libarchive.a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libserialization.a</span></span></code></pre></div><h4 id="private-interface-public规则" tabindex="-1"><code>PRIVATE/INTERFACE/PUBLIC</code>规则 <a class="header-anchor" href="#private-interface-public规则" aria-label="Permalink to &quot;`PRIVATE/INTERFACE/PUBLIC`规则&quot;">​</a></h4><ul><li><code>PRIVATE</code>:只给自己用,不给依赖者用</li><li><code>INTERFACE</code>:自己不用,给依赖者用(当依赖于纯头文件库时,在 add_library() 中使 用<code>INTERFACE</code>就非常有有用了)</li><li><code>PUBLIC</code>:<code>PRIVATE</code> + <code>INTERFACE</code>自己和依赖者都可以用</li><li>$&lt;BUILD_INTERFACE&gt;: Used by consumers from this project or use the build directory</li><li>$&lt;INSTALL_INTERFACE&gt;: Used by consumers after this target has been installed</li></ul><h2 id="cmake中的参数传递问题" tabindex="-1">CMake中的参数传递问题 <a class="header-anchor" href="#cmake中的参数传递问题" aria-label="Permalink to &quot;CMake中的参数传递问题&quot;">​</a></h2><p>如何通过cmake命令去影响编译哪些代码</p><ol><li>cmake命令参数 --&gt; CMakeLists.txt</li><li>CMakeLists.txt --&gt; C/CXX代码中</li></ol><h3 id="cmake命令参数传递到cmakelists-txt文件中" tabindex="-1">cmake命令参数传递到CMakeLists.txt文件中 <a class="header-anchor" href="#cmake命令参数传递到cmakelists-txt文件中" aria-label="Permalink to &quot;cmake命令参数传递到CMakeLists.txt文件中&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Options</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">va</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">typ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cmake -D CMAKE_BUILD_TYPE=Debug ..</span></span></code></pre></div><h3 id="cmakelists-txt-c-cxx代码中" tabindex="-1">CMakeLists.txt --&gt; C/CXX代码中 <a class="header-anchor" href="#cmakelists-txt-c-cxx代码中" aria-label="Permalink to &quot;CMakeLists.txt --&gt; C/CXX代码中&quot;">​</a></h3><h4 id="示例1-通过cmake命令行去控制代码中的日志级别" tabindex="-1">示例1: 通过cmake命令行去控制代码中的日志级别 <a class="header-anchor" href="#示例1-通过cmake命令行去控制代码中的日志级别" aria-label="Permalink to &quot;示例1: 通过cmake命令行去控制代码中的日志级别&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;log.h&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;config.h&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cmake -S . -B build -D LOG_DEBUG_ENABLE=ON # 控制当前log级别</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LOG_DEBUG_ENABLE</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_set_level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LOG_DEBUG);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_set_level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LOG_WARN);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;trace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>流程: cmake命令行 --&gt; CMakeLists.txt --&gt; 生成头文件 --&gt; C/CXX代码</p><p><code>config_file命令</code>：通过input文件生成output(头文件)，并且可以把cmake中的变量写入到output中；input文件一般用<code>in</code>后缀，表示input输入文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(04arguments)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(log STATIC</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log.c</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arguments</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main.c</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configure_file(&lt;input&gt; &lt;output&gt;)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">configure_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/config.h.in</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/config.h</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arguments </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arguments </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ${log_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>cmake中的变量写入到output中?</p><p>关键字语法:</p><ul><li><code>#cmakedefine</code>语法</li><li><code>#cmakedefine01</code>语法</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #cmakedefine语法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#cmakedefine LOG_DEBUG_ENABLE</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不存在: /* #undef LOG_DEBUG_ENABLE */</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存在: #define LOG_DEBUG_ENABLE</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#cmakedefine LOG_DEBUG_ENABLE ${LOG_DEBUG_ENABLE}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不存在: /* #undef LOG_DEBUG_ENABLE */</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存在: #define LOG_DEBUG_ENABLE ON</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #cmakedefine01语法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#cmakedefine01 LOG_DEBUG_ENABLE</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不存在: #define LOG_DEBUG_ENABLE 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存在: #define LOG_DEBUG_ENABLE 1</span></span></code></pre></div><p>config.h.in文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#cmakedefine LOG_DEBUG_ENABLE</span></span></code></pre></div><p>编译命令:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">normal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\tcmake -S . -B build</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\tcmake --build build</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\t./build/arguments</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\tcmake -S . -B build -D LOG_DEBUG_ENABLE=ON</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\tcmake --build build</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\t./build/arguments</span></span></code></pre></div><h4 id="示例2-指定项目版本号" tabindex="-1">示例2：指定项目版本号 <a class="header-anchor" href="#示例2-指定项目版本号" aria-label="Permalink to &quot;示例2：指定项目版本号&quot;">​</a></h4><p>项目的版本定义在CMakeLists.txt文件中，代码中如何获取版本号</p><p>todo： <strong>[add_library](dfile:///Users/shibin/Library/Application Support/Dash/DocSets/CMake/CMake.docset/Contents/Resources/Documents/cmake.org/cmake/help/v3.20/command/add_library.html#add-library)</strong></p><ul><li>[Normal Libraries](dfile:///Users/shibin/Library/Application Support/Dash/DocSets/CMake/CMake.docset/Contents/Resources/Documents/cmake.org/cmake/help/v3.20/command/add_library.html#normal-libraries)</li><li>[Object Libraries](dfile:///Users/shibin/Library/Application Support/Dash/DocSets/CMake/CMake.docset/Contents/Resources/Documents/cmake.org/cmake/help/v3.20/command/add_library.html#object-libraries)</li><li>[Interface Libraries](dfile:///Users/shibin/Library/Application Support/Dash/DocSets/CMake/CMake.docset/Contents/Resources/Documents/cmake.org/cmake/help/v3.20/command/add_library.html#interface-libraries)</li><li>[Imported Libraries](dfile:///Users/shibin/Library/Application Support/Dash/DocSets/CMake/CMake.docset/Contents/Resources/Documents/cmake.org/cmake/help/v3.20/command/add_library.html#imported-libraries)</li><li>[Alias Libraries](dfile:///Users/shibin/Library/Application Support/Dash/DocSets/CMake/CMake.docset/Contents/Resources/Documents/cmake.org/cmake/help/v3.20/command/add_library.html#alias-libraries)</li></ul><h3 id="生成器表达式" tabindex="-1">生成器表达式 <a class="header-anchor" href="#生成器表达式" aria-label="Permalink to &quot;生成器表达式&quot;">​</a></h3><ul><li><p>Generator expressions use the $&lt;&gt; syntax.</p></li><li><p>Not evaluated by command interpreter.</p><p>It is just a string with $&lt;&gt;.</p></li><li><p>Evaluated during build system generation.</p></li><li><p>Not supported in all commands (obviously).</p></li></ul><p>生成器表达式是CMake 在生成时(即配置之后)构造, 用于生成特定于配置的构建输出</p><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html" target="_blank" rel="noreferrer">https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html</a></p>',73)];const p=s(t,[["render",function(s,n,l,t,p,h){return a(),i("div",null,e)}]]);export{l as __pageData,p as default};
