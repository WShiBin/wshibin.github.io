import{_ as s,c as i,a2 as a,o as n}from"./chunks/framework.DRc6tsBz.js";const l=JSON.parse('{"title":"Modules模块","description":"","frontmatter":{"title":"Modules模块","layout":"doc","categories":"CMake","tags":["CMake"],"comments":true,"date":"2021-07-06T00:56:43.000Z"},"headers":[],"relativePath":"misc/cmake/04_modules.md","filePath":"misc/cmake/04_modules.md","lastUpdated":1715174870000}');const e=s({name:"misc/cmake/04_modules.md"},[["render",function(s,l,e,t,h,p){return n(),i("div",null,l[0]||(l[0]=[a('<h1 id="modules模块" tabindex="-1">Modules模块 <a class="header-anchor" href="#modules模块" aria-label="Permalink to &quot;Modules模块&quot;">​</a></h1><p>文档:<a href="https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html" target="_blank" rel="noreferrer">https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html</a></p><h2 id="定义" tabindex="-1">定义： <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义：&quot;">​</a></h2><p>cmake中的modules类似于编程语言中的三方库。cmake的脚本有自己的语法，具有完成特定功能的脚本组合在一起就可以形成modules。需要用时引入即可。模块主要作用：<strong>提高开发效率</strong></p><h2 id="内置modules" tabindex="-1">内置Modules： <a class="header-anchor" href="#内置modules" aria-label="Permalink to &quot;内置Modules：&quot;">​</a></h2><ul><li>CMake内置的module</li><li>自己定制的module</li></ul><h2 id="相关命令" tabindex="-1">相关命令： <a class="header-anchor" href="#相关命令" aria-label="Permalink to &quot;相关命令：&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示可用的module模块列表</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help-module-list</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示指定模块的帮助信息</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help-module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakePrintHelpers</span></span></code></pre></div><h2 id="常用内置模块" tabindex="-1">常用内置模块 <a class="header-anchor" href="#常用内置模块" aria-label="Permalink to &quot;常用内置模块&quot;">​</a></h2><ul><li>CMakePrintHelpers：方便打印参数</li><li>GNUInstallDirs：方便配置安装目录</li><li>check系列模块 <ul><li>CheckIncludeFile：检查头文件是否存在</li><li>CheckSymbolExists：检查Symbol是否存在</li><li>CheckCCompilerFlag：检查C编译器Flag</li></ul></li><li>FetchContent：下载内容模块(下载源代码,文件)</li><li>CMakePackageConfigHelpers：包配置文件帮助模块</li><li>Find Modules：用来找依赖库,下节讲</li><li>CPack：打包模块,后面讲</li><li>CTest：测试模块</li><li>GoogleTest：Google测试模块</li></ul><h3 id="cmakeprinthelpers模块" tabindex="-1">CMakePrintHelpers模块 <a class="header-anchor" href="#cmakeprinthelpers模块" aria-label="Permalink to &quot;CMakePrintHelpers模块&quot;">​</a></h3><p><strong>提供了两个function/command</strong></p><ul><li>cmake_print_properties: 方便打印属性</li><li>cmake_print_variables: 方便打印变量</li></ul><p><strong>模块的使用步骤:</strong></p><ol><li>使用<code>include()</code>命令引入模块</li><li>使用模块中提供的function/command</li></ol><p>CMakeLists.txt文件:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(01CMakePrintHelpers)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">CMAKE_BUILD_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Debug)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(STATUS </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WARNING:CMAKE_BUILD_TYPE = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ${CMAKE_BUILD_TYPE}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.引入模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMakePrintHelpers)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.使用模块中提供的function/command</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cmake_print_variables(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">CMAKE_BUILD_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMakePrintHelpers main.c)</span></span></code></pre></div><h3 id="gnuinstalldirs" tabindex="-1">GNUInstallDirs <a class="header-anchor" href="#gnuinstalldirs" aria-label="Permalink to &quot;GNUInstallDirs&quot;">​</a></h3><p><code>CMAKE_INSTALL_&lt;dir&gt;</code></p><ul><li><em>BINDIR</em>：直接运行的可执行文件、脚本和符号链接的位置。默认为bin。</li><li><em>SBINDIR</em>：与BINDIR相似，不过是针对有系统管理权限的情况。默认为sbin。</li><li><em>LIBDIR</em>：库和编译文件的路径。根据主机/目标平台，默认设置为lib或其他(可能包括特定于体系结构的子目录)。</li><li><em>LIBEXECDIR</em>：不直接由用户调用的可执行文件，但可以通过启动脚本或位于BINDIR中的符号链接的方式运行。默认为 libexec</li><li><em>INCLUDEDIR</em>：头文件目录。默认为include。</li><li><em>DATAROOTDIR</em>：只读与结构无关的数据点。为了避开DOCDIR的警告，通常不直接引用。</li><li><em>DATADIR</em>：与结构无关的只读数据，如图像和其他资源。默认值与DATAROOTDIR相同，用于覆盖项目数据位置的首选 方法。</li><li><em>MANDIR</em>：man格式文档的路径。默认为DATAROOTDIR/man。</li><li><em>DOCDIR</em>：通用文档路径。默认值为DATAROOTDIR/doc/PROJECT_NAME(参见下面的注释，了解为什么依赖这个默认 值是不安全的)。</li></ul><p>安装位置：</p><ul><li>Winodws：<code>C:\\Program Files</code>或<code>C:\\Program Files(x86)</code></li><li>Unix/Linux：<code>/usr/local</code>或<code>/opt</code></li></ul><p><code>CMAKE_INSTALL_PREFIX</code>变量默认值：Windows平台是<code>C:\\Program Files${PROJECT_NAME}</code> ，基于Unix的平台上是<code>/usr/local</code> 。</p><h3 id="checkincludefile" tabindex="-1">CheckIncludeFile <a class="header-anchor" href="#checkincludefile" aria-label="Permalink to &quot;CheckIncludeFile&quot;">​</a></h3><p>检查头文件是否存在</p><ul><li><code>CHECK_INCLUDE_FILE(&lt;include&gt; &lt;variable&gt; [&lt;flags&gt;])</code></li></ul><p>CMakeLists.txt文件:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(03CheckIncludeFile)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.引入模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CheckIncludeFile)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CHECK_INCLUDE_FILE(stdio.h HAVE_STDIO_H)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">configure_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/header.h.in</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/header.h</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CheckIncludeFile main.c)</span></span></code></pre></div><p>header.h.in文件:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#cmakedefine HAVE_STDIO_H ${HAVE_STDIO_H}</span></span></code></pre></div><p>main.c文件:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;header.h&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAVE_STDIO_H</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAVE_STDIO_H</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;have stdio.h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="checksymbolexists" tabindex="-1">CheckSymbolExists <a class="header-anchor" href="#checksymbolexists" aria-label="Permalink to &quot;CheckSymbolExists&quot;">​</a></h3><p>检查Symbol是否存在</p><p>Symbol: 符号/标记 (function, variable, macro)</p><ul><li><code>check_symbol_exists(&lt;symbol&gt; &lt;files&gt; &lt;variable&gt;)</code></li></ul><p>CMakeLists.txt文件:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12 FATAL_ERROR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(04CheckSymbolExists)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.引入模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CheckSymbolExists)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check for macro SEEK_SET</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check_symbol_exists(SEEK_SET </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stdio.h&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAVE_SEEK_SET)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check for function fopen</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check_symbol_exists(fopen </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stdio.h&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAVE_FOPEN)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">configure_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/header.h.in</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/header.h</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CheckSymbolExists main.c)</span></span></code></pre></div><p>header.h.in文件:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#cmakedefine HAVE_SEEK_SET ${HAVE_SEEK_SET}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#cmakedefine HAVE_FOPEN ${HAVE_FOPEN}</span></span></code></pre></div><p>main.c文件:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;header.h&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAVE_FOPEN</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CMakeLists.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAVE_SEEK_SET</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fseek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SEEK_SET);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="fetchcontent" tabindex="-1">FetchContent <a class="header-anchor" href="#fetchcontent" aria-label="Permalink to &quot;FetchContent&quot;">​</a></h3><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.14)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_project)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD 11)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FetchContent)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FetchContent_Declare(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \tgoogletest</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \tURL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FetchContent_MakeAvailable(googletest)</span></span></code></pre></div><h3 id="cmakepackageconfighelpers" tabindex="-1">CMakePackageConfigHelpers <a class="header-anchor" href="#cmakepackageconfighelpers" aria-label="Permalink to &quot;CMakePackageConfigHelpers&quot;">​</a></h3><p>Modules are <code>&lt;script&gt;.cmake</code> files located in the <code>CMAKE_MODULE_PATH</code>.</p><p>Modules can be loaded with the <code>include()</code> command.</p><h2 id="其它相关" tabindex="-1">其它相关： <a class="header-anchor" href="#其它相关" aria-label="Permalink to &quot;其它相关：&quot;">​</a></h2><p>变量: <code>CMAKE_MODULE_PATH</code></p><p>通过<code>include()</code>和<code>find_package()</code>会去<code>CMAKE_MODULE_PATH</code>下找模块</p><p><strong>CMakeDependentOption</strong></p><blockquote><p>设置一个option依赖于另一个option</p></blockquote><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMakeDependentOption)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cmake_dependent_option(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    option_var </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;condition_expreesion&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OFF</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果condition_expreesion是true, option_var是ON, 反之option_var是OFF</p>',54)]))}]]);export{l as __pageData,e as default};
