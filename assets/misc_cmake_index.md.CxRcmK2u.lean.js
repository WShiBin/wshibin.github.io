import{_ as e,c as a,a2 as t,o as r}from"./chunks/framework.DRc6tsBz.js";const o=JSON.parse('{"title":"CMake教程","description":"","frontmatter":{"title":"CMake教程","layout":"doc","categories":"CMake","tags":["CMake"],"comments":true,"date":"2021-07-06T00:56:43.000Z"},"headers":[],"relativePath":"misc/cmake/index.md","filePath":"misc/cmake/index.md","lastUpdated":1715174870000}');const l=e({name:"misc/cmake/index.md"},[["render",function(e,o,l,i,n,s){return r(),a("div",null,o[0]||(o[0]=[t('<h1 id="cmake教程" tabindex="-1">CMake教程 <a class="header-anchor" href="#cmake教程" aria-label="Permalink to &quot;CMake教程&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>官网:<a href="https://cmake.org/" target="_blank" rel="noreferrer">https://cmake.org/</a></p><blockquote><p>CMake is an open-source, cross-platform family of tools designed to <strong>build, test and package software</strong>. CMake is used to control the software compilation process using simple platform and <strong>compiler independent configuration files</strong>, and <strong>generate native makefiles</strong> and workspaces that can be used in the compiler environment of your choice.</p></blockquote><p>开源的、跨平台的<strong>构建、测试、打包</strong>软件工具 使用简单平台和独立于编译器的<strong>配置文件</strong>来控制软件编译过程，生成可在您选择的编译器环境中使用的本机 makefile 和工作区</p><p><strong>画重点：</strong></p><ul><li>配置文件：cmake 脚本(命令/语法)</li><li>构建：CMake</li><li>测试：CTest</li><li>打包：CPack</li></ul><h2 id="cmake-是什么" tabindex="-1">CMake 是什么? <a class="header-anchor" href="#cmake-是什么" aria-label="Permalink to &quot;CMake 是什么?&quot;">​</a></h2><blockquote><p>提供一组工具，可以在不同平台上配置、构建、测试和部署项目. <a href="https://www.aosabook.org/en/cmake.html" target="_blank" rel="noreferrer">https://www.aosabook.org/en/cmake.html</a></p></blockquote><p>CMake 是一个<strong>构建系统生成器</strong>(build system <strong>generator</strong>)，不是 build system</p><img src="/assets/image-20210621103712644.24RO2oS7.webp" style="zoom:50%;"><ul><li>支持主流的 build system：Make、Ninja、Visual Studio、XCode、...</li><li>跨平台：Linux、Windows、OSX、...</li></ul><p>有大一统的趋势. 越来越多的第三方库提供 CMake 配置，包括 QT，Android NDK 官方支持 CMake</p><h2 id="jetbrain-2020-调查" tabindex="-1">Jetbrain 2020 调查 <a class="header-anchor" href="#jetbrain-2020-调查" aria-label="Permalink to &quot;Jetbrain 2020 调查&quot;">​</a></h2><ul><li>c：<a href="https://www.jetbrains.com/lp/devecosystem-2020/c/" target="_blank" rel="noreferrer">https://www.jetbrains.com/lp/devecosystem-2020/c/</a></li><li>cpp：<a href="https://www.jetbrains.com/lp/devecosystem-2020/cpp/" target="_blank" rel="noreferrer">https://www.jetbrains.com/lp/devecosystem-2020/cpp/</a></li></ul><p><strong>CPP：</strong></p><p><img src="/assets/image-20210601003717844.CA-qCDlZ.webp" alt="" loading="lazy"></p><h2 id="安装" tabindex="-1">安装： <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装：&quot;">​</a></h2><p>地址：<a href="https://cmake.org/download/" target="_blank" rel="noreferrer">https://cmake.org/download/</a></p><p><strong>CMake 两个重要版本：</strong></p><ul><li>Modern CMake：CMake 3.0+</li><li>More Modern CMake：CMake 3.12+</li></ul><p><strong>命令行</strong>版本 vs <strong>界面</strong>版本</p><p>界面版本都是对命令行版本的包装和可视化,这里也只讲命令行版本,cmake 命令行会了,在去使用界面版本的问题不大</p><p><strong>其它需要安装环境：</strong></p><ul><li>对应编译器 GCC、LLVM.</li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VSCode</a>及 cmake 插件：<a href="https://marketplace.visualstudio.com/items?itemName=twxs.cmake" target="_blank" rel="noreferrer">CMake</a>，<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools" target="_blank" rel="noreferrer">CMake Tools</a>.</li></ul><h2 id="学习步骤" tabindex="-1">学习步骤： <a class="header-anchor" href="#学习步骤" aria-label="Permalink to &quot;学习步骤：&quot;">​</a></h2><p><strong>官方文档教程存在的问题：</strong></p><ul><li>官方教程<a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html" target="_blank" rel="noreferrer">CMake Tutorial</a>，学习步骤顺序没有问题;问题是内容精简得,里面很多概念不会跟你解释</li><li>CMake 的<a href="https://cmake.org/cmake/help/latest/index.html" target="_blank" rel="noreferrer">官方文档</a>更像是个手册,方便查询的那种;</li></ul><blockquote><p>知乎某某的吐槽： 虽然官方的 documentation 很详细，但特么都是描述性的。也就是说 CMake 告诉你他能做什么，我有多屌，但是他不告诉你该怎么做，以及为什么要这么做。从而开发过程就变成了一个试错过程</p></blockquote><p>无法作为一种渐进的,结构化的学习 CMake 的方式</p><h3 id="本教程步骤" tabindex="-1">本教程步骤： <a class="header-anchor" href="#本教程步骤" aria-label="Permalink to &quot;本教程步骤：&quot;">​</a></h3><blockquote><p>从<code>helloworld</code>开始，然后会讲一些 cmake 脚本中的常用命令,循序渐进,中间会穿插讲解很多概念解释</p></blockquote><ol><li><a href="./01_helloworld.html">helloworld 示例</a></li><li><a href="./02_common_script_commands.html">cmake 常用脚本命令(CMakeLists.txt)</a></li><li><a href="./03_target.html">生成 target(可执行程序/动态库/静态库)</a></li><li><a href="./04_modules.html">CMake 的模块</a></li><li><a href="./05_thirty_part_library.html">项目引入三方库</a></li><li><a href="./06_cross_compiling.html">交叉编译</a></li><li><a href="./07_install_pack.html">安装/打包</a></li></ol><p><strong>本教程的前提假设：</strong></p><ul><li>你会使用 gcc 编译代码或项目,使用过动态库,静态库,设置过一些编译选项,知道编译是怎么一回事(流程)</li><li>能看懂或会写简单的 Makefile</li></ul><h2 id="reference" tabindex="-1">Reference： <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference：&quot;">​</a></h2><h3 id="书籍推荐" tabindex="-1">书籍推荐： <a class="header-anchor" href="#书籍推荐" aria-label="Permalink to &quot;书籍推荐：&quot;">​</a></h3><p><strong>CMake Cookbook</strong></p><ul><li>CMake Cookbook 英文：<a href="https://www.packtpub.com/product/cmake-cookbook/9781788470711" target="_blank" rel="noreferrer">https://www.packtpub.com/product/cmake-cookbook/9781788470711</a></li><li>中文版(Github)：1.<a href="https://github.com/xiaoweiChen/CMake-Cookbook" target="_blank" rel="noreferrer">https://github.com/xiaoweiChen/CMake-Cookbook</a></li><li>中文版(书栈网)：2.<a href="https://www.bookstack.cn/books/CMake-Cookbook" target="_blank" rel="noreferrer">https://www.bookstack.cn/books/CMake-Cookbook</a></li><li>代码：<a href="https://github.com/dev-cafe/cmake-cookbook" target="_blank" rel="noreferrer">https://github.com/dev-cafe/cmake-cookbook</a></li></ul><p><strong>Professional CMake</strong></p><blockquote><p>自行寻找资源</p></blockquote><h3 id="资源" tabindex="-1">资源： <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源：&quot;">​</a></h3><p>Github：<a href="https://github.com/onqtam/awesome-cmake" target="_blank" rel="noreferrer">awesome-cmake:</a></p><h3 id="视频" tabindex="-1">视频： <a class="header-anchor" href="#视频" aria-label="Permalink to &quot;视频：&quot;">​</a></h3><ul><li><a href="https://www.youtube.com/watch?v=bsXLMQ6WgIk&amp;t=2413s&amp;ab_channel=CppNow" target="_blank" rel="noreferrer">C++Now 2017: Daniel Pfeifer “Effective CMake&quot;</a></li><li><a href="https://www.youtube.com/watch?v=eC9-iRN2b04&amp;t=984s&amp;ab_channel=CppCon" target="_blank" rel="noreferrer">CppCon 2017: Mathieu Ropert “Using Modern CMake Patterns to Enforce a Good Modular Design”</a></li><li><a href="https://www.youtube.com/watch?v=y7ndUhdQuU8&amp;t=2436s&amp;ab_channel=MeetingCpp" target="_blank" rel="noreferrer">More Modern CMake - Deniz Bahadir - Meeting C++ 2018</a></li><li><a href="https://www.youtube.com/watch?v=y9kSr5enrSk&amp;t=2077s&amp;ab_channel=MeetingCpp" target="_blank" rel="noreferrer">Oh No! More Modern CMake - Deniz Bahadir - Meeting C++ 2019</a></li></ul>',45)]))}]]);export{o as __pageData,l as default};
