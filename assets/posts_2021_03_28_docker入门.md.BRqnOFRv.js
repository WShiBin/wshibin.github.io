import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.s8d9Ue88.js";const l=JSON.parse('{"title":"【Tools】Docker入门","description":"","frontmatter":{"title":"【Tools】Docker入门","categories":"Tools","tags":["Docker","Tools"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2021-03-28T16:44:08.000Z"},"headers":[],"relativePath":"posts/2021/03_28_docker入门.md","filePath":"posts/2021/03_28_docker入门.md","lastUpdated":1713886889000}'),h={name:"posts/2021/03_28_docker入门.md"},t=[n('<h1 id="docker入门" tabindex="-1">Docker入门 <a class="header-anchor" href="#docker入门" aria-label="Permalink to &quot;Docker入门&quot;">​</a></h1><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>在公司开发项目的时候，为了避免不出什么幺蛾子，会尽量保证多人的开发环境一致：系统版本，编译器版本，甚至交叉编译器目录都安装成一样的，避免因为环境出错而导致的不必要的成本.一切都运行的很好，直到有次遇到了问题，需要到杜工电脑上编译时，可能编译过多个项目的代码，依赖库的版本也可能和我们的环境不一样，折腾了二十分钟，最后还是在我电脑编译了发给他.</p><p>我电脑之前就因为不同项目有依赖同一个软件的不同版本，最后电脑崩了，直接新装了系统.</p><p><strong>问题场景：</strong></p><ul><li>一个人的主机编译不同的项目，不同的项目可能会依赖同一个软件/库的不同版本.有的项目依赖java5，有的依赖java8</li><li>项目的开发，测试和部署环境不一致.导致：&quot;我这儿都跑的好好的，怎么在你那里运行就有问题&quot;</li><li>程序部署到不同系统环境的server，(公司的不台服务器装有不同的系统，又或者你把程序发给客户)</li></ul><p>前者导致自己维护主机的环境困难，可能会和我一样弄的重装系统；后者导致会增加一些不必要的工作</p><h2 id="虚拟机" tabindex="-1">虚拟机 <a class="header-anchor" href="#虚拟机" aria-label="Permalink to &quot;虚拟机&quot;">​</a></h2><p>如果我给一个项目创建一个虚拟机，这个问题就能解决了.这个虚拟机的运行环境专门为这个项目定制的</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>占用资源高：占CPU，占内存，占磁盘</li><li>启动慢：需要先启动一个系统</li><li>共享麻烦：环境共享给别人时，拷贝一个系统实例?</li></ul><h2 id="docker介绍" tabindex="-1">Docker介绍 <a class="header-anchor" href="#docker介绍" aria-label="Permalink to &quot;Docker介绍&quot;">​</a></h2><p>官网：<a href="https://www.docker.com/" target="_blank" rel="noreferrer">https://www.docker.com/</a></p><p>Docker中的容器是虚拟了操作系统，而虚拟机虚拟了硬件资源</p><p>能<strong>保证开发，测试，部署的环境一致（编译环境和运行环境）</strong>，和主机无关的环境</p><p><img src="/assets/image-20210328205725519.Dq6u-g-V.webp" alt="" loading="lazy"></p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>占用资源低：用多少给多少</li><li>启动快：像本地启动一个进程一样快</li><li>共享方便：共享一个Dockerfile文件；或者共享一个docker hub的链接</li><li>管理方便：不用就删了</li></ul><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p><img src="/assets/image-20210328202950078.CBP_dVyq.webp" alt="" loading="lazy"></p><ul><li>镜像image：和虚拟机类比，就是系统镜像文件(里面包括一个程序必要的<strong>编译</strong>或<strong>运行环境</strong>)</li><li>容器container：和虚拟机类比，就是安装好的虚拟机系统</li><li>docker hub：一个下载镜像image的远程仓库，</li><li>Dockerfile文件：一个用于创建镜像image的规则文件(添加软件去年依赖)</li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>官网文档：<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">https://docs.docker.com/get-docker/</a></p><h4 id="ubuntu安装" tabindex="-1">Ubuntu安装： <a class="header-anchor" href="#ubuntu安装" aria-label="Permalink to &quot;Ubuntu安装：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.Update the apt package index and install packages to allow apt to use a repository over HTTPS:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    apt-transport-https</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ca-certificates</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    gnupg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    lsb-release</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.Add Docker’s official GPG key:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://download.docker.com/linux/ubuntu/gpg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dearmor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/keyrings/docker-archive-keyring.gpg</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3.添加源（注意：当前是x86_64/amd64，其它的请参考官方文档）</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lsb_release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) stable&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list.d/docker.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4.安装docker</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd.io</span></span></code></pre></div><blockquote><p>Note：</p><ol><li>如果架构不是x86_64/amd64，去看文档找对应的；</li><li>另外，安装出问题了看官方文档，已官方文档为主，当前安装文档只是官方文档某个时间文档的快照</li></ol></blockquote><h4 id="windows和macos安装" tabindex="-1">Windows和MacOS安装： <a class="header-anchor" href="#windows和macos安装" aria-label="Permalink to &quot;Windows和MacOS安装：&quot;">​</a></h4><p><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">https://docs.docker.com/get-docker/</a> 下载对应平台的安装包，然后双击、下一步、下一步、就可以了</p><p>Windows和MacOS版本会有界面</p><h4 id="配置镜像源" tabindex="-1">配置镜像源 <a class="header-anchor" href="#配置镜像源" aria-label="Permalink to &quot;配置镜像源&quot;">​</a></h4><p>是用来解决docker下载镜像慢问题，使用docker官方的镜像：<a href="https://registry.docker-cn.com" target="_blank" rel="noreferrer">https://registry.docker-cn.com</a></p><p><strong>Ubuntu：</strong></p><p>修改 <code>/etc/docker/daemon.json</code> 文件并添加上 registry-mirrors 键值。（如果文件不存在，请新建该文件）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;registry-mirrors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://registry.docker-cn.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>修改保存后重启 Docker 以使配置生效。Ubuntu重启Docker：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><p><strong>MacOS：</strong></p><p>设置--&gt;Docker Engine：</p><p><img src="/assets/image-20210825165057417.23bQO-Br.webp" alt="" loading="lazy"></p><h3 id="docker常用命令" tabindex="-1">Docker常用命令 <a class="header-anchor" href="#docker常用命令" aria-label="Permalink to &quot;Docker常用命令&quot;">​</a></h3><h4 id="帮助命令" tabindex="-1">帮助命令 <a class="header-anchor" href="#帮助命令" aria-label="Permalink to &quot;帮助命令&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看子命令的help: docker subcommand --help</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><h4 id="镜像image相关命令" tabindex="-1">镜像image相关命令 <a class="header-anchor" href="#镜像image相关命令" aria-label="Permalink to &quot;镜像image相关命令&quot;">​</a></h4><p>Dockerhub：<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看本机的镜像列表</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pull/push</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image_name</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 从docker hub拉取Ubuntu镜像</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image_name</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 把本地镜像推到docker hub (可能需要用docker tag先重命令，需要和docker hub中的同名)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建一个tag</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SOURCE_IMAGE[:TAG]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TARGET_IMAGE[:TAG]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 保存/导入镜像(共享给其它人同一个环境)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu20</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu20_import:latest</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># rm image</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image_name</span></span></code></pre></div><h4 id="容器container相关命令" tabindex="-1">容器container相关命令 <a class="header-anchor" href="#容器container相关命令" aria-label="Permalink to &quot;容器container相关命令&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker run [OPTIONS] IMAGE</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用某个镜像image创建container</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于镜像ubuntu，创建名为ubuntu20的容器，并以交互的模式启动容器ubuntu20</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \t-name:指定创建的容器名为ubuntu20</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#\t\t-i:交互模式运行</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -t:分配一个终端</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于镜像ubuntu，创建名为ubuntu20的容器，并以交互的模式启动容器ubuntu20</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -w:指定工作目录，进入到容器之后的目录</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -v:把本机的目录/home/shibin/repo/linux-kit，映射到容器的目录/workspace/linux-kit</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /workspace/linux-kit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/shibin/repo/linux-kit:/workspace/linux-kit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 创建一个容器container，并启动容器container，以交互的方式运行</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看当前container的状态</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 启动一个容器container</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # (i/interactive)启动一个容器container，交互模式运行</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 重启</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入到正在运行的container</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attach</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将容器保存为镜像</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -a 作者</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -m message</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shibin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;linux-kit dev env&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb9050bdc3cc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除容器container</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看容器运行的log</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 查看下log，并退出</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name/id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # (f/follow)查看log，不退出</span></span></code></pre></div><h4 id="dockerfile相关命令和语法" tabindex="-1">Dockerfile相关命令和语法 <a class="header-anchor" href="#dockerfile相关命令和语法" aria-label="Permalink to &quot;Dockerfile相关命令和语法&quot;">​</a></h4><p>文档：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/builder/</a></p><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p><strong>语法：</strong></p><ul><li><strong>FROM</strong>：定义使用哪个为基础镜像</li><li><strong>RUN</strong>：执行shell命令</li><li>ENV：设置环境变量</li><li>COPY：将主机的文件复制到容器内</li><li>ADD：更高级的复制文件，如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，会解压</li><li>VOLUME：将主机的文件映射到容器内</li><li>EXPOSE：声明容器运行时提供服务的端口</li><li>WORKDIR：工作目录</li><li>CMD：最后执行的命令</li></ul><p><strong>Dockerfile文件example</strong></p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:20.04</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apt-get update \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; export DEBIAN_FRONTEND=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;noninteractive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apt-get install -y locales build-essential cmake cppcheck valgrind gdb vim \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apt-get autoremove -y \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apt-get clean -y \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /opt/arm-linux-gnueabihf /opt/arm-linux-gnueabihf</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/opt/arm-linux-gnueabihf/bin:${PATH}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LANG=en_US.utf8</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /workspace/linux-kit</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello dockerfile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><p><strong>生成镜像</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # .是指Dockerfile文件所在的目录</span></span></code></pre></div><p><strong>通过镜像启动container</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /workspace/linux-kit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/shibin/repo/linux-kit:/workspace/linux-kit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 映射项目代码</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo hello container&quot;</span></span></code></pre></div><blockquote><p>总结：镜像是用来构建程序的编译或运行环境，在运行项目的时候把代码映射进去</p></blockquote><h2 id="docker实践" tabindex="-1">Docker实践 <a class="header-anchor" href="#docker实践" aria-label="Permalink to &quot;Docker实践&quot;">​</a></h2><p>目标：构建Linux-kit的交叉编译环境，并分发给其它同事，保证统一的编译环境</p><p><strong>步骤：</strong></p><ol><li>启动一个Container实例（image -&gt; container）</li><li>为项目定制镜像Image，编写Dockerfile（Dockerfile -&gt; image）</li><li>把交叉编译器和代码映射进去</li><li>分发共享这个环境（镜像）</li></ol><h3 id="启动一个容器container实例" tabindex="-1">启动一个容器Container实例 <a class="header-anchor" href="#启动一个容器container实例" aria-label="Permalink to &quot;启动一个容器Container实例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --rm：退出则删除Container</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><h3 id="为项目定制镜像image-编写dockerfile" tabindex="-1">为项目定制镜像Image，编写Dockerfile <a class="header-anchor" href="#为项目定制镜像image-编写dockerfile" aria-label="Permalink to &quot;为项目定制镜像Image，编写Dockerfile&quot;">​</a></h3><p>Dockerfile文件：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:20.04</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apt-get update \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; export DEBIAN_FRONTEND=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;noninteractive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apt-get install -y locales build-essential cmake cppcheck valgrind gdb vim \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apt-get autoremove -y \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apt-get clean -y \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /opt/arm-linux-gnueabihf /opt/arm-linux-gnueabihf</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/opt/arm-linux-gnueabihf/bin:${PATH}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LANG=en_US.utf8</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /workspace/linux-kit</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello dockerfile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><p>构建镜像image：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # .是指Dockerfile文件所在的目录</span></span></code></pre></div><h3 id="把交叉编译器和代码映射到container" tabindex="-1">把交叉编译器和代码映射到Container <a class="header-anchor" href="#把交叉编译器和代码映射到container" aria-label="Permalink to &quot;把交叉编译器和代码映射到Container&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行Container环境；把编译器，代码mount上去</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/arm-linux-gnueabihf:/opt/arm-linux-gnueabihf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/shibin/repo/linux-kit:/workspace/linux-kit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH=/opt/arm-linux-gnueabihf/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果上一步成功，会进入到容器内</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bash CMD: do something what you want 编译、运行、测试</span></span></code></pre></div><p>在次启动和进入容器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式1：直接启动容器Container，并进入</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式2：先启动容器Container，然后进入</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><h3 id="分发共享这个环境-镜像" tabindex="-1">分发共享这个环境（镜像） <a class="header-anchor" href="#分发共享这个环境-镜像" aria-label="Permalink to &quot;分发共享这个环境（镜像）&quot;">​</a></h3><p>共享这一套环境给其它开发人员</p><h4 id="分发方式" tabindex="-1">分发方式： <a class="header-anchor" href="#分发方式" aria-label="Permalink to &quot;分发方式：&quot;">​</a></h4><ol><li><strong>分发Dockerfile文件</strong></li><li>上传到Docker hub</li><li>分发镜像文件： <ul><li>把镜像打包分享</li><li>把Container打包成镜像分享</li></ul></li></ol><h4 id="分发dockerfile文件" tabindex="-1">分发Dockerfile文件： <a class="header-anchor" href="#分发dockerfile文件" aria-label="Permalink to &quot;分发Dockerfile文件：&quot;">​</a></h4><p>一般把Dockerfile文件放在项目根目录下，开发人员自行远程下载，组装镜像环境，配置自己的项目目录，编译器目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/arm-linux-gnueabihf:/opt/arm-linux-gnueabihf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/shibin/repo/linux-kit:/workspace/linux-kit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH=/opt/arm-linux-gnueabihf/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    bash</span></span></code></pre></div><p>最佳实践：本地的项目文件或是交叉编译器文件，建议映射（mount）到容器中，不建议拷贝进去。文件都本地方便管理，项目文件方便代码版本管理，Image和Container的性质是：不用随时可以删除。</p><h4 id="上传到docker-hub" tabindex="-1">上传到Docker hub： <a class="header-anchor" href="#上传到docker-hub" aria-label="Permalink to &quot;上传到Docker hub：&quot;">​</a></h4><p>todo：</p><h4 id="分发镜像文件" tabindex="-1">分发镜像文件： <a class="header-anchor" href="#分发镜像文件" aria-label="Permalink to &quot;分发镜像文件：&quot;">​</a></h4><h5 id="把镜像打包分享" tabindex="-1">把镜像打包分享 <a class="header-anchor" href="#把镜像打包分享" aria-label="Permalink to &quot;把镜像打包分享&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.保存镜像linux-kit到linux-kit.tar</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.从linux-kit.tar导入镜像，新的镜像名是linux-kit</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span></span></code></pre></div><h5 id="把container打包成镜像分享" tabindex="-1">把Container打包成镜像分享 <a class="header-anchor" href="#把container打包成镜像分享" aria-label="Permalink to &quot;把Container打包成镜像分享&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.把Container(cb9050bdc3cc)保存为镜像linux-kit:latest</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shibin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;linux-kit dev env&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    cb9050bdc3cc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.保存镜像linux-kit到linux-kit.tar</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3.从linux-kit.tar导入镜像，新的镜像名是linux-kit:latest</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-kit:latest</span></span></code></pre></div><h2 id="docker-compose" tabindex="-1">Docker compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker compose&quot;">​</a></h2><p>文档：<a href="https://docs.docker.com/compose/" target="_blank" rel="noreferrer">https://docs.docker.com/compose/</a></p><p>如果容器多了，管理就成了问题，启动的命令也这么长，不可能一个个的敲，把这些写到配置文件<code>docker-compose.yml</code>里面，</p><p>一个简单的命令就能开启一个或多个container</p><p><strong>docker-compose.yml示例</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.4&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  service_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">image_name</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/home/shibin/repo/linux-kit:/workspace/linux-kit</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    working_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/workspace/linux-kit</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash -c &quot;echo hello docker-compose&quot;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \txxx</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \txxx</span></span></code></pre></div><p><strong>启动</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><h2 id="vscode整合docker" tabindex="-1">VSCode整合Docker <a class="header-anchor" href="#vscode整合docker" aria-label="Permalink to &quot;VSCode整合Docker&quot;">​</a></h2><p>VSCode整合Docker，搭建开发环境</p><p>文档：<a href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="noreferrer">https://code.visualstudio.com/docs/remote/containers</a></p><p>安装插件：Remote - Containers</p><p>实现：在Container里面装了一个VS Code Server，</p><p><img src="/assets/image-20210328215327455.DsBPO995.webp" alt="" loading="lazy"></p><h2 id="reference" tabindex="-1">Reference： <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference：&quot;">​</a></h2><p>书籍：<a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noreferrer">Docker-从入门到实践</a></p>',105)];const e=s(h,[["render",function(s,n,l,h,e,p){return a(),i("div",null,t)}]]);export{l as __pageData,e as default};
