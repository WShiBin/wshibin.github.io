import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.s8d9Ue88.js";const n=JSON.parse('{"title":"【C】LVGL源码分析","description":"","frontmatter":{"title":"【C】LVGL源码分析","categories":"LVGL","tags":["源码分析","GUI","LVGL","C"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2021-08-15T14:53:29.000Z"},"headers":[],"relativePath":"posts/2021/08_15_LVGL源码分析.md","filePath":"posts/2021/08_15_LVGL源码分析.md","lastUpdated":1713886889000}'),t={name:"posts/2021/08_15_LVGL源码分析.md"},h=[l('<h1 id="lvgl源码分析" tabindex="-1">LVGL源码分析 <a class="header-anchor" href="#lvgl源码分析" aria-label="Permalink to &quot;LVGL源码分析&quot;">​</a></h1><blockquote><p>文章基于LVGL V7.11.0版本<a href="https://github.com/lvgl/lvgl/tree/v7.11.0" target="_blank" rel="noreferrer">https://github.com/lvgl/lvgl/tree/v7.11.0</a></p></blockquote><h2 id="ui框架核心流程" tabindex="-1">UI框架核心流程： <a class="header-anchor" href="#ui框架核心流程" aria-label="Permalink to &quot;UI框架核心流程：&quot;">​</a></h2><img src="/assets/image-20220823121744058_AM.Drfjqt8s.webp" style="zoom:50%;"><p>对于一个UI系统来说最原始的三个需求：</p><ul><li>控件树维护：在前端叫DOM树（创建控件时，都需要传一个父控件）</li><li>UI显示、刷新：通过迭代控件树，调用每个控件自己的绘制函数</li><li>点击事件传递到控件：TP硬件获取到点击坐标，传给UI系统，在去控件树去找到对应位置的控件，然后调用该控件的点击回调函数</li></ul><h2 id="问题" tabindex="-1">问题： <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题：&quot;">​</a></h2><ul><li>LVGL启动流程</li><li>Widgets的数据是如何显示到屏幕</li><li>屏幕点击事件，是如何传递到对应空间的事件回调中</li><li>不同控件之间有什么关系？为什么返回的都是lv_obj_t</li><li>图片解码、缓存流程，显示</li></ul><h2 id="提前须知" tabindex="-1">提前须知： <a class="header-anchor" href="#提前须知" aria-label="Permalink to &quot;提前须知：&quot;">​</a></h2><h3 id="lvgl中重要的数据结构-双向链表" tabindex="-1">LVGL中重要的数据结构：双向链表 <a class="header-anchor" href="#lvgl中重要的数据结构-双向链表" aria-label="Permalink to &quot;LVGL中重要的数据结构：双向链表&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lv_ll.h</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n_size;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_ll_node_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_ll_node_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tail;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="最重要的宏-lv-roots" tabindex="-1">最重要的宏：<code>LV_ROOTS</code> <a class="header-anchor" href="#最重要的宏-lv-roots" aria-label="Permalink to &quot;最重要的宏：`LV_ROOTS`&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lv_gc.c</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LV_ENABLE_GC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LV_ENABLE_GC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LV_ROOTS</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* LV_ENABLE_GC */</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lv_gc.h</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LV_ITERATE_ROOTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_task_ll)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*Linked list to store the lv_tasks*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_disp_ll)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*Linked list of screens*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            \\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_indev_ll)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*Linked list of screens*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            \\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_drv_ll)                                         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_file_ll)                                        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_anim_ll)                                        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_group_ll)                                       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_img_defoder_ll)                                 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_obj_style_trans_ll)                             </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_img_cache_entry_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_img_cache_array)                  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_task_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_task_act)                                    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_mem_buf_arr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , _lv_mem_buf)                              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_lv_draw_mask_saved_arr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , _lv_draw_mask_list)              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , _lv_theme_material_styles)                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , _lv_theme_template_styles)                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , _lv_theme_mono_styles)                              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , _lv_theme_empty_styles)                             </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _lv_font_decompr_buf)                             </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LV_DEFINE_ROOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) root_type root_name;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LV_ROOTS</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LV_ITERATE_ROOTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LV_DEFINE_ROOT)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LV_GC_ROOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) x</span></span></code></pre></div><p>很懵？那换一种方式：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_task_ll;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*Linked list to store the lv_tasks*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_disp_ll;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*Linked list of display device*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_indev_ll;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*Linked list of input device*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_drv_ll;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_file_ll;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_anim_ll;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_group_ll;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_img_decoder_ll;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_ll_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   _lv_obj_style_trans_ll;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_img_cache_entry_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     _lv_img_cache_array;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_task_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                _lv_task_act;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_mem_buf_arr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          _lv_mem_buf;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_lv_draw_mask_saved_arr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _lv_draw_mask_list;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     _lv_theme_material_styles;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     _lv_theme_template_styles;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     _lv_theme_mono_styles;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     _lv_theme_empty_styles;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  _lv_font_decompr_buf;</span></span></code></pre></div><p>基本上是lvgl的context：task、disp、indev、drv、anim、img_decoder、style、theme、font全定义了； 使用时一般会用<code>LV_GC_ROOT()</code>宏去获取使用，比如： <code>LV_GC_ROOT(_lv_task_ll)</code>、<code>LV_GC_ROOT(_lv_disp_ll)</code>、<code>&amp;LV_GC_ROOT(_lv_indev_ll)</code>；</p><h3 id="显示时widget之间的关系-父子关系" tabindex="-1">显示时Widget之间的关系：父子关系 <a class="header-anchor" href="#显示时widget之间的关系-父子关系" aria-label="Permalink to &quot;显示时Widget之间的关系：父子关系&quot;">​</a></h3><p>todo：</p><h3 id="task任务" tabindex="-1">Task任务 <a class="header-anchor" href="#task任务" aria-label="Permalink to &quot;Task任务&quot;">​</a></h3><p>todo:</p><h2 id="lvgl启动流程" tabindex="-1">LVGL启动流程 <a class="header-anchor" href="#lvgl启动流程" aria-label="Permalink to &quot;LVGL启动流程&quot;">​</a></h2><p>基本上程序都会分为两个阶段：一个是正常正常前的初始化阶段，把个各模块做相应的初始化；第二个是正常运行阶段，各个模块相互协作，完成任务，完成事件流阶段</p><ul><li>初始化 <ul><li><code>lv_init()</code>核心初始化</li><li><code>hal_init()</code>硬件初始化，及硬件和LVGL UI关联上</li><li><code>lv_demo_widgets()</code>绘制自定义的UI</li></ul></li><li>正常运行、周期性调度Task阶段（死循环） <ul><li>LVGL UI变化（更新）显示到屏幕（硬件）</li><li>触摸事件（TP硬件）响应到LVGL UI系统，找到对应的Widget，调用相应的事件回调</li></ul></li></ul><h2 id="widgets的数据是如何显示到屏幕" tabindex="-1">Widgets的数据是如何显示到屏幕 <a class="header-anchor" href="#widgets的数据是如何显示到屏幕" aria-label="Permalink to &quot;Widgets的数据是如何显示到屏幕&quot;">​</a></h2><p><strong>前提：</strong></p><ol><li>屏幕刷新有对应UI task，周期性的执行：<code>_lv_disp_refr_task</code></li></ol><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UI 刷新task启动：</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.c main() --&gt; hal_init() --&gt; lv_disp_drv_register(&amp;disp_drv);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lv_hal_disp.c --&gt; lv_disp_drv_register函数中</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">disp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refr_task </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lv_task_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);</span></span></code></pre></div><ol start="2"><li>UI的刷新不是每次全部刷新，而是只刷新更新数据的区域</li></ol><p><strong>流程：</strong></p><ol><li>Widget在设置数据的时候，会告诉<code>lv_disp_t</code>“显示屏”哪块区域需要重新绘制（标记）</li><li>当UI task开始执行时，<code>lv_disp_t</code>“显示屏”会调用driver驱动，去刷新对应的区域</li></ol><p><strong>流程详解：</strong></p><ul><li>无论是lv_lable_t的<code>lv_label_set_text(label, text)</code>，还是lv_img_t的<code>lv_img_set_src(img, src_img);</code>；都会去调用<code>lv_obj_invalidate(obj);</code>，标记需要重新绘制</li><li>“区域”会保存到<code>lv_disp_t</code>的<code>inv_areas</code>数组字段中，<code>inv_p</code>会记录个数，也就是数组长度；</li><li>当UI的task开始执行里， <ul><li>调用<code>_lv_disp_refr_task</code> UI刷新task <ul><li>调用<code>lv_refr_vdb_flush</code> 把内容刷新到UI上 <ul><li>调用driver去刷新屏幕：<code>disp-&gt;driver.flush_cb(&amp;disp-&gt;driver, &amp;vdb-&gt;area, vdb-&gt;buf_act);</code></li></ul></li></ul></li></ul></li></ul><p>下面是结构体<code>lv_disp_t</code>，保留了关键字段：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _disp_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_disp_drv_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /**&lt; Driver to the display*/</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** Invalidated (marked to redraw) areas*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_area_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> inv_areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[LV_INV_BUF_SIZE];</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   inv_area_joined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[LV_INV_BUF_SIZE];</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inv_p : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_disp_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>这个<code>driver.flush_cb()</code>看着是不是有几分眼熟？对，就是main.c中初始化hal层<code>hal_init()</code>，设置的<code>disp_drv.flush_cb = xxx_flush;</code>。LVGL也不知道内容显示到哪里去，所以暴露了出来</p></blockquote><p>这里只是简单的概括下流程，实际情况会复杂些，包括显示的数据内容，以及多个相交的区域处理。以及有的控件重绘，会导致其它的区域也需要重绘</p><h2 id="屏幕点击事件-是如何传递到对应空间的事件回调中" tabindex="-1">屏幕点击事件，是如何传递到对应空间的事件回调中 <a class="header-anchor" href="#屏幕点击事件-是如何传递到对应空间的事件回调中" aria-label="Permalink to &quot;屏幕点击事件，是如何传递到对应空间的事件回调中&quot;">​</a></h2><p>我点击了屏幕TP，如何传递并调用我设置的回调函数<code>lv_obj_set_event_cb(obj, event_cb);</code></p><p><strong>前提：</strong></p><ol><li>对应有一个task任务在不停的获取点击屏幕的坐标</li></ol><p><strong>流程：</strong></p><ol><li>读取点击到的坐标x、y，以及状态state(press/release)</li><li>在press按压的时候搜索对应的Widget，递归查找 <ul><li>三层上搜索：sys layer &gt; top layer &gt; scr_act layer</li><li>Widgets之间的关系：子父关系。root根是屏幕，一个屏幕可以对应一个或多个子widgets</li></ul></li><li>按不同的情况触发不同的事件：<code>lv_event_send(indev_obj_act, LV_EVENT_XXX, NULL);</code></li><li>内部会调用到创建Widget时设置的回调函数</li></ol><p><strong>代码跟踪流程：</strong></p><ul><li>_lv_indev_read_task <ul><li>_lv_indev_read <ul><li>indev-&gt;driver.read_cb(&amp;indev-&gt;driver, data); // mouse_read 读取点击的x、y，以及是state(press/release)</li></ul></li><li>indev_button_proc <ul><li>indev_proc_press <ul><li>lv_indev_search_obj:lv_disp_get_layer_sys &gt; lv_disp_get_layer_top &gt; lv_disp_get_scr_act <ul><li>递归遍历,找到对应的obj</li></ul></li><li>lv_event_send(indev_obj_act, LV_EVENT_XXX, NULL); <ul><li>lv_event_send_func(obj-&gt;event_cb, obj, event, data); <ul><li>if(event_xcb) event_xcb(obj, event); // 调用你最开始设置的回调</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="不同控件之间有什么关系-为什么返回的都是lv-obj-t" tabindex="-1">不同控件之间有什么关系？为什么返回的都是lv_obj_t <a class="header-anchor" href="#不同控件之间有什么关系-为什么返回的都是lv-obj-t" aria-label="Permalink to &quot;不同控件之间有什么关系？为什么返回的都是lv_obj_t&quot;">​</a></h2><p><code>lv_obj_t</code>通过一个<code>void*</code>拓展成不同的Widget，<code>lv_obj_t</code>定义共有/通用的部分，每个特别的Widget定义自己独特的部分，命名为<code>lv_xxx_ext_t</code>，比如<code>lv_label_ext_t</code>，<code>lv_img_ext_t</code>...</p><p><strong>lv_obj_t：</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _lv_obj_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ext_attr;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指向</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_obj_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>lv_label_ext_t：</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tmp_ptr;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[LV_LABEL_DOT_NUM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } dot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dot_end;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anim_speed;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_point_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_draw_label_hint_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hint;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sel_start;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sel_end;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_label_long_mode_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> long_mode : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static_txt : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> align : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> recolor : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expand : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dot_tmp_alloc : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_label_ext_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>lv_img_ext_t：</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_point_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  offset;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_coord_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  w;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_coord_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  h;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    angle;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_point_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pivot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    zoom;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     src_type : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     auto_size : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     cf : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     antialias : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_img_ext_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>v8.0版本更改：</strong></p><p><code>lv_label_t</code>嵌套<code>lv_obj_t</code>，嵌套结构体更加符合面向对象语言中的<strong>继承关系</strong>，父类有的子类会继承过来；改成嵌套结构体，可能还有一个原因：早前版本的<code>lv_xxx_create</code>至少会有两次malloc申请内存，一次malloc <code>lv_obj_t</code>，一次malloc <code>lv_xxx_ext_t</code>。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_obj_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tmp_ptr;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  tmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[LV_LABEL_DOT_NUM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } dot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dot_end;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_draw_label_hint_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hint;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sel_start;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sel_end;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_point_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           offset;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    lv_label_long_mode_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> long_mode : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              static_txt : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              recolor : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              expand : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dot_tmp_alloc : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lv_label_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="图片解码、缓存流程-显示" tabindex="-1">图片解码、缓存流程，显示 <a class="header-anchor" href="#图片解码、缓存流程-显示" aria-label="Permalink to &quot;图片解码、缓存流程，显示&quot;">​</a></h2><ol><li>设置数据阶段：</li></ol><ul><li>lv_img_set_src <ul><li>lv_img_decoder_get_info</li><li>标记这块区域要刷新</li></ul></li></ul><ol start="2"><li>刷新绘制阶段：</li></ol><ul><li>_lv_disp_refr_task <ul><li>lv_refr_areas <ul><li>lv_refr_area <ul><li>lv_refr_area_part <ul><li>lv_refr_obj <ul><li>obj-&gt;design_cb(obj, &amp;obj_ext_mask, LV_DESIGN_DRAW_MAIN);// 调用widget自己的绘制函数</li></ul></li><li>lv_refr_obj_and_children</li></ul></li></ul></li></ul></li></ul></li></ul><ol start="3"><li>调用widget自己的design函数：lv_xxx_design</li></ol><ul><li>lv_img_design <ul><li>lv_draw_img <ul><li>lv_img_draw_core <ul><li>_lv_img_cache_open 缓存 list(20)img <ul><li>lv_img_decoder_open <ul><li>_LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) // 尝试使用不同的解码器去解码：png/jpeg <ul><li>info / open</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="坑" tabindex="-1">坑 <a class="header-anchor" href="#坑" aria-label="Permalink to &quot;坑&quot;">​</a></h2><h3 id="内存lv-mem-c" tabindex="-1">内存lv_mem.c <a class="header-anchor" href="#内存lv-mem-c" aria-label="Permalink to &quot;内存lv_mem.c&quot;">​</a></h3><p>lvgl分配内存函数<code>void * lv_mem_alloc(size_t size);</code>，如果你使用的内存超出了你分配的内存，不会有段错误，然后会导致整个内存分配系统不可用</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lv_mem_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello lvgl !!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, buffer, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer));</span></span></code></pre></div>',66)];const p=s(t,[["render",function(s,l,n,t,p,k){return a(),i("div",null,h)}]]);export{n as __pageData,p as default};
