import{_ as a,c as l,o as e,a4 as i}from"./chunks/framework.s8d9Ue88.js";const r=JSON.parse('{"title":"【Personal】阅读源码的技巧","description":"","frontmatter":{"title":"【Personal】阅读源码的技巧","categories":"Personal","tags":["Personal"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2021-08-22T15:58:11.000Z"},"headers":[],"relativePath":"posts/2021/08_22_阅读源码的技巧.md","filePath":"posts/2021/08_22_阅读源码的技巧.md","lastUpdated":1713284123000}'),t={name:"posts/2021/08_22_阅读源码的技巧.md"},o=[i('<h1 id="阅读源码的技巧" tabindex="-1">阅读源码的技巧 <a class="header-anchor" href="#阅读源码的技巧" aria-label="Permalink to &quot;阅读源码的技巧&quot;">​</a></h1><h2 id="阅读源码的技巧-1" tabindex="-1">阅读源码的技巧: <a class="header-anchor" href="#阅读源码的技巧-1" aria-label="Permalink to &quot;阅读源码的技巧:&quot;">​</a></h2><ul><li>前提：熟悉它的作用和功能</li><li>有目的的看代码</li><li>从代码的流程看</li><li>从代码的架构看</li><li>从代码的分类看</li><li>调试Debug分析</li><li>找核心代码（<strong>删代码</strong>）</li><li>辅助工具：画图</li></ul><p>todo：</p><h2 id="前提-熟悉它的作用和功能" tabindex="-1">前提：熟悉它的作用和功能 <a class="header-anchor" href="#前提-熟悉它的作用和功能" aria-label="Permalink to &quot;前提：熟悉它的作用和功能&quot;">​</a></h2><p>你不能说，对这个框架、库、工具功能都不熟悉，就去看它的源码，这就有点扯</p><h2 id="有目的的看代码" tabindex="-1">有目的的看代码 <a class="header-anchor" href="#有目的的看代码" aria-label="Permalink to &quot;有目的的看代码&quot;">​</a></h2><ul><li>架构是如何设计的</li><li>某个功能是如何实现的</li><li>...</li></ul><h2 id="从代码的架构看" tabindex="-1">从代码的架构看 <a class="header-anchor" href="#从代码的架构看" aria-label="Permalink to &quot;从代码的架构看&quot;">​</a></h2><h2 id="从代码的流程看" tabindex="-1">从代码的流程看 <a class="header-anchor" href="#从代码的流程看" aria-label="Permalink to &quot;从代码的流程看&quot;">​</a></h2><p>一般程序的三阶段：</p><ol><li>初始化</li><li>正常运行（工作中）</li><li>关闭（正常关闭）</li></ol><h2 id="从代码的分类看" tabindex="-1">从代码的分类看 <a class="header-anchor" href="#从代码的分类看" aria-label="Permalink to &quot;从代码的分类看&quot;">​</a></h2><ul><li>流程型</li><li>处理型</li></ul><p>这两个名字是我自己起的：</p><h3 id="流程型" tabindex="-1">流程型： <a class="header-anchor" href="#流程型" aria-label="Permalink to &quot;流程型：&quot;">​</a></h3><p>类似处理流程一样，按流程第1步，第2步，第3步...</p><h3 id="处理型" tabindex="-1">处理型： <a class="header-anchor" href="#处理型" aria-label="Permalink to &quot;处理型：&quot;">​</a></h3><p>这种代码可以看上去一大坨代码，实际核心的代码就一两行，其它的代码都是为这一两行代码做铺垫</p><h2 id="调试debug分析" tabindex="-1">调试Debug分析 <a class="header-anchor" href="#调试debug分析" aria-label="Permalink to &quot;调试Debug分析&quot;">​</a></h2><p>这个不用说了，对于跟踪代码流程，和实现细节都很有帮助，懂的都懂</p><h2 id="找核心代码-删代码" tabindex="-1">找核心代码（<strong>删代码</strong>） <a class="header-anchor" href="#找核心代码-删代码" aria-label="Permalink to &quot;找核心代码（**删代码**）&quot;">​</a></h2><p>代码写多了，看多了，会发现一个问题：好的代码都差不多，不好的代码千奇百怪</p><p>从单个函数看，一般代码分为三部分：</p><ol><li>条件不满足</li><li>数据准备阶段</li><li>核心处理函数调用</li></ol><h2 id="利用辅助工具-画图、笔记" tabindex="-1">利用辅助工具：画图、笔记 <a class="header-anchor" href="#利用辅助工具-画图、笔记" aria-label="Permalink to &quot;利用辅助工具：画图、笔记&quot;">​</a></h2><ul><li>脑子不够用了才发明了文字，图画</li><li>画图本身也是在理思路的一个过程，内化的过程</li></ul>',27)];const h=a(t,[["render",function(a,i,r,t,h,s){return e(),l("div",null,o)}]]);export{r as __pageData,h as default};
