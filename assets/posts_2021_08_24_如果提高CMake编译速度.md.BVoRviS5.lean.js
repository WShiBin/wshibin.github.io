import{_ as a,c as s,a2 as e,o as i}from"./chunks/framework.DRc6tsBz.js";const t=JSON.parse('{"title":"【CMake】如果提高CMake编译速度","description":"","frontmatter":{"title":"【CMake】如果提高CMake编译速度","categories":"Complie","tags":["CMake","Complie"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2021-08-24T23:21:30.000Z"},"headers":[],"relativePath":"posts/2021/08_24_如果提高CMake编译速度.md","filePath":"posts/2021/08_24_如果提高CMake编译速度.md","lastUpdated":1713284123000}');const h=a({name:"posts/2021/08_24_如果提高CMake编译速度.md"},[["render",function(a,t,h,r,n,l){return i(),s("div",null,t[0]||(t[0]=[e('<h1 id="如果提高cmake编译速度" tabindex="-1">如果提高CMake编译速度 <a class="header-anchor" href="#如果提高cmake编译速度" aria-label="Permalink to &quot;如果提高CMake编译速度&quot;">​</a></h1><blockquote><p>上个月在写rust的时候，有几个依赖有点大，编译速度感人，其实rust的编译速度一直就被人诟病，当然，有些是rust自身的问题，比如编译期的检查，泛型，RAII，宏；然后去网上找了些资料，搜索到一篇很有价值的文章：<a href="https://endler.dev/2020/rust-compile-times/" target="_blank" rel="noreferrer">Tips for Faster Rust Compile Times</a>，里面提到了些很有意思的点：泛型会影响到编译速度，因为在编译的时候，使用泛型的代码会去生成新的代码，包括你写的代码，以及源代码；还有使用编译缓存工具Sccache；更换更快的链接器。</p></blockquote><p>公司有套CMake项目的代码，往后项目也会越来越大，节省编译的时候将会变得很有意义。有时候如何去优化一个问题，需要你对整个流程有足够的了解，知道他有哪些阶段，不同的阶段会干什么。才能对不同的环节进行优化</p><h2 id="列表" tabindex="-1">列表： <a class="header-anchor" href="#列表" aria-label="Permalink to &quot;列表：&quot;">​</a></h2><ol><li>并行编译</li><li>更换更快的构建系统，比如Ninja</li><li>预编译头文件：target_precompile_headers （CMake3.16）</li><li>使用编译缓存ccache、sccache（CMake 3.4）</li><li>更新新版本的CMake、编译器和链接器</li><li>删除没有使用的代码和依赖</li></ol><h2 id="并行编译" tabindex="-1">并行编译 <a class="header-anchor" href="#并行编译" aria-label="Permalink to &quot;并行编译&quot;">​</a></h2><p>开多线程，废话</p><h2 id="更换更快的构建系统-比如ninja" tabindex="-1">更换更快的构建系统，比如<a href="https://ninja-build.org/" target="_blank" rel="noreferrer">Ninja</a> <a class="header-anchor" href="#更换更快的构建系统-比如ninja" aria-label="Permalink to &quot;更换更快的构建系统，比如[Ninja](https://ninja-build.org/)&quot;">​</a></h2><p>Android源码也是使用这个来编译</p><p>Ninja Design goals：<a href="https://ninja-build.org/manual.html#_design_goals" target="_blank" rel="noreferrer">https://ninja-build.org/manual.html#_design_goals</a></p><h2 id="预编译头文件-target-precompile-headers" tabindex="-1">预编译头文件：target_precompile_headers <a class="header-anchor" href="#预编译头文件-target-precompile-headers" aria-label="Permalink to &quot;预编译头文件：target_precompile_headers&quot;">​</a></h2><p>文章：<a href="https://github.com/sakra/cotire" target="_blank" rel="noreferrer">https://github.com/sakra/cotire</a></p><h2 id="使用编译缓存ccache、sccache" tabindex="-1">使用编译缓存<a href="https://ccache.dev/" target="_blank" rel="noreferrer">ccache</a>、<a href="https://github.com/mozilla/sccache" target="_blank" rel="noreferrer">sccache</a> <a class="header-anchor" href="#使用编译缓存ccache、sccache" aria-label="Permalink to &quot;使用编译缓存[ccache](https://ccache.dev/)、[sccache](https://github.com/mozilla/sccache)&quot;">​</a></h2><h3 id="ccache" tabindex="-1"><a href="https://ccache.dev/" target="_blank" rel="noreferrer">ccache</a>： <a class="header-anchor" href="#ccache" aria-label="Permalink to &quot;[ccache](https://ccache.dev/)：&quot;">​</a></h3><p>使用cmake配置：<a href="https://crascit.com/2016/04/09/using-ccache-with-cmake/" target="_blank" rel="noreferrer">https://crascit.com/2016/04/09/using-ccache-with-cmake/</a></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.12)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">find_program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CCACHE_PROGRAM ccache)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CCACHE_PROGRAM)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLOBAL PROPERTY </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RULE_LAUNCH_COMPILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${CCACHE_PROGRAM}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SomeProject)</span></span></code></pre></div><h3 id="sccache" tabindex="-1"><a href="https://github.com/mozilla/sccache" target="_blank" rel="noreferrer">sccache</a>： <a class="header-anchor" href="#sccache" aria-label="Permalink to &quot;[sccache](https://github.com/mozilla/sccache)：&quot;">​</a></h3><p><strong>cmake配置：</strong></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCMAKE_C_COMPILER_LAUNCHER=sccache</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCMAKE_CXX_COMPILER_LAUNCHER=sccache</span></span></code></pre></div><p><strong>rust配置：</strong></p><p>自己写rust是用的这个，编译速度会快上不少</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $HOME/.cargo/config</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[build]</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rustc-wrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/sccache&quot;</span></span></code></pre></div><h2 id="更新新版本的cmake、编译器和链接器" tabindex="-1">更新新版本的CMake、编译器和链接器 <a class="header-anchor" href="#更新新版本的cmake、编译器和链接器" aria-label="Permalink to &quot;更新新版本的CMake、编译器和链接器&quot;">​</a></h2><p>新版本cmake编译速度提升：<a href="https://blog.kitware.com/improving-cmakes-runtime-performance/" target="_blank" rel="noreferrer">https://blog.kitware.com/improving-cmakes-runtime-performance/</a></p><p>速度更快的链接器mold：<a href="https://github.com/rui314/mold" target="_blank" rel="noreferrer">https://github.com/rui314/mold</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mold</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">make-options-if-an</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="删除没有使用的代码和依赖" tabindex="-1">删除没有使用的代码和依赖 <a class="header-anchor" href="#删除没有使用的代码和依赖" aria-label="Permalink to &quot;删除没有使用的代码和依赖&quot;">​</a></h2><p>todo</p>',28)]))}]]);export{t as __pageData,h as default};
