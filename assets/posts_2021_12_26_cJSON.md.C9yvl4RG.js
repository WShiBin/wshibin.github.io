import{_ as e,c as a,o as s,a4 as i}from"./chunks/framework.s8d9Ue88.js";const l=JSON.parse('{"title":"【C】cJSON源码 使用建议及吐嘈","description":"","frontmatter":{"title":"【C】cJSON源码 使用建议及吐嘈","categories":"C","tags":["cJSON","C"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2021-12-26T17:07:17.000Z"},"headers":[],"relativePath":"posts/2021/12_26_cJSON.md","filePath":"posts/2021/12_26_cJSON.md","lastUpdated":1713886889000}'),t={name:"posts/2021/12_26_cJSON.md"},n=[i('<h1 id="cjson源码-使用建议及吐嘈" tabindex="-1">cJSON源码 使用建议及吐嘈 <a class="header-anchor" href="#cjson源码-使用建议及吐嘈" aria-label="Permalink to &quot;cJSON源码 使用建议及吐嘈&quot;">​</a></h1><p>**cJSON repo：**<a href="https://github.com/DaveGamble/cJSON" target="_blank" rel="noreferrer">https://github.com/DaveGamble/cJSON</a></p><blockquote><p>上周在移植cJSON代码的时候遇到了点问题，就顺道跟踪了他的代码，写个文章记录下</p></blockquote><h1 id="native-json-benchmark" tabindex="-1">Native JSON Benchmark <a class="header-anchor" href="#native-json-benchmark" aria-label="Permalink to &quot;Native JSON Benchmark&quot;">​</a></h1><p><a href="https://github.com/miloyip/nativejson-benchmark" target="_blank" rel="noreferrer">https://github.com/miloyip/nativejson-benchmark</a></p><img src="/assets/Xnip2021-12-28_23-28-44.eIcwFkry.webp" style="zoom:50%;"><h2 id="为什么用cjson" tabindex="-1">为什么用cJSON？ <a class="header-anchor" href="#为什么用cjson" aria-label="Permalink to &quot;为什么用cJSON？&quot;">​</a></h2><p>从Benchmark上看，cJSON性能上只能算是非常一般的存在；通常选择一个库的理由维度有很多，比如：</p><ul><li>简单，容易上手</li><li>方便移植</li><li>代码量少</li><li>开发人员已经很熟悉</li><li>是否经过大项目的检验（比如github上有些库会写，哪些产品引用了我这个库）</li></ul><h2 id="作者写cjson的初衷" tabindex="-1"><a href="https://github.com/DaveGamble/cJSON#welcome-to-cjson" target="_blank" rel="noreferrer">作者写cJSON的初衷</a>： <a class="header-anchor" href="#作者写cjson的初衷" aria-label="Permalink to &quot;[作者写cJSON的初衷](https://github.com/DaveGamble/cJSON#welcome-to-cjson)：&quot;">​</a></h2><blockquote><p>I lifted some JSON from this page: <a href="http://www.json.org/fatfree.html" target="_blank" rel="noreferrer">http://www.json.org/fatfree.html</a> That page inspired me to write cJSON, which is a parser that tries to share the same philosophy as JSON itself. <strong>Simple, dumb, out of the way</strong>.</p></blockquote><h1 id="如何去实现一个json解析库" tabindex="-1">如何去实现一个JSON解析库？ <a class="header-anchor" href="#如何去实现一个json解析库" aria-label="Permalink to &quot;如何去实现一个JSON解析库？&quot;">​</a></h1><p>拆分成两个问题：</p><ul><li>json 怎么解析？</li><li>json 解析后怎么存储？</li></ul><h2 id="json-怎么解析" tabindex="-1">json 怎么解析？ <a class="header-anchor" href="#json-怎么解析" aria-label="Permalink to &quot;json 怎么解析？&quot;">​</a></h2><p>字符串匹配 + 迭代递归</p><ul><li>字符串匹配 <ul><li>遇到<code>{</code>，就当一个json对象类型去解析</li><li>遇到<code>[</code>，就当一个json数组类型去解析</li><li>遇到<code>:</code>，就当一个json键值对去解析</li><li>遇到值是一个数字开头，就当一个json数字类型去解析</li><li>遇到值是一个<code>&quot;</code>开头，就当一个json字符串类型去解析</li><li>etc</li></ul></li><li>迭代递归：继续上面的步骤直到解析完整个json字符串</li></ul><p>当然校验json字符串的合法性也是必需的</p><h2 id="json-解析后怎么存储" tabindex="-1">json 解析后怎么存储？ <a class="header-anchor" href="#json-解析后怎么存储" aria-label="Permalink to &quot;json 解析后怎么存储？&quot;">​</a></h2><p>cjson的答案是：用一个数据结构去描述json的结构，用结构体cJSON去描述json中键值对（key：value）；其它（语言的）通用json解析库也是类似的思路，用嵌套的结构体去描述json的结构；原因也很简单，json本来就是源自JavaScript中的Class对象，本身就是JavaScript中的<code>Class</code>或`Struct``</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* The cJSON structure: */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cJSON</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cJSON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cJSON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prev;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cJSON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">valuestring;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valueint;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valuedouble;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} cJSON;</span></span></code></pre></div><ul><li>next、prev和child是用来维护数据结构</li><li>其它的用来存放json数据： <ul><li>type用来存放json数据类型，比如<code>cJSON_Object</code>、<code>cJSON_Array</code>、<code>cJSON_String</code>、<code>cJSON_Number</code>等</li><li>json的key用字段string用来存储</li><li>json的value用字段value开头的成员来存储，比如： <ul><li>valuestring是来存放类型是String的值，</li><li>valueint和valuedouble用来存放类型是Number的值</li></ul></li></ul></li></ul><p>那json其它类型Boolean和Null数据存放在哪里呢？答案是放在type里面（<code>cJSON_False</code>，<code>cJSON_True</code>，<code>cJSON_NULL</code>），估计是为了省内存，没必要为这些json数据类型去增加字段去表示</p><p>json解析后数据结构图解：</p><p><img src="/assets/Xnip2021-12-29_00-14-15.qlqNfyok.webp" alt="" loading="lazy"></p><h1 id="cjson源码" tabindex="-1">cJSON源码： <a class="header-anchor" href="#cjson源码" aria-label="Permalink to &quot;cJSON源码：&quot;">​</a></h1><p>一个框架库里面有一些是核心的函数，其它的是些辅助或是拓展函数；</p><h2 id="核心函数围绕三个主题" tabindex="-1">核心函数围绕三个主题： <a class="header-anchor" href="#核心函数围绕三个主题" aria-label="Permalink to &quot;核心函数围绕三个主题：&quot;">​</a></h2><ul><li>解析：<code>cJSON_Parse</code>内部递归调用<code>parse_value</code>去解析</li><li>CRUD节点：这部分没有必要多讲<code>cJSON_CreateXXX</code> <code>cJSON_AddXXX</code> <code>cJSON_DetachXXX</code> <code>cJSON_DeleteXXX</code> <code>cJSON_ReplaceXXX</code></li><li>转成字符串：<code>cJSON_Print</code>内部递归调用<code>print_value</code>去转成字符串；转成字符串中，需要有个buffer来存放字符串，当buffer不够的时候就会增长策略的问题，大约是<code>*2</code>，（函数<code>ensure</code>中<code>newsize = needed * 2;</code>)</li></ul><h2 id="其它" tabindex="-1">其它： <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它：&quot;">​</a></h2><ul><li>上面提到了使用递归，库会对嵌套的层级会有限制<code>#define CJSON_NESTING_LIMIT 1000</code></li><li>对外暴露内存申请了释放的函数：通过<code>cJSON_InitHooks</code>函数</li></ul><h1 id="cjson使用建议" tabindex="-1">cJSON使用建议： <a class="header-anchor" href="#cjson使用建议" aria-label="Permalink to &quot;cJSON使用建议：&quot;">​</a></h1><ul><li>删除cJSON结构体中的valueint字段（历史原因保留），int和double数据已经存放在valuedouble上面了</li><li>复用json中的key字符串，避免为key字符串malloc空间。使用cJSON_AddItemToObjectCS</li><li>cJSON_GetObjectItem和cJSON_GetObjectItemCaseSensitive之间，尽可能用cJSON_GetObjectItemCaseSensitive，cJSON_GetObjectItem内部会在查找key时对其进制toupper转换</li><li>复用json中的value字符串，使用cJSON_CreateStringReference</li><li>对于比较长的比较大的json，在转换成json字符串时，建议使用cJSON_PrintBuffered（指定长度）替代cJSON_Print和cJSON_PrintUnformatted，cJSON_Print和cJSON_PrintUnformatted会先分配一个256的buffer，如果不够会从新malloc和拷贝，字符串buffer增长策略基本等于<code>*2</code></li></ul><h1 id="cjson吐嘈" tabindex="-1">cJSON吐嘈： <a class="header-anchor" href="#cjson吐嘈" aria-label="Permalink to &quot;cJSON吐嘈：&quot;">​</a></h1><p><strong>有几个API接口名字不太喜欢</strong></p><ul><li>cJSON_GetArraySize：看上去是获取json数组的大小，其实还能获取json对象的大小</li><li>cJSON_Print：如果有print之类的，可能会想到的是printf，打印到标准输出；cJSON_ToString之类的是否更加合适</li></ul>',36)];const o=e(t,[["render",function(e,i,l,t,o,c){return s(),a("div",null,n)}]]);export{l as __pageData,o as default};
