import{_ as e,c as a,a2 as t,o}from"./chunks/framework.DRc6tsBz.js";const s=JSON.parse('{"title":"【Protocol】协议设计小记","description":"","frontmatter":{"title":"【Protocol】协议设计小记","categories":"Protocol","tags":["Protocol"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2022-01-05T21:17:37.000Z"},"headers":[],"relativePath":"posts/2022/01_05_Protocol.md","filePath":"posts/2022/01_05_Protocol.md","lastUpdated":1713886889000}');const r=e({name:"posts/2022/01_05_Protocol.md"},[["render",function(e,s,r,l,i,h){return o(),a("div",null,s[0]||(s[0]=[t('<h1 id="协议设计小记" tabindex="-1">协议设计小记 <a class="header-anchor" href="#协议设计小记" aria-label="Permalink to &quot;协议设计小记&quot;">​</a></h1><blockquote><p>前天周二晚上做代码review时候，代码里面有部分在处理接收协议数据包的代码，对协议的处理代码基本全部揉在一起了；可能是项目在开始的时候没有考虑周全，又或者在项目开发过程中因为需求的变更，改的面目全非。当时就在想这个地方有点不太对，应该要做拆分，但没想好怎么拆；回家之后总结了几个常见的协议，总结下，或者这应该就是和协议设计有关，<strong>协议应该设计得让程序容易去分层，分模块。</strong></p></blockquote><p><strong>那协议的设计是否应该让程序更加的容易去分层，分模块？</strong></p><h1 id="举例常见协议" tabindex="-1">举例常见协议： <a class="header-anchor" href="#举例常见协议" aria-label="Permalink to &quot;举例常见协议：&quot;">​</a></h1><ul><li>TCP/IP协议栈</li><li>HTTP协议</li><li>MQTT协议</li><li>DBus协议</li></ul><h1 id="tcp-ip协议栈" tabindex="-1">TCP/IP协议栈： <a class="header-anchor" href="#tcp-ip协议栈" aria-label="Permalink to &quot;TCP/IP协议栈：&quot;">​</a></h1><img src="/assets/image-20220105213240854.18FkpXTR.webp" style="zoom:70%;"><h1 id="http协议" tabindex="-1">HTTP协议： <a class="header-anchor" href="#http协议" aria-label="Permalink to &quot;HTTP协议：&quot;">​</a></h1><img src="/assets/image-20220105220038745.CRMRiE6Y.webp" style="zoom:65%;"><h1 id="mqtt协议" tabindex="-1">MQTT协议： <a class="header-anchor" href="#mqtt协议" aria-label="Permalink to &quot;MQTT协议：&quot;">​</a></h1><img src="/assets/image-20220105220502627.DxcrZeSt.webp" style="zoom:50%;"><h1 id="dbus协议" tabindex="-1">DBus协议: <a class="header-anchor" href="#dbus协议" aria-label="Permalink to &quot;DBus协议:&quot;">​</a></h1><img src="/assets/image-20220105221750042.DjL6oovD.webp" style="zoom:50%;"><p>DBus参考资料：</p><ul><li>Message Protocol：<a href="https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol" target="_blank" rel="noreferrer">https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol</a></li><li>dbus-protocol.h：<a href="https://github.com/brianmcgillion/DBus/blob/master/dbus/dbus-protocol.h" target="_blank" rel="noreferrer">https://github.com/brianmcgillion/DBus/blob/master/dbus/dbus-protocol.h</a></li></ul><h1 id="上面协议特点" tabindex="-1">上面协议特点： <a class="header-anchor" href="#上面协议特点" aria-label="Permalink to &quot;上面协议特点：&quot;">​</a></h1><ul><li>TCP/IP协议栈属于<strong>流程处理协议</strong>，自己处理下然后交给下一个流程去处理；其它的属于<strong>终端协议</strong>，接收到的进程就是最终处理的进程。</li><li>前面三个走网络，dbus走unix socket</li><li>从这几个协议上看基本分为两部分：header + body，header属于协议数据包的概要信息，body里面放数据参数</li></ul><h1 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h1><ul><li>对于TCP/IP协议栈：每个模块只需要处理和关心属于自己部分的数据，然后交由下一阶段的去处理</li><li>对于web server来说：可以通过协议里面的method和path去路由转发到对应的模块及函数去处理</li><li>对于MQTT协议：可以通过message type来转发</li><li>对于DBus协议：header里面包含了address；dbus-daemon只需要解析header部分就可以实现转发；信息接收可以通过message type，object path，method一层层的来转发，分给对应的模块及函数处理</li></ul><p>在刚开发看dbus的时候，不是很理解dbus搞了那么概念：bus name, message type, object path, method，类似一个socket链接，有个地址不就行了吗？后来才明白dbus就是复杂应用场景，为模块化设计的，可以通过前面的概念一级一级来转发，直到最后一个确定的处理函数</p><h1 id="结论" tabindex="-1">结论： <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论：&quot;">​</a></h1><p>回到最开始的问题，答案似乎已经肯定了很多</p><p>但，我好像又有了另外的疑问，项目中一次性上报所有数据包合理吗？如果上报数据越来越多？越来越大呢？这个问题就会越来越明显</p>',23)]))}]]);export{s as __pageData,r as default};
