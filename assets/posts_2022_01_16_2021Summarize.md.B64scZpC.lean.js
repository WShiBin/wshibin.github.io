import{_ as l,c as i,a2 as a,o as e}from"./chunks/framework.DRc6tsBz.js";const r=JSON.parse('{"title":"【Personal】2021回顾","description":"","frontmatter":{"title":"【Personal】2021回顾","categories":"Summarize","tags":["Summarize"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2022-01-16T22:15:36.000Z"},"headers":[],"relativePath":"posts/2022/01_16_2021Summarize.md","filePath":"posts/2022/01_16_2021Summarize.md","lastUpdated":1713284123000}');const t=l({name:"posts/2022/01_16_2021Summarize.md"},[["render",function(l,r,t,o,n,u){return e(),i("div",null,r[0]||(r[0]=[a('<h1 id="_2021回顾" tabindex="-1">2021回顾 <a class="header-anchor" href="#_2021回顾" aria-label="Permalink to &quot;2021回顾&quot;">​</a></h1><blockquote><p>前些天看公众号、YouTube 上都是总结，然后跑去问几个好友写年度总结了没有；上周在公司给组员一人建了个任务，写总结；对于年轻人来说：思考自己远比思考别人重要的多。在回头翻翻去年的总结，发现有些还有没写完，anyway，毕竟赢在写了</p></blockquote><h1 id="_2021-回顾" tabindex="-1">2021 回顾 <a class="header-anchor" href="#_2021-回顾" aria-label="Permalink to &quot;2021 回顾&quot;">​</a></h1><ul><li>关于带人</li><li>关于组员离职</li><li>关于膝盖伤</li><li>公司内部培训</li><li>书单</li><li>关于 Rust</li><li>关于英语</li><li>关于源码</li><li>关于性格</li><li>程序员的焦虑</li><li>Linux 桌面系统</li></ul><h2 id="关于带人" tabindex="-1">关于带人 <a class="header-anchor" href="#关于带人" aria-label="Permalink to &quot;关于带人&quot;">​</a></h2><p><strong>犯下的错</strong>：当着上司批评下面的一位员工，也直接导致了他的离职，虽然表面上没有什么关系，但我觉得是有直接关系。 后面调整：有啥问题会拉到会议室先私聊，因为每个人接受能力不一样；</p><p><strong>你不能希望他们每一个人都和你一样</strong>：多年前一个前辈对我说这句话，至今受益匪浅；你带的人水平参差不齐，好些还是应届生。刚毕业，还要去哄，照顾他的情绪。后面调整：不同人根据当前能力有不同要求，有些会有最低要求</p><h2 id="组员离职" tabindex="-1">组员离职 <a class="header-anchor" href="#组员离职" aria-label="Permalink to &quot;组员离职&quot;">​</a></h2><p>这个怎么说呢？离职原因基本上就是钱给的少了，这个不用质疑；好在基本上出去的都比我工资高。那我为啥还在这里？我只能说：这个问题问的好！这个主题我想讨论的是另外一个点：</p><p><strong>老员工离职带来的隐性成本成本远比想象的要高：</strong></p><ul><li>要去熟悉新人的技术水平，哪些方面好，哪些方面缺失</li><li>要去熟悉新人的对待工作的态度，处理问题矛盾方式</li><li>要去熟悉新人的代码风格，遵守公司的规范，这个得一次次，一点点</li></ul><p>毕竟公司又不是头部大厂，优秀的人都往这里跑；小公司去招人，人才已经被人筛选过一次又一次了；能招几个合适的能做事的，难；这种刚做了一年多了，东西套路都熟悉起来了，可以产出能干活了，啪，走了</p><h2 id="关于膝盖伤" tabindex="-1">关于膝盖伤 <a class="header-anchor" href="#关于膝盖伤" aria-label="Permalink to &quot;关于膝盖伤&quot;">​</a></h2><p>之前写了一篇文章来<a href="https://wshibin.github.io/2021/07/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%9F%E7%97%85%E7%BB%8F%E5%8E%86%E5%A4%8D%E7%9B%98/" target="_blank" rel="noreferrer">复盘</a>；看病的过程也出现过自己的误判，终究结果是好的；但其中的过程会很难熬，有一阵子都快有点抑郁了，看病的医生都说不是个小病，但一直没好，还一次给一次重；时间拉的过长了，有点搞心态；我想说的是另外一个点： 人一般在遇到问题、挫折后，会有几种反应：</p><ul><li>质疑自己 --&gt; 怎么去解决问题</li><li>看待问题的角度会发生改变</li><li>会重新去思考做某些事的意义</li></ul><p>前者可以找个实例，比如程序员：有的新人在遇到 bug 的时候，或者又恰好有个同事轻松的解决了，这时候这个人可能就会诞生一个想法：我到底适不适合干这个。别问我为啥会知道 生病之后回老家休息了一个月，平时都是过年才回去，这次是正好赶上国庆，在家趟了一个月，有了新的角度重新认识了农村，回头另写一篇文章，先给自己挖个坑。 元旦的时候：和黄师傅他们一起聚会，当时黄师傅的观点是：坚决不去加班的公司，到点下班，选择躺平；我当时问他，你应该不是一开始就选择躺平的，这里应该有一个过程，然后有了最后的选择是躺平；最后他谈论到是因为生了一次病，导致他去重新思考意义在哪里，然后选择了躺平</p><h2 id="公司内部培训" tabindex="-1">公司内部培训 <a class="header-anchor" href="#公司内部培训" aria-label="Permalink to &quot;公司内部培训&quot;">​</a></h2><p>今年做了不少技术培训分享：</p><ul><li>Linux 基础及常用命令</li><li>C 语言、标准库及源码</li><li>GCC 编译器</li><li>LVGL 使用及源码</li><li>VSCode 使用</li><li>Markdown 使用</li><li>GoogleTest 使用</li><li>Docker 上手</li><li>DBus 使用</li><li>内部框架及代码规范</li><li>带读英文书：<a href="https://book.douban.com/subject/1787854/" target="_blank" rel="noreferrer">An Introduction to GCC</a></li><li>Vim 培训</li><li>...</li></ul><p>有个学习方法叫<a href="https://wiki.mbalib.com/wiki/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95" target="_blank" rel="noreferrer">费曼学习法</a>，核心是把你学的内容用你的语言表达出来；每次分享都会逼得我把知识梳理一遍，其实培训收益最大的是我；其次是他们；培训中间也会有其他的问题：</p><ul><li>有些人听完之后，没有去练习；布置点作业？</li><li>培训文档，有些人都不会看完一遍，就跑来问问题，感觉像个智障</li></ul><p>后面多点互动，多用他们常用的东西关联上，培训质量上提升，关注培训人员吸收效果</p><h2 id="书单" tabindex="-1">书单 <a class="header-anchor" href="#书单" aria-label="Permalink to &quot;书单&quot;">​</a></h2><ul><li>聊聊架构</li><li>SCAPP</li><li>Linux 环境编程</li><li>Ffmpeg 从入门到精通</li><li>An Introduction to GCC 英文版</li><li>Unix 传奇</li><li>创业维艰</li><li>权力的转移</li><li>原则</li></ul><p>有些只看了部分，还有公司发的书。</p><h2 id="关于-rust" tabindex="-1">关于 Rust <a class="header-anchor" href="#关于-rust" aria-label="Permalink to &quot;关于 Rust&quot;">​</a></h2><p>Rust 吸引我的地方：</p><ul><li>生产力强：能很快的构建一个产品原型来验证，有 Python 一样的生产力</li><li>安全：编译过了基本不会有内存问题，还有媲美 C/C++一样的性能</li><li>难：有句话叫“因为山在那里”，换种方式是：知识点多，其实是集合了编程语言的最佳实践，是语言发展到一定程度的产物</li><li>生态也在蓬勃发展：动不动重写个操作系统，重写个数据库，重写个 web 框架，重写个引擎之类的。会看到一些产品的原型，一点点发展起来，遇到什么问题，用什么方案</li></ul><p>在公司尝试用 rust 写了个小工具，实现原型很快；对 Rust 的掌握程度，稳中有升，明年继续</p><h2 id="关于英语" tabindex="-1">关于英语 <a class="header-anchor" href="#关于英语" aria-label="Permalink to &quot;关于英语&quot;">​</a></h2><p>今年没有怎么刻意去学习，积累：</p><ul><li>刷刷感兴趣的 YouTube</li><li>每天逛逛 Reddit，刷刷 github 点赞排行榜项目</li><li>看文档尽量看英文文档</li><li>遇到问题尽量用英文去 Google 搜索；</li></ul><p>遇到不认识的还是不认识，需要去查；今年的英文文档阅读量上到了一个新的台阶，也刷了几本英文技术书，明年明继续努力，预定要刷的几本英文书</p><h2 id="关于源码" tabindex="-1">关于源码 <a class="header-anchor" href="#关于源码" aria-label="Permalink to &quot;关于源码&quot;">​</a></h2><p>代码看多了，你会发现，好的代码大多都差不多，坏的代码千奇百怪， 人也是个输入、输出系统，如果你输入的都是些简单的示例 demo 代码，那你输出的大致也就是这些，也会有浮动的空间。所以给自己输入些优秀的代码很有必要。然后写了个总结：<a href="https://wshibin.github.io/2021/08/22/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E6%8A%80%E5%B7%A7/" target="_blank" rel="noreferrer">阅读源码的技巧 </a></p><h2 id="关于性格" tabindex="-1">关于性格 <a class="header-anchor" href="#关于性格" aria-label="Permalink to &quot;关于性格&quot;">​</a></h2><p>多年前我也经常健身，跑步，骑车，后来我看到了一个莽夫（身上有些肌肉，和别人杠起来就会动手的那种，做事也很暴力）；我突然在他身上看到了我的影子：性格被这些粗暴了运动影响了，后来运动就越来越少了。 当我跳出一个坑的时候，又会跳到另一个坑。由于长期受到 Bug 的影响，有问题都是直奔主题的，所以性格也被强化了。就成了直男，这点不太好</p><h2 id="程序员的焦虑" tabindex="-1">程序员的焦虑 <a class="header-anchor" href="#程序员的焦虑" aria-label="Permalink to &quot;程序员的焦虑&quot;">​</a></h2><p>突然就 30 了 新人适合做业务，有经验的适合做架构，做基础设施</p><h2 id="linux-桌面系统" tabindex="-1">Linux 桌面系统 <a class="header-anchor" href="#linux-桌面系统" aria-label="Permalink to &quot;Linux 桌面系统&quot;">​</a></h2><p>切换到 Linux 桌面系统失败</p><h1 id="_2022-继续" tabindex="-1">2022 继续 <a class="header-anchor" href="#_2022-继续" aria-label="Permalink to &quot;2022 继续&quot;">​</a></h1><ul><li>专利</li><li>培训、分享、输出</li><li>Rust</li><li>源码</li><li>书单</li></ul>',43)]))}]]);export{r as __pageData,t as default};
