import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.s8d9Ue88.js";const h=JSON.parse('{"title":"【Git】Git内部原理","description":"","frontmatter":{"title":"【Git】Git内部原理","categories":"Git","tags":["Git"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2022-06-16T22:46:26.000Z"},"headers":[],"relativePath":"posts/2022/06_16_Git-internal.md","filePath":"posts/2022/06_16_Git-internal.md","lastUpdated":1713886889000}'),e={name:"posts/2022/06_16_Git-internal.md"},n=[t('<h1 id="git内部原理" tabindex="-1">Git内部原理 <a class="header-anchor" href="#git内部原理" aria-label="Permalink to &quot;Git内部原理&quot;">​</a></h1><p>Git官网：<a href="https://git-scm.com/" target="_blank" rel="noreferrer">https://git-scm.com/</a></p><h2 id="git-how-it-works" tabindex="-1">Git：How it works? <a class="header-anchor" href="#git-how-it-works" aria-label="Permalink to &quot;Git：How it works?&quot;">​</a></h2><h3 id="版本控制系统vcs" tabindex="-1">版本控制系统VCS <a class="header-anchor" href="#版本控制系统vcs" aria-label="Permalink to &quot;版本控制系统VCS&quot;">​</a></h3><blockquote><p>Git is a <a href="https://git-scm.com/about/free-and-open-source" target="_blank" rel="noreferrer">free and open source</a> distributed <strong>version control system</strong> designed to handle everything from small to very large projects with speed and efficiency.</p></blockquote><p><strong>版本控制系统</strong>：是一种<strong>记录一个或若干文件内容变化</strong>，以便将来查阅特定版本修订情况的系统</p><img src="/assets/image-20220619223106119.D0yyEBrI.webp" style="zoom:50%;"><h3 id="存储系统" tabindex="-1">存储系统 <a class="header-anchor" href="#存储系统" aria-label="Permalink to &quot;存储系统&quot;">​</a></h3><p><strong>项目里的文件/目录怎么存？存在哪里？怎么去检索？</strong></p><p>以Git对象（文件内容对象、目录对象、提交对象）方式存储；本地存放在.<code>git</code>目录；通过<code>Hash Code</code>去检索</p><p>根本上来讲：Git 是一个内容寻址 (content-addressable)<strong>文件系统</strong>。可以理解成：Git一个<code>Key-Value</code>数据库</p><ul><li>Key：Hash Code，就是查看git日志里面的一串码（hash算法基于<code>内容</code>计算出来）</li><li>Value：Git对象（文件对象blob，目录对象tree，提交对象commit）</li></ul><h3 id="git项目目录" tabindex="-1">Git项目目录 <a class="header-anchor" href="#git项目目录" aria-label="Permalink to &quot;Git项目目录&quot;">​</a></h3><img src="/assets/image-20220619231000986.CI6h1wzs.webp" style="zoom:40%;"><h4 id="仓库-git目录介绍" tabindex="-1">仓库<code>.git</code>目录介绍 <a class="header-anchor" href="#仓库-git目录介绍" aria-label="Permalink to &quot;仓库`.git`目录介绍&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 输出:有省略部分内容</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.git</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 记录工作区的代码版本</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 项目配置</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> objects</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # Git对象存储目录(核心目录)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> refs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 引用：存放分支、远程分析、Tags</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heads</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 本地分支存放的目录</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remotes</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tags</span></span></code></pre></div><h2 id="推理" tabindex="-1">推理 <a class="header-anchor" href="#推理" aria-label="Permalink to &quot;推理&quot;">​</a></h2><img src="/assets/image-20220628234905676.0c9lOE2T.webp" style="zoom:50%;"><h2 id="底层命令和高层命令" tabindex="-1">底层命令和高层命令 <a class="header-anchor" href="#底层命令和高层命令" aria-label="Permalink to &quot;底层命令和高层命令&quot;">​</a></h2><p>Git最开始工具集（多个命令工具），后面整合改成了git的子命令</p><ul><li><strong>高层命令</strong>：简单的理解成，工作常用的这些命令：<code>init</code>、<code>clone</code>、<code>add</code>、<code>commit</code>、<code>push</code>、<code>pull</code>、<code>checkout</code>......</li><li><strong>底层命令</strong>：可以去操作Git的KV数据库，完成底层工作的命令：<code>cat-file</code>、<code>hash-object</code>、<code>write-tree</code>、<code>commit-tree</code></li></ul><h3 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h3><p>高层命令会去调用条底层命令；底层命令可以窥探 Git 内部的工作机制，通过底层命令帮助理解Git是如何运作的</p><h2 id="git-对象" tabindex="-1">Git 对象 <a class="header-anchor" href="#git-对象" aria-label="Permalink to &quot;Git 对象&quot;">​</a></h2><p>核心Git对象类型：</p><ul><li>文件内容对象<code>blob</code>：文件内容</li><li>目录对象<code>tree</code>：可包含文件或目录</li><li>提交对象<code>commit</code>：包含目录和其它信息（<code>git log</code>内容)</li></ul><h3 id="底层命令cat-file" tabindex="-1">底层命令<code>cat-file</code> <a class="header-anchor" href="#底层命令cat-file" aria-label="Permalink to &quot;底层命令`cat-file`&quot;">​</a></h3><p>用于查看Git对象：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${hash_code}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看Git对象的类型 type</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${hash_code}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看Git对象的内容 pretty-print</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${hash_code}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看Git对象的大小 size</span></span></code></pre></div><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><p>通过使用<strong>底层命令</strong>完成高层命令的工作流（<code>init</code>、<code>add</code>、<code>commit</code>、<code>log</code>），来理解Git内容原理</p><h3 id="项目准备git-init" tabindex="-1">项目准备<code>git init</code> <a class="header-anchor" href="#项目准备git-init" aria-label="Permalink to &quot;项目准备`git init`&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git_demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git_demo</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 创建项目目录</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                    # 创建.git目录</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/objects</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            # 创建Git数据库目录</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/refs/heads</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 创建本地分支目录</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/HEAD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                               # 创建Git工作区文件</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ref: refs/heads/master&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/HEAD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 指定当前工作区是指向master分支</span></span></code></pre></div><h3 id="git文件内容对象blob" tabindex="-1">Git文件内容对象Blob： <a class="header-anchor" href="#git文件内容对象blob" aria-label="Permalink to &quot;Git文件内容对象Blob：&quot;">​</a></h3><p>文件内容，在项目代码里面指代码内容；不包含文件名，文件名保存在Tree对象中</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash-object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${file_name}                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 计算文件内容的Hash Code</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash-object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${file_name}               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 计算文件内容的Hash Code，并写入Git对象存储目录</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello git&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash-object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 从标准输入 计算内容的Hash Code</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${hash_code}                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看Git对象的类型</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${hash_code}                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看Git对象的内容</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${hash_code}                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看Git对象的大小</span></span></code></pre></div><h3 id="git树对象tree" tabindex="-1">Git树对象Tree： <a class="header-anchor" href="#git树对象tree" aria-label="Permalink to &quot;Git树对象Tree：&quot;">​</a></h3><p>目录：包含Blob对象，以及Tree对象</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-index</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${file_name}           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将文件添加到暂存区</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write-tree</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                # 从暂存区创建树对象（root跟目录树对象）</span></span></code></pre></div><ul><li><code>read-tree</code> ：可以把树对象读入暂存区</li></ul><h3 id="git提交对象commit" tabindex="-1">Git提交对象Commit： <a class="header-anchor" href="#git提交对象commit" aria-label="Permalink to &quot;Git提交对象Commit：&quot;">​</a></h3><p>基本就是用<code>git log</code>可以看到的内容</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${tree_hash} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${commit_message}                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建提交对象；第一次提交</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${tree_hash} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${commit_message} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${parent_commit_hash}    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建提交对象；第二次提交</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ${commit_hash}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit_hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/heads/master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                     # 指定master分支指向的提交对象</span></span></code></pre></div><h2 id="git存储结构图" tabindex="-1">Git存储结构图 <a class="header-anchor" href="#git存储结构图" aria-label="Permalink to &quot;Git存储结构图&quot;">​</a></h2><img src="/assets/image-20220621000919872.BekLacbS.webp" style="zoom:50%;"><h3 id="对象存储" tabindex="-1">对象存储 <a class="header-anchor" href="#对象存储" aria-label="Permalink to &quot;对象存储&quot;">​</a></h3><p>Git 是如何存储其对象（blob对象、tree对象、commit对象）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># store = header + content</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">blob</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0000what</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> doc?</span></span></code></pre></div><ul><li>存储格式：<code>header + content</code>，比如：&quot;blob 16\\u0000what is up, doc?&quot; <ul><li><code>header</code>格式：比如文件<code>blob #{content.length}\\0</code></li></ul></li><li>对内容计算SHA1</li><li>用zlib压缩内容</li><li>用前面计算出来的SHA1，创建目录和文件</li><li>把内容写到文件中去</li></ul><h2 id="理解分支、tag是如何实现的" tabindex="-1">理解分支、Tag是如何实现的？ <a class="header-anchor" href="#理解分支、tag是如何实现的" aria-label="Permalink to &quot;理解分支、Tag是如何实现的？&quot;">​</a></h2><p>就是<code>.git</code>目录下的一个文件，文件名就是分支名，文件内容就是该分支的最后一个<code>Commit</code>对象；比如：<code>dev</code>分支文件<code>.git/heads/dev</code></p><h2 id="ref" tabindex="-1">Ref: <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;Ref:&quot;">​</a></h2><ul><li>Git Internals：<a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects" target="_blank" rel="noreferrer">https://git-scm.com/book/en/v2/Git-Internals-Git-Objects</a></li></ul>',53)];const l=s(e,[["render",function(s,t,h,e,l,k){return a(),i("div",null,n)}]]);export{h as __pageData,l as default};
