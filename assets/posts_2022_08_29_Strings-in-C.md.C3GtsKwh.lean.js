import{_ as s,c as i,a2 as a,o as n}from"./chunks/framework.DRc6tsBz.js";const t=JSON.parse('{"title":"【C】C语言中的字符串","description":"","frontmatter":{"title":"【C】C语言中的字符串","categories":"C","tags":["Strings","C"],"sidebar":false,"prev":false,"next":false,"comments":true,"date":"2022-08-29T21:43:54.000Z"},"headers":[],"relativePath":"posts/2022/08_29_Strings-in-C.md","filePath":"posts/2022/08_29_Strings-in-C.md","lastUpdated":1713886889000}');const l=s({name:"posts/2022/08_29_Strings-in-C.md"},[["render",function(s,t,l,e,h,p){return n(),i("div",null,t[0]||(t[0]=[a('<h1 id="c语言中的字符串" tabindex="-1">C语言中的字符串 <a class="header-anchor" href="#c语言中的字符串" aria-label="Permalink to &quot;C语言中的字符串&quot;">​</a></h1><blockquote><p>c语言的字符串，本质上是一个以<code>\\0</code>字符结尾的字符数组，使用起来操作想去繁琐，不少库都会对其进行封装。下面看一些比较有代表性的</p></blockquote><h2 id="典型库里面的字符串的封装" tabindex="-1">典型库里面的字符串的封装： <a class="header-anchor" href="#典型库里面的字符串的封装" aria-label="Permalink to &quot;典型库里面的字符串的封装：&quot;">​</a></h2><ul><li>Git里面的<code>strbuf</code></li><li>Dbus里面的字符串<code>DBusRealString</code></li><li>Glib中的<code>GString</code></li><li>nginx中的<code>ngx_str_t</code></li><li>Redis中的<code>sds</code></li></ul><h3 id="git里面的strbuf" tabindex="-1">Git里面的<code>strbuf</code> <a class="header-anchor" href="#git里面的strbuf" aria-label="Permalink to &quot;Git里面的`strbuf`&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strbuf {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alloc;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  buf;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="dbus里面的字符串dbusrealstring" tabindex="-1">Dbus里面的字符串<code>DBusRealString</code> <a class="header-anchor" href="#dbus里面的字符串dbusrealstring" aria-label="Permalink to &quot;Dbus里面的字符串`DBusRealString`&quot;">​</a></h3><p><code>Dbus</code>是<code>DBusString</code>包装了一层<code>DBusRealString</code>，对外<code>DBusString</code>，对内<code>DBusRealString</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              /**&lt; String data, plus nul termination */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              /**&lt; Length without nul */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            allocated;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /**&lt; Allocated size of data */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   constant : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     /**&lt; String data is not owned by DBusString */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   locked : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /**&lt; DBusString has been locked and can&#39;t be changed */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   valid : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /**&lt; DBusString is valid (initialized and not freed) */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   align_offset : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /**&lt; str - align_offset is the actual malloc block */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} DBusRealString;</span></span></code></pre></div><h3 id="glib中的gstring" tabindex="-1">Glib中的<code>GString</code> <a class="header-anchor" href="#glib中的gstring" aria-label="Permalink to &quot;Glib中的`GString`&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _GString {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gchar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gsize  len;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gsize  allocated_len;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="nginx中的ngx-str-t" tabindex="-1">nginx中的<code>ngx_str_t</code> <a class="header-anchor" href="#nginx中的ngx-str-t" aria-label="Permalink to &quot;nginx中的`ngx_str_t`&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  len;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    u_char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ngx_str_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="redis中的sds" tabindex="-1">Redis中的<code>sds</code> <a class="header-anchor" href="#redis中的sds" aria-label="Permalink to &quot;Redis中的`sds`&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sds;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Note: sdshdr5 is never used, we just access the flags byte directly.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * However is here to document the layout of type 5 SDS strings. */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((__packed__)) sdshdr5 {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 3 lsb of type, and 5 msb of string length */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((__packed__)) sdshdr8 {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* used */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       alloc;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* excluding the header and null terminator */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 3 lsb of type, 5 unused bits */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((__packed__)) sdshdr16 {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* used */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      alloc;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* excluding the header and null terminator */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 3 lsb of type, 5 unused bits */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((__packed__)) sdshdr32 {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* used */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      alloc;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* excluding the header and null terminator */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 3 lsb of type, 5 unused bits */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((__packed__)) sdshdr64 {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* used */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      alloc;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* excluding the header and null terminator */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 3 lsb of type, 5 unused bits */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="sds-simple-dynamic-strings" tabindex="-1">SDS：Simple Dynamic Strings <a class="header-anchor" href="#sds-simple-dynamic-strings" aria-label="Permalink to &quot;SDS：Simple Dynamic Strings&quot;">​</a></h2><p>其它几没有太大差别：容量、长度、数据，到是这个SDS SDS是在redis中使用的字符串，后面独立成了单独的仓库：<a href="https://github.com/antirez/sds" target="_blank" rel="noreferrer">https://github.com/antirez/sds</a></p><ul><li><code>__attribute__((__packed__))</code> 属性: <a href="https://wshibin.github.io/2022/08/Compiler-Attributes/#packed-%E5%B1%9E%E6%80%A7-%E5%90%8C%E4%B8%8A" target="_blank" rel="noreferrer">https://wshibin.github.io/2022/08/Compiler-Attributes/#packed-属性-同上</a></li><li>弹性数组成员: <a href="https://wshibin.github.io/2022/09/Flexible-array-member/" target="_blank" rel="noreferrer">https://wshibin.github.io/2022/09/Flexible-array-member/</a></li></ul><h3 id="设计" tabindex="-1">设计： <a class="header-anchor" href="#设计" aria-label="Permalink to &quot;设计：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+--------+-------------------------------+-----------+</span></span>\n<span class="line"><span>| Header | Binary safe C alike string... | Null term |</span></span>\n<span class="line"><span>+--------+-------------------------------+-----------+</span></span>\n<span class="line"><span>         |</span></span>\n<span class="line"><span>         `-&gt; Pointer returned to the user.</span></span></code></pre></div><p>示例：<code>HELLOWORLD</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+------------+------------------------+-----------+---------------\\</span></span>\n<span class="line"><span>| Len | Free | H E L L O W O R L D \\n | Null term |  Free space   \\</span></span>\n<span class="line"><span>+------------+------------------------+-----------+---------------\\</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>             `-&gt; Pointer returned to the user.</span></span></code></pre></div><h3 id="使用" tabindex="-1">使用： <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用：&quot;">​</a></h3><p>todo</p><h3 id="其它" tabindex="-1">其它： <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它：&quot;">​</a></h3><p>LSB： <code>least significant bit</code></p><img src="/assets/byte-and-bit-image-20220829103838200.jb3drexK.webp" style="zoom:80%;">',27)]))}]]);export{t as __pageData,l as default};
