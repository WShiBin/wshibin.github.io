import{_ as s,c as i,j as a,a as n,t as l,a2 as h,o as p}from"./chunks/framework.DRc6tsBz.js";const t=JSON.parse('{"title":"【JS】深入理解Nodejs","description":"","frontmatter":{"title":"【JS】深入理解Nodejs","categories":"Nodejs","tags":"Nodejs","sidebar":false,"prev":false,"next":false,"comments":false,"date":"2024-10-25T09:35:20.000Z"},"headers":[],"relativePath":"posts/2024/10_25_Understanding_Nodejs.md","filePath":"posts/2024/10_25_Understanding_Nodejs.md","lastUpdated":1729908201000}'),e={id:"frontmatter-title",tabindex:"-1"};const k=s({name:"posts/2024/10_25_Understanding_Nodejs.md"},[["render",function(s,t,k,r,d,E){return p(),i("div",null,[a("h1",e,[n(l(s.$frontmatter.title)+" ",1),t[0]||(t[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),t[1]||(t[1]=h('<h2 id="nodejs-是什么" tabindex="-1">Nodejs 是什么 <a class="header-anchor" href="#nodejs-是什么" aria-label="Permalink to &quot;Nodejs 是什么&quot;">​</a></h2><p>Node.js® 是一个免费、开源、跨平台的 JavaScript 运行时环境</p><ul><li>JS拓展应用领域：创建服务器、命令行工具、GUI软件和脚本</li><li>Nodejs把操作系统的能力暴露给了JS</li></ul><h2 id="nodejs-组成部分" tabindex="-1">Nodejs 组成部分 <a class="header-anchor" href="#nodejs-组成部分" aria-label="Permalink to &quot;Nodejs 组成部分&quot;">​</a></h2><p>Nodejs 依赖于哪些库？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:process&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// An object listing the version strings of Node.js and its dependencies</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NodeJS版本和它的依赖</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.versions);</span></span></code></pre></div><p>输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> versions.js</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  node:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;22.10.0&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  acorn:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;8.12.1&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ada:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2.9.0&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  amaro:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0.1.8&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ares:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.34.2&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  brotli:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.1.0&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cjs_module_lexer:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.4.1&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cldr:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;45.0&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  icu:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;75.1&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  llhttp:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;9.2.1&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 协议解析</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  modules:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;127&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  napi:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;9&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 接口</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nbytes:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0.1.1&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ncrypto:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0.0.1&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 加密</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nghttp2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.63.0&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http2</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  openssl:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3.4.0&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  simdjson:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3.10.0&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 解析</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  simdutf:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;5.5.0&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 编码</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sqlite:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3.46.1&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tz:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2024a&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timezone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 时间</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  undici:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;6.20.0&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  unicode:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;15.1&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unicode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 编码</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  uv:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.49.2&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libuv</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  uvwasi:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0.0.21&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  v8:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12.4.254.21-node.21&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> V8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 引擎</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  zlib:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.2.12&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 压缩</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>核心的<a href="https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-dependencies.md" target="_blank" rel="noreferrer">依赖库</a>：</p><ul><li>V8：JS V8引擎</li><li>uv：提供OS层面接口、事件循环、线程池任务处理</li></ul><p><img src="/assets/nodejs.excalidraw.BFZcVX1Y.svg" alt="" loading="lazy"></p><p><strong>命名常用到的关键词：</strong></p><ul><li>ng：<code>Next Generation</code>简写，下一代</li><li>simd: <code>Single Instruction/Multiple Data</code>简写，CPU技术，性能优化</li></ul><h2 id="nodejs-核心" tabindex="-1">Nodejs 核心 <a class="header-anchor" href="#nodejs-核心" aria-label="Permalink to &quot;Nodejs 核心&quot;">​</a></h2><ul><li>阻塞与非阻塞</li><li>JS单线程</li><li>事件循环Event Loop</li><li>libuv事件循环源代码</li><li>工作线程池</li></ul><h3 id="阻塞与非阻塞" tabindex="-1">阻塞与非阻塞 <a class="header-anchor" href="#阻塞与非阻塞" aria-label="Permalink to &quot;阻塞与非阻塞&quot;">​</a></h3><p>前提：调用API接口有成本；并不像人感知的<strong>很快</strong>，调用一下就返回了结果；快和慢的标准应该是由CPU来评价，而不是人</p><ul><li>Buffer模块: 对应内存；内存分配、读、写 <ul><li>内存分类：栈、堆、内存池</li></ul></li><li>File System模块：对应文件系统；CPU操作磁盘（物理），转起来，找inode，找内容块区域</li><li>Net模块：对应网络协议；发出来速度还行，什么时候收到响应<strong>不确定</strong><ul><li>最早被<code>异步</code>：内核去监听事件，然后通知应用（应用不用等）</li></ul></li></ul><p><strong><a href="https://norvig.com/21-days.html#answers" target="_blank" rel="noreferrer">典型 PC 上各种操作的大致时间</a>：</strong></p><table tabindex="0"><thead><tr><th>execute typical instruction</th><th>1/1,000,000,000 sec = 1 nanosec</th></tr></thead><tbody><tr><td>fetch from L1 cache memory</td><td>0.5 nanosec</td></tr><tr><td>branch misprediction</td><td>5 nanosec</td></tr><tr><td>fetch from L2 cache memory</td><td>7 nanosec</td></tr><tr><td>Mutex lock/unlock</td><td>25 nanosec</td></tr><tr><td>fetch from main memory</td><td>100 nanosec</td></tr><tr><td>send 2K bytes over 1Gbps network</td><td>20,000 nanosec</td></tr><tr><td>read 1MB sequentially from memory</td><td>250,000 nanosec</td></tr><tr><td>fetch from new disk location (seek)</td><td>8,000,000 nanosec</td></tr><tr><td>read 1MB sequentially from disk</td><td>20,000,000 nanosec</td></tr><tr><td>send packet US to Europe and back</td><td>150 milliseconds = 150,000,000 nanosec</td></tr></tbody></table><p><a href="https://colin-scott.github.io/personal_website/research/interactive_latency.html" target="_blank" rel="noreferrer">Latency Numbers Every Programmer Should Know</a></p><p><strong>阻塞与非阻塞示例:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻塞</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// blocks here until file is read</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moreWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will run before console.log</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非阻塞</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moreWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will run before console.log</span></span></code></pre></div><h3 id="js单线程" tabindex="-1">JS单线程 <a class="header-anchor" href="#js单线程" aria-label="Permalink to &quot;JS单线程&quot;">​</a></h3><p>从 <code>setInterval</code> 超时说起：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100ms interval</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 模拟interval回调处理耗时任务1000ms</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;interval date:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>现象100ms的定时器变成了1000ms的定时器，为什么会这样？</p><h3 id="事件循环event-loop" tabindex="-1">事件循环Event Loop <a class="header-anchor" href="#事件循环event-loop" aria-label="Permalink to &quot;事件循环Event Loop&quot;">​</a></h3><p>事件循环流程图</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   ┌───────────────────────────┐</span></span>\n<span class="line"><span>┌─&gt;│           timers          │</span></span>\n<span class="line"><span>│  └─────────────┬─────────────┘</span></span>\n<span class="line"><span>│  ┌─────────────┴─────────────┐</span></span>\n<span class="line"><span>│  │     pending callbacks     │</span></span>\n<span class="line"><span>│  └─────────────┬─────────────┘</span></span>\n<span class="line"><span>│  ┌─────────────┴─────────────┐</span></span>\n<span class="line"><span>│  │       idle, prepare       │</span></span>\n<span class="line"><span>│  └─────────────┬─────────────┘      ┌───────────────┐</span></span>\n<span class="line"><span>│  ┌─────────────┴─────────────┐      │   incoming:   │</span></span>\n<span class="line"><span>│  │           poll            │&lt;─────┤  connections, │</span></span>\n<span class="line"><span>│  └─────────────┬─────────────┘      │   data, etc.  │</span></span>\n<span class="line"><span>│  ┌─────────────┴─────────────┐      └───────────────┘</span></span>\n<span class="line"><span>│  │           check           │</span></span>\n<span class="line"><span>│  └─────────────┬─────────────┘</span></span>\n<span class="line"><span>│  ┌─────────────┴─────────────┐</span></span>\n<span class="line"><span>└──┤      close callbacks      │</span></span>\n<span class="line"><span>   └───────────────────────────┘</span></span></code></pre></div><h4 id="阶段概述" tabindex="-1">阶段概述 <a class="header-anchor" href="#阶段概述" aria-label="Permalink to &quot;阶段概述&quot;">​</a></h4><ul><li><code>timers</code>：此阶段执行由<code>setTimeout()</code> 和安排的回调<code>setInterval()</code>。</li><li><code>pending callbacks</code>：执行推迟到下一次循环迭代的 <code>I/O</code> 回调。</li><li><code>idle, prepare</code>：仅在内部使用。</li><li><code>poll</code>：检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有回调，除了关闭回调、由计时器安排的回调等<code>setImmediate()</code>）；节点将在适当的时候在此处阻塞。</li><li><code>check</code>：<code>setImmediate()</code>此处调用回调。</li><li><code>close callbacks</code>：一些关闭回调，例如<code>socket.on(&#39;close&#39;, ...)</code>。</li></ul><h3 id="libuv事件循环源代码" tabindex="-1">libuv事件循环源代码 <a class="header-anchor" href="#libuv事件循环源代码" aria-label="Permalink to &quot;libuv事件循环源代码&quot;">​</a></h3><p>代码目录：<a href="https://github.com/nodejs/node/blob/main/deps/uv/src/unix/core.c" target="_blank" rel="noreferrer"><code>deps/uv/src/{unix|win}/core.c</code></a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uv_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uv_loop_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uv_run_mode </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> can_sleep;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uv__loop_alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 省略部分代码...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loop-&gt;stop_flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    can_sleep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        uv__queue_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loop-&gt;pending_queue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        uv__queue_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loop-&gt;idle_handles);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__run_pending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__run_idle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__run_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UV_RUN_ONCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> can_sleep) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UV_RUN_DEFAULT)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uv__backend_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__metrics_inc_loop_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__io_poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop, timeout);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv__queue_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loop-&gt;pending_queue); r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      uv__run_pending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__metrics_update_idle_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__run_check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__run_closing_handles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__update_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uv__run_timers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uv__loop_alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UV_RUN_ONCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UV_RUN_NOWAIT)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 省略部分代码...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="工作线程池" tabindex="-1">工作线程池 <a class="header-anchor" href="#工作线程池" aria-label="Permalink to &quot;工作线程池&quot;">​</a></h3><p>先看一段简单测试代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // console --&gt; stdout --&gt; write</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;counter:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现象：任务管理器里面多核CPU起飞。多线程来完成任务</p><p><strong>Process Explorer</strong></p><p>可以用Process Explorer管理器查看 进程的状态，比如线程数</p><p><strong>UV_THREADPOOL_SIZE</strong> 设置threadpool线程数</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 省略...</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Environment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> variables:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UV_THREADPOOL_SIZE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            sets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> threads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libuv&#39;s threadpool</span></span></code></pre></div><h2 id="nodejs线程模型" tabindex="-1">Nodejs线程模型 <a class="header-anchor" href="#nodejs线程模型" aria-label="Permalink to &quot;Nodejs线程模型&quot;">​</a></h2><p>线程模型：JS单线程 + N个工作线程</p><ul><li>JS事件循环的单线程： <ul><li>事件循环、添加任务、回调（定时器、超时、事件完成的通知）</li><li>只做<code>接待类</code>的简单任务，回调也简单处理 (比喻成公司前台)</li></ul></li><li>N个工作线程：做具体繁重、耗时任务</li></ul><p><img src="/assets/nodejs_arch.DDxjy8k2.jpg" alt="" loading="lazy"></p><h2 id="不要阻塞js事件循环" tabindex="-1">不要阻塞JS事件循环 <a class="header-anchor" href="#不要阻塞js事件循环" aria-label="Permalink to &quot;不要阻塞JS事件循环&quot;">​</a></h2><p>阻塞JS事件循环的单线程带来的问题：</p><ul><li>定时器失效、timeout超时不准</li><li>无法<code>接待</code>更多客户：新的网络连接、UI交互</li><li>不要在回调中写耗时任务</li></ul><h3 id="node-js的核心模块阻塞事件循环表" tabindex="-1">Node.js的核心模块阻塞事件循环表： <a class="header-anchor" href="#node-js的核心模块阻塞事件循环表" aria-label="Permalink to &quot;Node.js的核心模块阻塞事件循环表：&quot;">​</a></h3><ul><li>Encryption加密模块: <ul><li><code>crypto.randomBytes</code> (同步版本)</li><li><code>crypto.randomFillSync</code></li><li><code>crypto.pbkdf2Sync</code></li></ul></li><li>Compression压缩模块: <ul><li><code>zlib.inflateSync</code></li><li><code>zlib.deflateSync</code></li></ul></li><li>File system文件系统模块: <ul><li><code>Sync</code>后缀结尾的API</li></ul></li><li>Child process子进程模块: <ul><li><code>child_process.spawnSync</code></li><li><code>child_process.execSync</code></li><li><code>child_process.execFileSync</code></li></ul></li></ul><h3 id="任务切分" tabindex="-1">任务切分 <a class="header-anchor" href="#任务切分" aria-label="Permalink to &quot;任务切分&quot;">​</a></h3><p>求平均数：切分前</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;avg: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg);</span></span></code></pre></div><p>切分后（不卡JS事件循环的单线程，循环会继续转）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncAvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">avgCB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Save ongoing sum in JS closure.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;Asynchronous recursion&quot;.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Schedule next operation asynchronously.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(help.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cb));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Start the helper, with CB to call avgCB.</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    avgCB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(avg);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asyncAvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">avg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;avg of 1-n: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="任务拆分下派" tabindex="-1">任务拆分下派 <a class="header-anchor" href="#任务拆分下派" aria-label="Permalink to &quot;任务拆分下派&quot;">​</a></h3><ul><li>通过开发C++ 插件来使用内置的 Node.js 工作池</li><li>任务分子线程、子进程去跑，然后通知而返回结果</li></ul><h2 id="为什么异步" tabindex="-1">为什么异步 <a class="header-anchor" href="#为什么异步" aria-label="Permalink to &quot;为什么异步&quot;">​</a></h2><p>异步是编程语言应对CPU多核（并发）能力的一种方案；历史背景：近些年，单核性能提升变慢，开始通过横向加核来增加CPU性能：</p><ul><li>语言迭代有快慢（应对底层物理核增加）</li><li>老语言有历史包袱（或是先以三方库的形式存在）、新语言可以从新设计</li><li>异步发展：网络（内核监听）--&gt; 文件（线程池）--&gt; 代码块（语言支持：加语法糖）--&gt; 成为语言一部分</li></ul><p><strong>不同语言方案分类：</strong></p><ul><li>手动调度（开线程、线程池、三方库实现协程/异步）：C、C++、其它</li><li>异步：JS、Swift、C#、Rust</li><li>协程：Go、Java</li></ul><p><strong>异步总结：</strong></p><ul><li>减少开发人员的开发成本（利用CPU多核的能力） <ul><li>不用关心数据竞争、线程同步及其它问题</li><li>不用关心具体的任务在哪个线程去执行</li><li>不用自已写任务分配和调度</li></ul></li><li>让写异步代码和写同步代码一样简单（范式、执行流程）</li></ul><h2 id="refs" tabindex="-1">Refs <a class="header-anchor" href="#refs" aria-label="Permalink to &quot;Refs&quot;">​</a></h2><ul><li><a href="https://nodejs.org" target="_blank" rel="noreferrer">https://nodejs.org</a></li><li><a href="https://github.com/nodejs/node" target="_blank" rel="noreferrer">https://github.com/nodejs/node</a></li><li><a href="https://github.com/libuv/libuv" target="_blank" rel="noreferrer">https://github.com/libuv/libuv</a></li><li><a href="https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick" target="_blank" rel="noreferrer">https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick</a></li><li><a href="https://nodejs.org/en/learn/asynchronous-work/dont-block-the-event-loop" target="_blank" rel="noreferrer">https://nodejs.org/en/learn/asynchronous-work/dont-block-the-event-loop</a></li></ul>',68))])}]]);export{t as __pageData,k as default};
