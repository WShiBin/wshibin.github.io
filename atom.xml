<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WShiBin&#39;s blogs</title>
  
  <subtitle>但行好事，莫问前程!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wshibin.github.io/"/>
  <updated>2020-10-02T09:40:51.895Z</updated>
  <id>https://wshibin.github.io/</id>
  
  <author>
    <name>Shi Bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github下载慢问题探究</title>
    <link href="https://wshibin.github.io/Github%E4%B8%8B%E8%BD%BD%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/"/>
    <id>https://wshibin.github.io/Github%E4%B8%8B%E8%BD%BD%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/</id>
    <published>2020-07-18T23:00:53.000Z</published>
    <updated>2020-10-02T09:40:51.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司对网络进行了限制,还不能开代理,Github下载的那个项目又非常大,后来对这个问题进行了思索,随记录下来</p></blockquote><p>git clone 经常是这样:17.00 KiB/s ???</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[I] ➜ git clone http://github.com/git/git git_</span><br><span class="line">Cloning into 'git'...</span><br><span class="line">warning: redirecting to https://github.com/git/git/</span><br><span class="line">remote: Enumerating objects: 289445, done.</span><br><span class="line">Receiving objects:   0% (2548/289445), 1.14 MiB | 17.00 KiB/s</span><br></pre></td></tr></table></figure><p>抽象的归纳下,本质上是:下载一个资源慢的问题?</p><p>那下载时间的长短取决于:<strong>网速+资源大小</strong></p><a id="more"></a><h3 id="网速"><a href="#网速" class="headerlink" title="网速:"></a>网速:</h3><blockquote><p>这里不考虑本地带宽,服务器资源带宽,p2p其它因素,这些因素影响没有那么大; </p></blockquote><p>明显Github的服务器部署在国外,这时候有两个主要的办法</p><p><strong>代理:</strong>这个就不多解释了<br><strong>把仓库搬到国内:</strong>国内码云提供了相应的功能,一键将Github的repo迁移到国内,相关文章<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmdpdGVlLmNvbS8yMDE4LzA2LzA1L2dpdGh1Yl90b19naXRlZS8=">https://blog.gitee.com/2018/06/05/github_to_gitee/<i class="fa fa-external-link-alt"></i></span></p><h3 id="资源大小"><a href="#资源大小" class="headerlink" title="资源大小:"></a>资源大小:</h3><p>如果是平时下载一个文件,下载一个小电影之类,这里就不用讨论了,但这里是下载的一个git仓库</p><p>通常去github下载一个仓库会不加思索的:git clone url.没错,我以前就是这么干的. 这样带来什么问题,默认这样clone下来的是远程仓库的完整复制版本,带从项目创建到当前最后的提交,包括所以有远程分支.Tags</p><p>不经想问:这都是你需要的吗? 对于大多数人的需求来说,答案都是否定的</p><h4 id="Git-commit-branch模型"><a href="#Git-commit-branch模型" class="headerlink" title="Git commit-branch模型"></a>Git commit-branch模型</h4><img data-src="https://raw.githubusercontent.com/WShiBin/pic-repo/master/20200718235642.png" style="zoom:80%;" /><p>看完这张图,可能会说,我只想到v1.0这个版本的代码,其它有要不要无所谓; 这图并不是突显出问题,说个数据git源代码的仓库现在快有6W个commit次提交.</p><p>其实git clone也提供了相应的选项: </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> <span class="built_in">clone</span></span><br><span class="line">--depth &lt;depth&gt; <span class="comment"># commit的个数,默认只clone一个分支 👍</span></span><br><span class="line">--single-branch <span class="comment"># clone单个分支</span></span><br></pre></td></tr></table></figure><p><strong>测试:</strong></p><p>clone全部:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[I] ➜ git clone --branch master http://github.com/git/git</span><br><span class="line">Cloning into 'git'...</span><br><span class="line">warning: redirecting to https://github.com/git/git/</span><br><span class="line">remote: Enumerating objects: 289445, done.</span><br><span class="line">remote: Total 289445 (delta 0), reused 0 (delta 0), pack-reused 289445</span><br><span class="line">Receiving objects: 100% (289445/289445), 139.10 MiB | 999.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (215497/215497), done.</span><br><span class="line">Updating files: 100% (3779/3779), done.</span><br></pre></td></tr></table></figure><p>clone单个branch:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[I] ➜ git clone --single-branch http://github.com/git/git git_single_branch</span><br><span class="line">Cloning into 'git_single_branch'...</span><br><span class="line">warning: redirecting to https://github.com/git/git/</span><br><span class="line">remote: Enumerating objects: 776, done.</span><br><span class="line">remote: Counting objects: 100% (770/770), done.</span><br><span class="line">remote: Compressing objects: 100% (770/770), done.</span><br><span class="line">remote: Total 281961 (delta 0), reused 770 (delta 0), pack-reused 281191</span><br><span class="line">Receiving objects: 100% (281961/281961), 134.84 MiB | 1.53 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (210884/210884), done.</span><br><span class="line">Updating files: 100% (3779/3779), done.</span><br></pre></td></tr></table></figure><p>clone单个commit:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[I] ➜ git clone --depth 1 http://github.com/git/git git_depth</span><br><span class="line">Cloning into 'git_depth'...</span><br><span class="line">warning: redirecting to https://github.com/git/git/</span><br><span class="line">remote: Enumerating objects: 3872, done.</span><br><span class="line">remote: Counting objects: 100% (3872/3872), done.</span><br><span class="line">remote: Compressing objects: 100% (3465/3465), done.</span><br><span class="line">remote: Total 3872 (delta 325), reused 1877 (delta 250), pack-reused 0</span><br><span class="line">Receiving objects: 100% (3872/3872), 9.13 MiB | 660.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (325/325), done.</span><br></pre></td></tr></table></figure><p>139.10 MiB --&gt; 9.13 MiB下载的代码从139MB降低到了9MB, nice</p><h4 id="项目为什么这么大"><a href="#项目为什么这么大" class="headerlink" title="项目为什么这么大?"></a>项目为什么这么大?</h4><p>这时候看下这个项目目录大小, 55M ??? 不是说好的9M吗?</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[I] ➜ du -hs ./git_depth</span><br><span class="line"> 55M../git_depth</span><br></pre></td></tr></table></figure><p>git clone的时候其实是一系列的操作:先把远程的repo拉到本地仓库,然后把mater分支从本地仓库checkout出来,所以checkout出来的代码不会算做下载的大小.查看.git及目录的大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[I] ➜ du -hd1 .git</span><br><span class="line"> 10M.git/objects</span><br><span class="line">4.0K.git/info</span><br><span class="line"> 12K.git/logs</span><br><span class="line"> 52K.git/hooks</span><br><span class="line"> 12K.git/refs</span><br><span class="line"> 11M.git</span><br></pre></td></tr></table></figure><p>看上去差不多了.<br>压缩:40M的代码 --&gt; 9M仓库里面 </p><h4 id="实际的应用场景"><a href="#实际的应用场景" class="headerlink" title="实际的应用场景"></a>实际的应用场景</h4><ul><li>只要最新的:depth 1</li><li>需要特定tag:向前推几十个</li><li>看源码:全量下载</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;公司对网络进行了限制,还不能开代理,Github下载的那个项目又非常大,后来对这个问题进行了思索,随记录下来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git clone 经常是这样:17.00 KiB/s ???&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[I] ➜ git clone http://github.com/git/git git_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cloning into &#39;git&#39;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;warning: redirecting to https://github.com/git/git/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Enumerating objects: 289445, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Receiving objects:   0% (2548/289445), 1.14 MiB | 17.00 KiB/s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;抽象的归纳下,本质上是:下载一个资源慢的问题?&lt;/p&gt;
&lt;p&gt;那下载时间的长短取决于:&lt;strong&gt;网速+资源大小&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://wshibin.github.io/categories/Git/"/>
    
    
      <category term="Github" scheme="https://wshibin.github.io/tags/Github/"/>
    
      <category term="Git" scheme="https://wshibin.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>译文:Googletest Primer</title>
    <link href="https://wshibin.github.io/Googletest-Primer/"/>
    <id>https://wshibin.github.io/Googletest-Primer/</id>
    <published>2020-05-30T22:03:18.000Z</published>
    <updated>2020-09-06T16:10:09.632Z</updated>
    
    <content type="html"><![CDATA[<p>文档:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nb29nbGV0ZXN0L2Jsb2IvbWFzdGVyL2dvb2dsZXRlc3QvZG9jcy9wcmltZXIubWQ=">https://github.com/google/googletest/blob/master/googletest/docs/primer.md<i class="fa fa-external-link-alt"></i></span></p><h2 id="简介-为什么要使用googletest"><a href="#简介-为什么要使用googletest" class="headerlink" title="简介:为什么要使用googletest?"></a>简介:为什么要使用googletest?</h2><p><em>googletest</em>能帮助你写更好的C++测试代码.</p><p>googletest是由测试技术团队根据Google的特定要求和约束来开发的测试框架. 不管你是在Linux,windows,还是Mac上工作,如果你写C++代码, googletest能帮助到你,它能支持运行任何类型的测试,不仅仅是支持unit tests.</p><a id="more"></a><p>那么什么是一个好的测试,以及googletest是如何做到这些的? 我们相信:</p><ol><li>测试应该是独立和重复的.调试一个成功或是失败做其它测试的结果是一件很痛苦的事.googletest通过让他们运行在不同的object上来隔离它们.当一个测试fails,googletest允许你在单独的运行它进行快速调试</li><li>测试应该组织得井井有条,并能反映出测试代码的结构.googletest将相关的测试分组到能共享数据和子程序的测试大几中,这个觉的落木模式让识别,并且使得测试易于维护.当人们切换项目,在新的代码仓库开始工作,这种一致性会非常的有用</li><li>测试应该是可移植和可重复使用的.Google有很多和平台无关的代码,它们的测试也应该是和平台无关的.googletest能使用不同的编译器,使用或不使用异常,工作在不同的系统上.所以googletest能使用多种配置工作</li><li>当测试失败,它们应该提供尽可能多的关于问题的信息.googletest不会在当第一个测试失败的时候停止,相反,它仅仅停止当前的测试,并会继续下一个测试,同时你也可以配置报告没有致命故障的测试,然后进行当前的测试.因此,你能在单个run-edit-compile循环中检测和修复多个bug.</li><li>测试框架应该让测试者从乱七八糟的事情中解放出来,并专注于测试内容上.googletest会自动的跟踪所有的测试,并且不需要用户去列举他们,即可运行他们</li><li>测试应该是非常快的.使用googletest,你能在不同的测试之间共享数据,这些只需要配置/拆卸一次,而不需要让测试相互依赖</li></ol><p>由于googletest基于流行的xUnit架构,如果你以前已经使用过JUnit或是PyUnit,你会感到宾至如归.如果没有使用过,它会话费大约10分钟去学习基础,然后开始</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>当使用googletest,开始编写检查条件是不是真的<em>断言</em>,一个<em>断言</em>的结果可能是成功,非致命的故障,或是致命的故障.如果一个致命的故障出现了,它会终止当前的函数;反之,他会正常的继续运行</p><p>测试使用断言来验证用户的行为.如果测试崩溃或是有一个失败的断言,则这个测试失败了,反之这个测试成功了</p><p><em>Tests</em> use assertions to verify the tested code&#39;s behavior. If a test crashes or has a failed assertion, then it <em>fails</em>; otherwise it <em>succeeds</em>.</p><p>A <em>test suite</em> contains one or many tests. You should group your tests into test suites that reflect the structure of the tested code. When multiple tests in a test suite need to share common objects and subroutines, you can put them into a <em>test fixture</em> class.</p><p>A <em>test program</em> can contain multiple test suites.</p><p>We&#39;ll now explain how to write a test program, starting at the individual assertion level and building up to tests and test suites.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文档:&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nb29nbGV0ZXN0L2Jsb2IvbWFzdGVyL2dvb2dsZXRlc3QvZG9jcy9wcmltZXIubWQ=&quot;&gt;https://github.com/google/googletest/blob/master/googletest/docs/primer.md&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介-为什么要使用googletest&quot;&gt;&lt;a href=&quot;#简介-为什么要使用googletest&quot; class=&quot;headerlink&quot; title=&quot;简介:为什么要使用googletest?&quot;&gt;&lt;/a&gt;简介:为什么要使用googletest?&lt;/h2&gt;&lt;p&gt;&lt;em&gt;googletest&lt;/em&gt;能帮助你写更好的C++测试代码.&lt;/p&gt;
&lt;p&gt;googletest是由测试技术团队根据Google的特定要求和约束来开发的测试框架. 不管你是在Linux,windows,还是Mac上工作,如果你写C++代码, googletest能帮助到你,它能支持运行任何类型的测试,不仅仅是支持unit tests.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="https://wshibin.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="https://wshibin.github.io/tags/Test/"/>
    
      <category term="googletest" scheme="https://wshibin.github.io/tags/googletest/"/>
    
  </entry>
  
  <entry>
    <title>理解命令行程序</title>
    <link href="https://wshibin.github.io/Understand-Command-Line-Programming/"/>
    <id>https://wshibin.github.io/Understand-Command-Line-Programming/</id>
    <published>2020-05-27T00:21:48.000Z</published>
    <updated>2020-07-18T15:09:22.710Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本来是不想写这篇文章的,在写<code>理解Git</code>的时候,发现关于命令行的知识点一两句讲不完,就间单独来写一篇文章,就有了你看到的</p></blockquote><blockquote><p> <strong><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTIyNDc2ODYw">Hacker News<i class="fa fa-external-link-alt"></i></span></strong>上有一个关于man手册的讨论非常有意思:<strong>对于Gui程序,界面可以去指导/指示用户去如何使用程序;而对于命令行的程序你必需去阅读man手册才能了解如何去使用它,所以应该把命令行的man手册视为命令行程序的一部分</strong></p></blockquote><p><strong>命令行程序</strong>: 程序 + 手册</p><a id="more"></a><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h2 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h2><p><strong>如果去查看一个命令行的帮助手册</strong></p><ul><li>包括哪些部分</li><li>SYNOPSIS中的语法含义<ul><li><code>[...]</code>:可选</li><li><code>a|b</code>:二选一</li><li><code>&lt;command&gt;</code>:强制一定要写</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本来是不想写这篇文章的,在写&lt;code&gt;理解Git&lt;/code&gt;的时候,发现关于命令行的知识点一两句讲不完,就间单独来写一篇文章,就有了你看到的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTIyNDc2ODYw&quot;&gt;Hacker News&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/strong&gt;上有一个关于man手册的讨论非常有意思:&lt;strong&gt;对于Gui程序,界面可以去指导/指示用户去如何使用程序;而对于命令行的程序你必需去阅读man手册才能了解如何去使用它,所以应该把命令行的man手册视为命令行程序的一部分&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;命令行程序&lt;/strong&gt;: 程序 + 手册&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMD" scheme="https://wshibin.github.io/categories/CMD/"/>
    
    
      <category term="help" scheme="https://wshibin.github.io/tags/help/"/>
    
      <category term="manual" scheme="https://wshibin.github.io/tags/manual/"/>
    
  </entry>
  
  <entry>
    <title>理解 Git</title>
    <link href="https://wshibin.github.io/Understand-Git/"/>
    <id>https://wshibin.github.io/Understand-Git/</id>
    <published>2020-05-26T21:34:41.000Z</published>
    <updated>2020-07-18T15:08:35.356Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git的学习曲线和难度相对较高,理解内部的原理和一些核心概念对使用git帮助极大</p></blockquote><a id="more"></a><h2 id="Git学习的难度在哪里？"><a href="#Git学习的难度在哪里？" class="headerlink" title="Git学习的难度在哪里？"></a>Git学习的难度在哪里？</h2><p><strong>命令多</strong>:tab键一个就200多个,选项更多</p><p><strong>一个命令多种用途</strong>:add命令</p><ul><li>跟踪文件</li><li>添加到暂存区</li><li>修改冲突文件后,用add来标记这个冲突已经解决</li></ul><p><strong>有些命令是组合命令</strong>:一个命令可以包含多个命令（隐藏操作）</p><p><strong>如果不明白原理,可以文档都看不懂</strong>:git help push</p><h2 id="认识Git仓库-git目录"><a href="#认识Git仓库-git目录" class="headerlink" title="认识Git仓库.git目录"></a>认识Git仓库.git目录</h2><h2 id="Git的工作模型？"><a href="#Git的工作模型？" class="headerlink" title="Git的工作模型？"></a>Git的工作模型？</h2><ul><li>Untrack -- Unmodified -- Modified -- Staged </li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1CYXNpY3MtUmVjb3JkaW5nLUNoYW5nZXMtdG8tdGhlLVJlcG9zaXRvcnk=">https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository<i class="fa fa-external-link-alt"></i></span></p><p><img data-src="https://git-scm.com/book/en/v2/images/lifecycle.png" alt="The lifecycle of the status of your files."></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1CcmFuY2hpbmctQnJhbmNoZXMtaW4tYS1OdXRzaGVsbA==">https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell<i class="fa fa-external-link-alt"></i></span></p><p><img data-src="https://git-scm.com/book/en/v2/images/branch-and-history.png" alt="A branch and its commit history."></p><p><img data-src="https://git-scm.com/book/en/v2/images/commit-and-tree.png" alt="A commit and its tree."></p><p><strong>git中的三大对象objects</strong></p><ul><li>commit object:保存提交信息(项目快照,时间,作者,备注)</li><li>tree object:目录</li><li>blob:文件</li></ul><h2 id="Git中的HEAD指的是什么？"><a href="#Git中的HEAD指的是什么？" class="headerlink" title="Git中的HEAD指的是什么？"></a>Git中的HEAD指的是什么？</h2><ul><li>文件存储位置./.git/HEAD(linux:一切皆文件)</li><li>指向的是分支,而分支是指向当前分支的最后一个commit</li><li>代表当前工作目录中的文件是基于哪个commit的</li></ul><h2 id="Git保存的是文件的修改还是文件的全部内容？"><a href="#Git保存的是文件的修改还是文件的全部内容？" class="headerlink" title="Git保存的是文件的修改还是文件的全部内容？"></a>Git保存的是文件的修改还是文件的全部内容？</h2><blockquote><p>保存文件的全部内容</p></blockquote><h2 id="Git是如何管理存储文件的？"><a href="#Git是如何管理存储文件的？" class="headerlink" title="Git是如何管理存储文件的？"></a>Git是如何管理存储文件的？</h2><blockquote><p>对文件内容进行hash,用于目录和文件名,内容进行二进制缩,存储在.git/objecs目录下</p></blockquote><h2 id="Git新建分支为什么非常的快？"><a href="#Git新建分支为什么非常的快？" class="headerlink" title="Git新建分支为什么非常的快？"></a>Git新建分支为什么非常的快？</h2><blockquote><p>它不需要拷贝当前项目的所有文件,它只需要基于commit新建几个文件</p></blockquote><h2 id="Git中隐藏的操作"><a href="#Git中隐藏的操作" class="headerlink" title="Git中隐藏的操作"></a>Git中隐藏的操作</h2><ul><li>gc打包</li><li>zlib压缩</li></ul><p>hash-object</p><p>References:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2Nz">https://git-scm.com/docs<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1JbnRlcm5hbHMtUGx1bWJpbmctYW5kLVBvcmNlbGFpbg==">https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi90ZWNobmljYWw=">https://github.com/git/git/blob/master/Documentation/technical<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vcmVzdWx0cz9zZWFyY2hfcXVlcnk9Z2l0K2ludGVybmFs">https://www.youtube.com/results?search_query=git+internal<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9taW5jb25nLmlvLzIwMTgvMDQvMjgvZ2l0LWluZGV4Lw==">https://mincong.io/2018/04/28/git-index/<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git的学习曲线和难度相对较高,理解内部的原理和一些核心概念对使用git帮助极大&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://wshibin.github.io/categories/Git/"/>
    
    
      <category term="git" scheme="https://wshibin.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew上手</title>
    <link href="https://wshibin.github.io/Homebrew/"/>
    <id>https://wshibin.github.io/Homebrew/</id>
    <published>2020-05-11T00:00:00.000Z</published>
    <updated>2020-07-18T15:09:02.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote><p><strong>The Missing Package(软件) Manager for macOS (or Linux)</strong></p></blockquote><p>在Mac/Linux缺失的软件包管理器</p><ul><li>App Store --&gt; GUI,官方</li><li>Homebrew --&gt; CMD,第三方维护</li></ul><a id="more"></a><h2 id="为什么要用它？"><a href="#为什么要用它？" class="headerlink" title="为什么要用它？"></a>为什么要用它？</h2><p><strong>Apple自己家的App Store</strong>:</p><ul><li>只能下载最新版的软件</li><li>开发者发交钱。注册苹果开发者账号，几百的年费</li><li>上传一个程序需要经过苹果公司的审核（尤其是第一次上传一个新的软件，有的甚至会等几个月）</li><li>没有命令行和服务类程序下载，管理</li></ul><h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><h3 id="Install安装"><a href="#Install安装" class="headerlink" title="Install安装"></a>Install安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>既然Homebrew和App store的作用是类似的，就来类比来学习这款软件的使用</p></blockquote><h3 id="App-store有什么样的功能"><a href="#App-store有什么样的功能" class="headerlink" title="App store有什么样的功能"></a>App store有什么样的功能</h3><p><strong>用户的角度</strong></p><ul><li>搜索软件</li><li>查看软件信息</li><li>安装软件</li><li>更新软件</li><li>安装了哪些软件</li><li>卸载</li></ul><p><strong>开发者、管理者</strong></p><ul><li>上传软件包，提交相交信息</li><li>文件服务器</li></ul><h3 id="和Hombrew相关的命令"><a href="#和Hombrew相关的命令" class="headerlink" title="和Hombrew相关的命令"></a>和Hombrew相关的命令</h3><ul><li>brew help: 查看brew的帮助文档</li><li>brew help sub_cmd: 查看brew子命令的帮助文档</li><li>brew home：转跳到Homebrew的官网</li><li>brew config: 查看Homebrew配置</li><li>brew commands: 查看Homebrew有哪些命令</li><li>brew list: 查看通过brew装了哪些软件</li><li>brew info: 装了多少软件，有多少个文件，占用多少空间</li><li>brew update: 更新Homebrew软件</li><li>brew cleanup: 清理</li><li>brew outdatad: 查看有哪些已经的软件有新版本</li><li><strong>brew doctor</strong>: 检查你系统中可能存在的问题</li><li>brew --version: Homebrew版本</li><li>brew --repo: Homebrew仓库位置</li><li>brew --cache: Homebrew下载软件的缓存位置</li><li>brew --cellar: Homebrew安装CMD软件的位置</li></ul><h3 id="和安装CMD软件相关的命令"><a href="#和安装CMD软件相关的命令" class="headerlink" title="和安装CMD软件相关的命令"></a>和安装CMD软件相关的命令</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvQm90dGxlcw==">https://docs.brew.sh/Bottles<i class="fa fa-external-link-alt"></i></span></p><blockquote><p><strong>Bottle</strong>:</p></blockquote><ul><li>brew search formula: 搜索某个软件</li><li>brew info formula: 查看软件的info</li><li>brew home formula: 转跳到对应软件主页</li><li>brew install formula: 安装软件</li><li>brew upgrade formula: 更新软件</li><li>brew reinstall formula: 重装软件</li><li>brew uninstall formula: 卸载软件</li><li>brew fetch formula: 下载，不安装</li><li>brew deps formula: 查看软件依赖的相关软件</li><li>brew pin formula: 锁定软件版本，防止upgrade的时候更新软件</li><li>brew unpin formula: 解除锁定，和上面相反</li><li>brew log formula：查看软件的更新日志log</li></ul><h3 id="和安装macOS-native-apps相关的命令"><a href="#和安装macOS-native-apps相关的命令" class="headerlink" title="和安装macOS native apps相关的命令"></a>和安装macOS native apps相关的命令</h3><blockquote><p>Cask: 用来安装Mac native apps(GUI:有界面)</p></blockquote><ul><li>brew help cask: 查看相关cask的帮助文档</li><li>brew cask home formula: 转跳到对应软件主页</li><li>brew cask info formula: 相关info</li><li>brew cask list: list</li><li>brew cask install formula</li><li>brew cask upgrade formula</li><li>brew cask reinstall formula</li><li>brew cask uninstall formula</li><li>brew cask fetch formula: 下载，不安装</li><li>brew cask outdated formula: 查看有哪些已经的软件有新版本</li><li>brew cask zap formula: 删除和软件相关的所有文件</li></ul><h3 id="和Service相关的命令"><a href="#和Service相关的命令" class="headerlink" title="和Service相关的命令"></a>和Service相关的命令</h3><blockquote><p>使用macOS的launchctl（1）守护程序管理器管理后台服务(postgresql,es...)</p><ul><li>launchd 去特定的目录去加载启动配置文件. 制定规则</li><li>homebrew:生成/删除文件</li><li>postgresql:提供启动命令</li></ul></blockquote><ul><li>brew help services</li><li>[sudo] brew services [list]: 显示服务程序列表,及运行状态</li><li>[sudo] brew services run (formula|--all): 运行服务，但没有注册开机启动</li><li>[sudo] brew services start (formula|--all): 运行服务，同时注册开机启动</li><li>[sudo] brew services stop (formula|--all): 停止服务，并且删除开机启动</li><li>[sudo] brew services restart (formula|--all): 重启服务</li><li>[sudo] brew services cleanup: Remove all unused services.</li></ul><h3 id="和软件仓库Taps相关的命令"><a href="#和软件仓库Taps相关的命令" class="headerlink" title="和软件仓库Taps相关的命令"></a>和软件仓库Taps相关的命令</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvVGFwcw==">https://docs.brew.sh/Taps<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>Taps (Third-Party Repositories):软件集合的仓库</p></blockquote><ul><li>brew tap</li><li>brew untap</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew tap</span></span><br><span class="line">elastic/tap</span><br><span class="line">homebrew/cask</span><br><span class="line">homebrew/cask-versions</span><br><span class="line">homebrew/core</span><br><span class="line">homebrew/services</span><br></pre></td></tr></table></figure><p>homebrew/cask --&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hvbWVicmV3L2hvbWVicmV3LWNhc2s=">https://github.com/homebrew/homebrew-cask<i class="fa fa-external-link-alt"></i></span></p><p>Github: username/homebrew-tapname</p><p><strong>Elastic Stack</strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMvaG9tZWJyZXctdGFw">https://github.com/elastic/homebrew-tap<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap elastic/tap</span><br><span class="line">$ brew install elastic/tap/elasticsearch-full</span><br></pre></td></tr></table></figure><h3 id="和开发者相关的命令"><a href="#和开发者相关的命令" class="headerlink" title="和开发者相关的命令"></a>和开发者相关的命令</h3><p>...</p><h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><h3 id="安装的时候做了什么"><a href="#安装的时候做了什么" class="headerlink" title="安装的时候做了什么"></a>安装的时候做了什么</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><ul><li>curl 下载安装脚本</li><li>/bin/bash执行脚本<ol><li>检查系统及其版本</li><li>检查git有没有装</li><li>准备工作：目录创建，目录权限检查</li><li>检查CommandLineTools</li><li>用git下载Homebrew</li></ol></li></ul><h3 id="通过几个命令看看他干了什么"><a href="#通过几个命令看看他干了什么" class="headerlink" title="通过几个命令看看他干了什么"></a>通过几个命令看看他干了什么</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew search formula</span><br><span class="line">brew install formula</span><br><span class="line">brew cask install wechat</span><br><span class="line">brew update</span><br><span class="line">brew upgrade postgresql</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/WShiBin/pic-repo/master/20200614014551-homebrew_internal.png" alt=""></p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><h3 id="Homebrew相关的配置"><a href="#Homebrew相关的配置" class="headerlink" title="Homebrew相关的配置"></a>Homebrew相关的配置</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRm9ybXVsYS1Db29rYm9vayNob21lYnJldy10ZXJtaW5vbG9neQ==">https://docs.brew.sh/Formula-Cookbook#homebrew-terminology<i class="fa fa-external-link-alt"></i></span></p><ul><li>Homebrew程序安装位置：/usr/local/Homebrew/</li><li>Taps仓库位置：/usr/local/Homebrew/Library/Taps</li><li>Homebrew下载缓存的位置：~/Library/Caches/Homebrew</li><li>CMD程序的位置：/usr/local/Cellar</li><li>CMD程序创建链接文件位置：/usr/local/opt/</li><li>程序配置目录：/usr/local，~/.config，<code>查看相关软件文档</code></li></ul><h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><p><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==">清华大学<i class="fa fa-external-link-alt"></i></span> ，<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24v">中科大<i class="fa fa-external-link-alt"></i></span><strong>以网站上文档为准</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Homebrew 源</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew Core 源</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew Cask 源</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换后测试工作是否正常</span></span><br><span class="line">brew update -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Homebrew Bottles 源</span></span><br><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HOMEBREW_NO_AUTO_UPDATE=1</span><br></pre></td></tr></table></figure><h3 id="关闭匿名上传数据"><a href="#关闭匿名上传数据" class="headerlink" title="关闭匿名上传数据"></a>关闭匿名上传数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HOMEBREW_NO_ANALYTICS=1</span><br></pre></td></tr></table></figure><h2 id="创建自己的仓库和软件"><a href="#创建自己的仓库和软件" class="headerlink" title="创建自己的仓库和软件"></a>创建自己的仓库和软件</h2><p><strong>创建自己的仓库：</strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvSG93LXRvLUNyZWF0ZS1hbmQtTWFpbnRhaW4tYS1UYXA=">https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap<i class="fa fa-external-link-alt"></i></span></p><p>如果把tap仓库放在Github管理</p><p>brew tap user/repo<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VzZXIvaG9tZWJyZXctcmVwbw==">https://github.com/user/homebrew-repo<i class="fa fa-external-link-alt"></i></span></p><p><strong>创建自己的软件：</strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRm9ybXVsYS1Db29rYm9vaw==">https://docs.brew.sh/Formula-Cookbook<i class="fa fa-external-link-alt"></i></span></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRkFR">https://docs.brew.sh/FAQ<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gvVmVyc2lvbnM=">https://docs.brew.sh/Versions<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2hvbWVicmV3">https://stackoverflow.com/questions/tagged/homebrew<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="如何安装老版本软件："><a href="#如何安装老版本软件：" class="headerlink" title="如何安装老版本软件："></a>如何安装老版本软件：</h3><h4 id="大的老版本："><a href="#大的老版本：" class="headerlink" title="大的老版本："></a>大的老版本：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew search postgresql</span></span><br><span class="line">postgresql ✔                       postgresql@10                      postgresql@11</span><br><span class="line">postgresql@9.4                     postgresql@9.5                     postgresql@9.6</span><br></pre></td></tr></table></figure><h4 id="特定版本："><a href="#特定版本：" class="headerlink" title="特定版本："></a>特定版本：</h4><blockquote><p>通过git找到对应软件版本的安装文件</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew <span class="built_in">log</span> postgresql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core <span class="comment"># 切换到对应的软件仓库里面</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard bed9405b1f31ec884d4d047c294394873015f4a1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew uninstall postgresql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew upgrade postgresql</span></span><br></pre></td></tr></table></figure><p>搜索慢，还不</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Missing Package(软件) Manager for macOS (or Linux)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Mac/Linux缺失的软件包管理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App Store --&amp;gt; GUI,官方&lt;/li&gt;
&lt;li&gt;Homebrew --&amp;gt; CMD,第三方维护&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Homebrew" scheme="https://wshibin.github.io/tags/Homebrew/"/>
    
  </entry>
  
  <entry>
    <title>本站搭建相关文档</title>
    <link href="https://wshibin.github.io/%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/"/>
    <id>https://wshibin.github.io/%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/</id>
    <published>2020-05-01T13:41:23.000Z</published>
    <updated>2020-07-05T08:57:22.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写这篇文章是为了自己在修改本站时，方便查找相关文档</p></blockquote><p>本站基于：Hexo(Next主题) + Github Pages</p><a id="more"></a><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li>Hexo：<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv">doc<i class="fa fa-external-link-alt"></i></span></li><li>Next-theme：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">repo<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=">doc<i class="fa fa-external-link-alt"></i></span></li><li>Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dTaGlCaW4vd3NoaWJpbi5naXRodWIuaW8=">repo<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>相关常用命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo version                                <span class="comment"># version</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo --<span class="built_in">help</span>                                 <span class="comment"># help信息</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo sub_cmd                                <span class="comment"># 子命令help信息</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init [folder]                          <span class="comment"># 新建网站</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;                   <span class="comment"># 新建页面 layout:post(Default)/page/draft</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new page --path about/me <span class="string">"About me"</span>    <span class="comment"># Customize the path of the post</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo publish [layout] &lt;filename&gt;            <span class="comment"># publish draft</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo render file_name                       <span class="comment"># 把md文件渲染成html文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo list &lt;<span class="built_in">type</span>&gt;                            <span class="comment"># 显示网站相关信息types: page, post, route, tag, category</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server/s                               <span class="comment"># 本地运行</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate/g                             <span class="comment"># 生成网站</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy/d                               <span class="comment"># 部署</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean                                  <span class="comment"># 清理生成的网站和cache</span></span></span><br></pre></td></tr></table></figure><h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h2><p>相关网站源码参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC5vcmc=">theme-next.org<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/theme-next.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> theme-next.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh ./hexo-theme-next-autoinstall.sh</span></span><br></pre></td></tr></table></figure><p>主题update</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/next</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写这篇文章是为了自己在修改本站时，方便查找相关文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本站基于：Hexo(Next主题) + Github Pages&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://wshibin.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://wshibin.github.io/tags/Next/"/>
    
  </entry>
  
</feed>
