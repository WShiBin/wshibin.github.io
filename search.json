[{"title":"Github下载慢问题探究","url":"/Github%E4%B8%8B%E8%BD%BD%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/","content":"<blockquote>\n<p>公司对网络进行了限制,还不能开代理,Github下载的那个项目又非常大,后来对这个问题进行了思索,随记录下来</p>\n</blockquote>\n<p>git clone 经常是这样:17.00 KiB/s ???</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I] ➜ git clone http://github.com/git/git git_</span><br><span class=\"line\">Cloning into 'git'...</span><br><span class=\"line\">warning: redirecting to https://github.com/git/git/</span><br><span class=\"line\">remote: Enumerating objects: 289445, done.</span><br><span class=\"line\">Receiving objects:   0% (2548/289445), 1.14 MiB | 17.00 KiB/s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>抽象的归纳下,本质上是:下载一个资源慢的问题?</p>\n<p>那下载时间的长短取决于:<strong>网速+资源大小</strong></p>\n<a id=\"more\"></a>\n\n<h3 id=\"网速\"><a href=\"#网速\" class=\"headerlink\" title=\"网速:\"></a>网速:</h3><blockquote>\n<p>这里不考虑本地带宽,服务器资源带宽,p2p其它因素,这些因素影响没有那么大; </p>\n</blockquote>\n<p>明显Github的服务器部署在国外,这时候有两个主要的办法</p>\n<p><strong>代理:</strong>这个就不多解释了<br><strong>把仓库搬到国内:</strong>国内码云提供了相应的功能,一键将Github的repo迁移到国内,相关文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmdpdGVlLmNvbS8yMDE4LzA2LzA1L2dpdGh1Yl90b19naXRlZS8=\">https://blog.gitee.com/2018/06/05/github_to_gitee/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"资源大小\"><a href=\"#资源大小\" class=\"headerlink\" title=\"资源大小:\"></a>资源大小:</h3><p>如果是平时下载一个文件,下载一个小电影之类,这里就不用讨论了,但这里是下载的一个git仓库</p>\n<p>通常去github下载一个仓库会不加思索的:git clone url.没错,我以前就是这么干的. 这样带来什么问题,默认这样clone下来的是远程仓库的完整复制版本,带从项目创建到当前最后的提交,包括所以有远程分支.Tags</p>\n<p>不经想问:这都是你需要的吗? 对于大多数人的需求来说,答案都是否定的</p>\n<h4 id=\"Git-commit-branch模型\"><a href=\"#Git-commit-branch模型\" class=\"headerlink\" title=\"Git commit-branch模型\"></a>Git commit-branch模型</h4><img data-src=\"https://raw.githubusercontent.com/WShiBin/pic-repo/master/20200718235642.png\" style=\"zoom:80%;\" />\n\n<p>看完这张图,可能会说,我只想到v1.0这个版本的代码,其它有要不要无所谓; 这图并不是突显出问题,说个数据git源代码的仓库现在快有6W个commit次提交.</p>\n<p>其实git clone也提供了相应的选项: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">help</span> <span class=\"built_in\">clone</span></span><br><span class=\"line\">\t\t--depth &lt;depth&gt; <span class=\"comment\"># commit的个数,默认只clone一个分支 👍</span></span><br><span class=\"line\">\t\t--single-branch <span class=\"comment\"># clone单个分支</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>测试:</strong></p>\n<p>clone全部:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I] ➜ git clone --branch master http://github.com/git/git</span><br><span class=\"line\">Cloning into 'git'...</span><br><span class=\"line\">warning: redirecting to https://github.com/git/git/</span><br><span class=\"line\">remote: Enumerating objects: 289445, done.</span><br><span class=\"line\">remote: Total 289445 (delta 0), reused 0 (delta 0), pack-reused 289445</span><br><span class=\"line\">Receiving objects: 100% (289445/289445), 139.10 MiB | 999.00 KiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (215497/215497), done.</span><br><span class=\"line\">Updating files: 100% (3779/3779), done.</span><br></pre></td></tr></table></figure>\n\n<p>clone单个branch:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I] ➜ git clone --single-branch http://github.com/git/git git_single_branch</span><br><span class=\"line\">Cloning into 'git_single_branch'...</span><br><span class=\"line\">warning: redirecting to https://github.com/git/git/</span><br><span class=\"line\">remote: Enumerating objects: 776, done.</span><br><span class=\"line\">remote: Counting objects: 100% (770/770), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (770/770), done.</span><br><span class=\"line\">remote: Total 281961 (delta 0), reused 770 (delta 0), pack-reused 281191</span><br><span class=\"line\">Receiving objects: 100% (281961/281961), 134.84 MiB | 1.53 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (210884/210884), done.</span><br><span class=\"line\">Updating files: 100% (3779/3779), done.</span><br></pre></td></tr></table></figure>\n\n<p>clone单个commit:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I] ➜ git clone --depth 1 http://github.com/git/git git_depth</span><br><span class=\"line\">Cloning into 'git_depth'...</span><br><span class=\"line\">warning: redirecting to https://github.com/git/git/</span><br><span class=\"line\">remote: Enumerating objects: 3872, done.</span><br><span class=\"line\">remote: Counting objects: 100% (3872/3872), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3465/3465), done.</span><br><span class=\"line\">remote: Total 3872 (delta 325), reused 1877 (delta 250), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (3872/3872), 9.13 MiB | 660.00 KiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (325/325), done.</span><br></pre></td></tr></table></figure>\n\n<p>139.10 MiB --&gt; 9.13 MiB下载的代码从139MB降低到了9MB, nice</p>\n<h4 id=\"项目为什么这么大\"><a href=\"#项目为什么这么大\" class=\"headerlink\" title=\"项目为什么这么大?\"></a>项目为什么这么大?</h4><p>这时候看下这个项目目录大小, 55M ??? 不是说好的9M吗?</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I] ➜ du -hs ./git_depth</span><br><span class=\"line\"> 55M\t../git_depth</span><br></pre></td></tr></table></figure>\n\n<p>git clone的时候其实是一系列的操作:先把远程的repo拉到本地仓库,然后把mater分支从本地仓库checkout出来,所以checkout出来的代码不会算做下载的大小.查看.git及目录的大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I] ➜ du -hd1 .git</span><br><span class=\"line\"> 10M\t.git/objects</span><br><span class=\"line\">4.0K\t.git/info</span><br><span class=\"line\"> 12K\t.git/logs</span><br><span class=\"line\"> 52K\t.git/hooks</span><br><span class=\"line\"> 12K\t.git/refs</span><br><span class=\"line\"> 11M\t.git</span><br></pre></td></tr></table></figure>\n\n<p>看上去差不多了.<br>压缩:40M的代码 --&gt; 9M仓库里面 </p>\n<h4 id=\"实际的应用场景\"><a href=\"#实际的应用场景\" class=\"headerlink\" title=\"实际的应用场景\"></a>实际的应用场景</h4><ul>\n<li>只要最新的:depth 1</li>\n<li>需要特定tag:向前推几十个</li>\n<li>看源码:全量下载</li>\n</ul>\n","categories":["Git"],"tags":["Github","Git"]},{"title":"译文:Googletest Primer","url":"/Googletest-Primer/","content":"<p>文档:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nb29nbGV0ZXN0L2Jsb2IvbWFzdGVyL2dvb2dsZXRlc3QvZG9jcy9wcmltZXIubWQ=\">https://github.com/google/googletest/blob/master/googletest/docs/primer.md<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"简介-为什么要使用googletest\"><a href=\"#简介-为什么要使用googletest\" class=\"headerlink\" title=\"简介:为什么要使用googletest?\"></a>简介:为什么要使用googletest?</h2><p><em>googletest</em>能帮助你写更好的C++测试代码.</p>\n<p>googletest是由测试技术团队根据Google的特定要求和约束来开发的测试框架. 不管你是在Linux,windows,还是Mac上工作,如果你写C++代码, googletest能帮助到你,它能支持运行任何类型的测试,不仅仅是支持unit tests.</p>\n<a id=\"more\"></a>\n\n<p>那么什么是一个好的测试,以及googletest是如何做到这些的? 我们相信:</p>\n<ol>\n<li>测试应该是独立和重复的.调试一个成功或是失败做其它测试的结果是一件很痛苦的事.googletest通过让他们运行在不同的object上来隔离它们.当一个测试fails,googletest允许你在单独的运行它进行快速调试</li>\n<li>测试应该组织得井井有条,并能反映出测试代码的结构.googletest将相关的测试分组到能共享数据和子程序的测试大几中,这个觉的落木模式让识别,并且使得测试易于维护.当人们切换项目,在新的代码仓库开始工作,这种一致性会非常的有用</li>\n<li>测试应该是可移植和可重复使用的.Google有很多和平台无关的代码,它们的测试也应该是和平台无关的.googletest能使用不同的编译器,使用或不使用异常,工作在不同的系统上.所以googletest能使用多种配置工作</li>\n<li>当测试失败,它们应该提供尽可能多的关于问题的信息.googletest不会在当第一个测试失败的时候停止,相反,它仅仅停止当前的测试,并会继续下一个测试,同时你也可以配置报告没有致命故障的测试,然后进行当前的测试.因此,你能在单个run-edit-compile循环中检测和修复多个bug.</li>\n<li>测试框架应该让测试者从乱七八糟的事情中解放出来,并专注于测试内容上.googletest会自动的跟踪所有的测试,并且不需要用户去列举他们,即可运行他们</li>\n<li>测试应该是非常快的.使用googletest,你能在不同的测试之间共享数据,这些只需要配置/拆卸一次,而不需要让测试相互依赖</li>\n</ol>\n<p>由于googletest基于流行的xUnit架构,如果你以前已经使用过JUnit或是PyUnit,你会感到宾至如归.如果没有使用过,它会话费大约10分钟去学习基础,然后开始</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>当使用googletest,开始编写检查条件是不是真的<em>断言</em>,一个<em>断言</em>的结果可能是成功,非致命的故障,或是致命的故障.如果一个致命的故障出现了,它会终止当前的函数;反之,他会正常的继续运行</p>\n<p>测试使用断言来验证用户的行为.如果测试崩溃或是有一个失败的断言,则这个测试失败了,反之这个测试成功了</p>\n<p><em>Tests</em> use assertions to verify the tested code&#39;s behavior. If a test crashes or has a failed assertion, then it <em>fails</em>; otherwise it <em>succeeds</em>.</p>\n<p>A <em>test suite</em> contains one or many tests. You should group your tests into test suites that reflect the structure of the tested code. When multiple tests in a test suite need to share common objects and subroutines, you can put them into a <em>test fixture</em> class.</p>\n<p>A <em>test program</em> can contain multiple test suites.</p>\n<p>We&#39;ll now explain how to write a test program, starting at the individual assertion level and building up to tests and test suites.</p>\n","categories":["Test"],"tags":["Test","googletest"]},{"title":"理解命令行程序","url":"/Understand-Command-Line-Programming/","content":"<blockquote>\n<p>本来是不想写这篇文章的,在写<code>理解Git</code>的时候,发现关于命令行的知识点一两句讲不完,就间单独来写一篇文章,就有了你看到的</p>\n</blockquote>\n<blockquote>\n<p> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTIyNDc2ODYw\">Hacker News<i class=\"fa fa-external-link-alt\"></i></span></strong>上有一个关于man手册的讨论非常有意思:<strong>对于Gui程序,界面可以去指导/指示用户去如何使用程序;而对于命令行的程序你必需去阅读man手册才能了解如何去使用它,所以应该把命令行的man手册视为命令行程序的一部分</strong></p>\n</blockquote>\n<p><strong>命令行程序</strong>: 程序 + 手册</p>\n<a id=\"more\"></a>\n\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><h2 id=\"手册\"><a href=\"#手册\" class=\"headerlink\" title=\"手册\"></a>手册</h2><p><strong>如果去查看一个命令行的帮助手册</strong></p>\n<ul>\n<li>包括哪些部分</li>\n<li>SYNOPSIS中的语法含义<ul>\n<li><code>[...]</code>:可选</li>\n<li><code>a|b</code>:二选一</li>\n<li><code>&lt;command&gt;</code>:强制一定要写</li>\n</ul>\n</li>\n</ul>\n","categories":["CMD"],"tags":["help","manual"]},{"title":"理解 Git","url":"/Understand-Git/","content":"<blockquote>\n<p>Git的学习曲线和难度相对较高,理解内部的原理和一些核心概念对使用git帮助极大</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"Git学习的难度在哪里？\"><a href=\"#Git学习的难度在哪里？\" class=\"headerlink\" title=\"Git学习的难度在哪里？\"></a>Git学习的难度在哪里？</h2><p><strong>命令多</strong>:tab键一个就200多个,选项更多</p>\n<p><strong>一个命令多种用途</strong>:add命令</p>\n<ul>\n<li>跟踪文件</li>\n<li>添加到暂存区</li>\n<li>修改冲突文件后,用add来标记这个冲突已经解决</li>\n</ul>\n<p><strong>有些命令是组合命令</strong>:一个命令可以包含多个命令（隐藏操作）</p>\n<p><strong>如果不明白原理,可以文档都看不懂</strong>:git help push</p>\n<h2 id=\"认识Git仓库-git目录\"><a href=\"#认识Git仓库-git目录\" class=\"headerlink\" title=\"认识Git仓库.git目录\"></a>认识Git仓库.git目录</h2><h2 id=\"Git的工作模型？\"><a href=\"#Git的工作模型？\" class=\"headerlink\" title=\"Git的工作模型？\"></a>Git的工作模型？</h2><ul>\n<li>Untrack -- Unmodified -- Modified -- Staged </li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1CYXNpY3MtUmVjb3JkaW5nLUNoYW5nZXMtdG8tdGhlLVJlcG9zaXRvcnk=\">https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://git-scm.com/book/en/v2/images/lifecycle.png\" alt=\"The lifecycle of the status of your files.\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1CcmFuY2hpbmctQnJhbmNoZXMtaW4tYS1OdXRzaGVsbA==\">https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://git-scm.com/book/en/v2/images/branch-and-history.png\" alt=\"A branch and its commit history.\"></p>\n<p><img data-src=\"https://git-scm.com/book/en/v2/images/commit-and-tree.png\" alt=\"A commit and its tree.\"></p>\n<p><strong>git中的三大对象objects</strong></p>\n<ul>\n<li>commit object:保存提交信息(项目快照,时间,作者,备注)</li>\n<li>tree object:目录</li>\n<li>blob:文件</li>\n</ul>\n<h2 id=\"Git中的HEAD指的是什么？\"><a href=\"#Git中的HEAD指的是什么？\" class=\"headerlink\" title=\"Git中的HEAD指的是什么？\"></a>Git中的HEAD指的是什么？</h2><ul>\n<li>文件存储位置./.git/HEAD(linux:一切皆文件)</li>\n<li>指向的是分支,而分支是指向当前分支的最后一个commit</li>\n<li>代表当前工作目录中的文件是基于哪个commit的</li>\n</ul>\n<h2 id=\"Git保存的是文件的修改还是文件的全部内容？\"><a href=\"#Git保存的是文件的修改还是文件的全部内容？\" class=\"headerlink\" title=\"Git保存的是文件的修改还是文件的全部内容？\"></a>Git保存的是文件的修改还是文件的全部内容？</h2><blockquote>\n<p>保存文件的全部内容</p>\n</blockquote>\n<h2 id=\"Git是如何管理存储文件的？\"><a href=\"#Git是如何管理存储文件的？\" class=\"headerlink\" title=\"Git是如何管理存储文件的？\"></a>Git是如何管理存储文件的？</h2><blockquote>\n<p>对文件内容进行hash,用于目录和文件名,内容进行二进制缩,存储在.git/objecs目录下</p>\n</blockquote>\n<h2 id=\"Git新建分支为什么非常的快？\"><a href=\"#Git新建分支为什么非常的快？\" class=\"headerlink\" title=\"Git新建分支为什么非常的快？\"></a>Git新建分支为什么非常的快？</h2><blockquote>\n<p>它不需要拷贝当前项目的所有文件,它只需要基于commit新建几个文件</p>\n</blockquote>\n<h2 id=\"Git中隐藏的操作\"><a href=\"#Git中隐藏的操作\" class=\"headerlink\" title=\"Git中隐藏的操作\"></a>Git中隐藏的操作</h2><ul>\n<li>gc打包</li>\n<li>zlib压缩</li>\n</ul>\n<p>hash-object</p>\n<p>References:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2Nz\">https://git-scm.com/docs<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1JbnRlcm5hbHMtUGx1bWJpbmctYW5kLVBvcmNlbGFpbg==\">https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi90ZWNobmljYWw=\">https://github.com/git/git/blob/master/Documentation/technical<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vcmVzdWx0cz9zZWFyY2hfcXVlcnk9Z2l0K2ludGVybmFs\">https://www.youtube.com/results?search_query=git+internal<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taW5jb25nLmlvLzIwMTgvMDQvMjgvZ2l0LWluZGV4Lw==\">https://mincong.io/2018/04/28/git-index/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Git"],"tags":["git"]},{"title":"Homebrew上手","url":"/Homebrew/","content":"<h2 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h2><blockquote>\n<p><strong>The Missing Package(软件) Manager for macOS (or Linux)</strong></p>\n</blockquote>\n<p>在Mac/Linux缺失的软件包管理器</p>\n<ul>\n<li>App Store --&gt; GUI,官方</li>\n<li>Homebrew --&gt; CMD,第三方维护</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要用它？\"><a href=\"#为什么要用它？\" class=\"headerlink\" title=\"为什么要用它？\"></a>为什么要用它？</h2><p><strong>Apple自己家的App Store</strong>:</p>\n<ul>\n<li>只能下载最新版的软件</li>\n<li>开发者发交钱。注册苹果开发者账号，几百的年费</li>\n<li>上传一个程序需要经过苹果公司的审核（尤其是第一次上传一个新的软件，有的甚至会等几个月）</li>\n<li>没有命令行和服务类程序下载，管理</li>\n</ul>\n<h2 id=\"怎么用？\"><a href=\"#怎么用？\" class=\"headerlink\" title=\"怎么用？\"></a>怎么用？</h2><h3 id=\"Install安装\"><a href=\"#Install安装\" class=\"headerlink\" title=\"Install安装\"></a>Install安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>既然Homebrew和App store的作用是类似的，就来类比来学习这款软件的使用</p>\n</blockquote>\n<h3 id=\"App-store有什么样的功能\"><a href=\"#App-store有什么样的功能\" class=\"headerlink\" title=\"App store有什么样的功能\"></a>App store有什么样的功能</h3><p><strong>用户的角度</strong></p>\n<ul>\n<li>搜索软件</li>\n<li>查看软件信息</li>\n<li>安装软件</li>\n<li>更新软件</li>\n<li>安装了哪些软件</li>\n<li>卸载</li>\n</ul>\n<p><strong>开发者、管理者</strong></p>\n<ul>\n<li>上传软件包，提交相交信息</li>\n<li>文件服务器</li>\n</ul>\n<h3 id=\"和Hombrew相关的命令\"><a href=\"#和Hombrew相关的命令\" class=\"headerlink\" title=\"和Hombrew相关的命令\"></a>和Hombrew相关的命令</h3><ul>\n<li>brew help: 查看brew的帮助文档</li>\n<li>brew help sub_cmd: 查看brew子命令的帮助文档</li>\n<li>brew home：转跳到Homebrew的官网</li>\n<li>brew config: 查看Homebrew配置</li>\n<li>brew commands: 查看Homebrew有哪些命令</li>\n<li>brew list: 查看通过brew装了哪些软件</li>\n<li>brew info: 装了多少软件，有多少个文件，占用多少空间</li>\n<li>brew update: 更新Homebrew软件</li>\n<li>brew cleanup: 清理</li>\n<li>brew outdatad: 查看有哪些已经的软件有新版本</li>\n<li><strong>brew doctor</strong>: 检查你系统中可能存在的问题</li>\n<li>brew --version: Homebrew版本</li>\n<li>brew --repo: Homebrew仓库位置</li>\n<li>brew --cache: Homebrew下载软件的缓存位置</li>\n<li>brew --cellar: Homebrew安装CMD软件的位置</li>\n</ul>\n<h3 id=\"和安装CMD软件相关的命令\"><a href=\"#和安装CMD软件相关的命令\" class=\"headerlink\" title=\"和安装CMD软件相关的命令\"></a>和安装CMD软件相关的命令</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvQm90dGxlcw==\">https://docs.brew.sh/Bottles<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p><strong>Bottle</strong>:</p>\n</blockquote>\n<ul>\n<li>brew search formula: 搜索某个软件</li>\n<li>brew info formula: 查看软件的info</li>\n<li>brew home formula: 转跳到对应软件主页</li>\n<li>brew install formula: 安装软件</li>\n<li>brew upgrade formula: 更新软件</li>\n<li>brew reinstall formula: 重装软件</li>\n<li>brew uninstall formula: 卸载软件</li>\n<li>brew fetch formula: 下载，不安装</li>\n<li>brew deps formula: 查看软件依赖的相关软件</li>\n<li>brew pin formula: 锁定软件版本，防止upgrade的时候更新软件</li>\n<li>brew unpin formula: 解除锁定，和上面相反</li>\n<li>brew log formula：查看软件的更新日志log</li>\n</ul>\n<h3 id=\"和安装macOS-native-apps相关的命令\"><a href=\"#和安装macOS-native-apps相关的命令\" class=\"headerlink\" title=\"和安装macOS native apps相关的命令\"></a>和安装macOS native apps相关的命令</h3><blockquote>\n<p>Cask: 用来安装Mac native apps(GUI:有界面)</p>\n</blockquote>\n<ul>\n<li>brew help cask: 查看相关cask的帮助文档</li>\n<li>brew cask home formula: 转跳到对应软件主页</li>\n<li>brew cask info formula: 相关info</li>\n<li>brew cask list: list</li>\n<li>brew cask install formula</li>\n<li>brew cask upgrade formula</li>\n<li>brew cask reinstall formula</li>\n<li>brew cask uninstall formula</li>\n<li>brew cask fetch formula: 下载，不安装</li>\n<li>brew cask outdated formula: 查看有哪些已经的软件有新版本</li>\n<li>brew cask zap formula: 删除和软件相关的所有文件</li>\n</ul>\n<h3 id=\"和Service相关的命令\"><a href=\"#和Service相关的命令\" class=\"headerlink\" title=\"和Service相关的命令\"></a>和Service相关的命令</h3><blockquote>\n<p>使用macOS的launchctl（1）守护程序管理器管理后台服务(postgresql,es...)</p>\n<ul>\n<li>launchd 去特定的目录去加载启动配置文件. 制定规则</li>\n<li>homebrew:生成/删除文件</li>\n<li>postgresql:提供启动命令</li>\n</ul>\n</blockquote>\n<ul>\n<li>brew help services</li>\n<li>[sudo] brew services [list]: 显示服务程序列表,及运行状态</li>\n<li>[sudo] brew services run (formula|--all): 运行服务，但没有注册开机启动</li>\n<li>[sudo] brew services start (formula|--all): 运行服务，同时注册开机启动</li>\n<li>[sudo] brew services stop (formula|--all): 停止服务，并且删除开机启动</li>\n<li>[sudo] brew services restart (formula|--all): 重启服务</li>\n<li>[sudo] brew services cleanup: Remove all unused services.</li>\n</ul>\n<h3 id=\"和软件仓库Taps相关的命令\"><a href=\"#和软件仓库Taps相关的命令\" class=\"headerlink\" title=\"和软件仓库Taps相关的命令\"></a>和软件仓库Taps相关的命令</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvVGFwcw==\">https://docs.brew.sh/Taps<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>Taps (Third-Party Repositories):软件集合的仓库</p>\n</blockquote>\n<ul>\n<li>brew tap</li>\n<li>brew untap</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew tap</span></span><br><span class=\"line\">elastic/tap</span><br><span class=\"line\">homebrew/cask</span><br><span class=\"line\">homebrew/cask-versions</span><br><span class=\"line\">homebrew/core</span><br><span class=\"line\">homebrew/services</span><br></pre></td></tr></table></figure>\n\n<p>homebrew/cask --&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hvbWVicmV3L2hvbWVicmV3LWNhc2s=\">https://github.com/homebrew/homebrew-cask<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Github: username/homebrew-tapname</p>\n<p><strong>Elastic Stack</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMvaG9tZWJyZXctdGFw\">https://github.com/elastic/homebrew-tap<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew tap elastic/tap</span><br><span class=\"line\">$ brew install elastic/tap/elasticsearch-full</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"和开发者相关的命令\"><a href=\"#和开发者相关的命令\" class=\"headerlink\" title=\"和开发者相关的命令\"></a>和开发者相关的命令</h3><p>...</p>\n<h2 id=\"内部原理\"><a href=\"#内部原理\" class=\"headerlink\" title=\"内部原理\"></a>内部原理</h2><h3 id=\"安装的时候做了什么\"><a href=\"#安装的时候做了什么\" class=\"headerlink\" title=\"安装的时候做了什么\"></a>安装的时候做了什么</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>curl 下载安装脚本</li>\n<li>/bin/bash执行脚本<ol>\n<li>检查系统及其版本</li>\n<li>检查git有没有装</li>\n<li>准备工作：目录创建，目录权限检查</li>\n<li>检查CommandLineTools</li>\n<li>用git下载Homebrew</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"通过几个命令看看他干了什么\"><a href=\"#通过几个命令看看他干了什么\" class=\"headerlink\" title=\"通过几个命令看看他干了什么\"></a>通过几个命令看看他干了什么</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew search formula</span><br><span class=\"line\">brew install formula</span><br><span class=\"line\">brew cask install wechat</span><br><span class=\"line\">brew update</span><br><span class=\"line\">brew upgrade postgresql</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://raw.githubusercontent.com/WShiBin/pic-repo/master/20200614014551-homebrew_internal.png\" alt=\"\"></p>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><h3 id=\"Homebrew相关的配置\"><a href=\"#Homebrew相关的配置\" class=\"headerlink\" title=\"Homebrew相关的配置\"></a>Homebrew相关的配置</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRm9ybXVsYS1Db29rYm9vayNob21lYnJldy10ZXJtaW5vbG9neQ==\">https://docs.brew.sh/Formula-Cookbook#homebrew-terminology<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>Homebrew程序安装位置：/usr/local/Homebrew/</li>\n<li>Taps仓库位置：/usr/local/Homebrew/Library/Taps</li>\n<li>Homebrew下载缓存的位置：~/Library/Caches/Homebrew</li>\n<li>CMD程序的位置：/usr/local/Cellar</li>\n<li>CMD程序创建链接文件位置：/usr/local/opt/</li>\n<li>程序配置目录：/usr/local，~/.config，<code>查看相关软件文档</code></li>\n</ul>\n<h3 id=\"更换源\"><a href=\"#更换源\" class=\"headerlink\" title=\"更换源\"></a>更换源</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==\">清华大学<i class=\"fa fa-external-link-alt\"></i></span> ，<span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24v\">中科大<i class=\"fa fa-external-link-alt\"></i></span><strong>以网站上文档为准</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Homebrew 源</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Homebrew Core 源</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Homebrew Cask 源</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更换后测试工作是否正常</span></span><br><span class=\"line\">brew update -v</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Homebrew Bottles 源</span></span><br><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zsh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭自动更新\"><a href=\"#关闭自动更新\" class=\"headerlink\" title=\"关闭自动更新\"></a>关闭自动更新</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_AUTO_UPDATE=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭匿名上传数据\"><a href=\"#关闭匿名上传数据\" class=\"headerlink\" title=\"关闭匿名上传数据\"></a>关闭匿名上传数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_ANALYTICS=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建自己的仓库和软件\"><a href=\"#创建自己的仓库和软件\" class=\"headerlink\" title=\"创建自己的仓库和软件\"></a>创建自己的仓库和软件</h2><p><strong>创建自己的仓库：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvSG93LXRvLUNyZWF0ZS1hbmQtTWFpbnRhaW4tYS1UYXA=\">https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>如果把tap仓库放在Github管理</p>\n<p>brew tap user/repo<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3VzZXIvaG9tZWJyZXctcmVwbw==\">https://github.com/user/homebrew-repo<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>创建自己的软件：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRm9ybXVsYS1Db29rYm9vaw==\">https://docs.brew.sh/Formula-Cookbook<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRkFR\">https://docs.brew.sh/FAQ<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvVmVyc2lvbnM=\">https://docs.brew.sh/Versions<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2hvbWVicmV3\">https://stackoverflow.com/questions/tagged/homebrew<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"如何安装老版本软件：\"><a href=\"#如何安装老版本软件：\" class=\"headerlink\" title=\"如何安装老版本软件：\"></a>如何安装老版本软件：</h3><h4 id=\"大的老版本：\"><a href=\"#大的老版本：\" class=\"headerlink\" title=\"大的老版本：\"></a>大的老版本：</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew search postgresql</span></span><br><span class=\"line\">postgresql ✔                       postgresql@10                      postgresql@11</span><br><span class=\"line\">postgresql@9.4                     postgresql@9.5                     postgresql@9.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特定版本：\"><a href=\"#特定版本：\" class=\"headerlink\" title=\"特定版本：\"></a>特定版本：</h4><blockquote>\n<p>通过git找到对应软件版本的安装文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew <span class=\"built_in\">log</span> postgresql</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core \t\t<span class=\"comment\"># 切换到对应的软件仓库里面</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard bed9405b1f31ec884d4d047c294394873015f4a1</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew uninstall postgresql</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install postgresql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew upgrade postgresql</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>搜索慢，还不</p>\n","tags":["Homebrew"]},{"title":"本站搭建相关文档","url":"/%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/","content":"<blockquote>\n<p>写这篇文章是为了自己在修改本站时，方便查找相关文档</p>\n</blockquote>\n<p>本站基于：Hexo(Next主题) + Github Pages</p>\n<a id=\"more\"></a>\n\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><ul>\n<li>Hexo：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">doc<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Next-theme：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0\">repo<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=\">doc<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Github：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dTaGlCaW4vd3NoaWJpbi5naXRodWIuaW8=\">repo<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>相关常用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo version                                <span class=\"comment\"># version</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo --<span class=\"built_in\">help</span>                                 <span class=\"comment\"># help信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo sub_cmd                                <span class=\"comment\"># 子命令help信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init [folder]                          <span class=\"comment\"># 新建网站</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new [layout] &lt;title&gt;                   <span class=\"comment\"># 新建页面 layout:post(Default)/page/draft</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new page --path about/me <span class=\"string\">\"About me\"</span>    <span class=\"comment\"># Customize the path of the post</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo publish [layout] &lt;filename&gt;            <span class=\"comment\"># publish draft</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo render file_name                       <span class=\"comment\"># 把md文件渲染成html文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo list &lt;<span class=\"built_in\">type</span>&gt;                            <span class=\"comment\"># 显示网站相关信息types: page, post, route, tag, category</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo server/s                               <span class=\"comment\"># 本地运行</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo generate/g                             <span class=\"comment\"># 生成网站</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo deploy/d                               <span class=\"comment\"># 部署</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo clean                                  <span class=\"comment\"># 清理生成的网站和cache</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><p>相关网站源码参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC5vcmc=\">theme-next.org<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next.org</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> theme-next.org</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh ./hexo-theme-next-autoinstall.sh</span></span><br></pre></td></tr></table></figure>\n\n<p>主题update</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> themes/next</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull</span></span><br></pre></td></tr></table></figure>\n\n","tags":["Hexo","Next"]},{"title":"404","url":"//404.html","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">404</span><br><span class=\"line\">\tnot</span><br><span class=\"line\">\t\tfound</span><br><span class=\"line\">\t\t\t4444      4444    0000000000    4444      4444</span><br><span class=\"line\">\t\t\t4444      4444  00000000000000  4444      4444</span><br><span class=\"line\">\t\t\t4444      4444  0000      0000  4444      4444</span><br><span class=\"line\">\t\t\t44444444444444  0000      0000  44444444444444</span><br><span class=\"line\">\t\t\t 4444444444444  0000      0000   4444444444444</span><br><span class=\"line\">\t\t\t          4444  0000      0000            4444</span><br><span class=\"line\">\t\t\t          4444  0000      0000            4444</span><br><span class=\"line\">\t\t\t          4444  00000000000000            4444</span><br><span class=\"line\">\t\t\t          4444    0000000000              4444</span><br><span class=\"line\">\t\tnot</span><br><span class=\"line\">\tfound</span><br><span class=\"line\">404</span><br></pre></td></tr></table></figure>\n"},{"url":"/crowdin.json","content":"{\"files\":[{\"source\":\"/source/**/*.md\",\"ignore\":[\"/source/_posts/*\"],\"translation\":\"/source/%two_letters_code%/**/%original_file_name%\"}]}"},{"url":"/rust/11.%20Writing%20Automated%20Tests.html","content":""},{"url":"/rust/14.%20More%20about%20Cargo%20and%20Crates.io.html","content":""},{"url":"/rust/5.%20Using%20Structs%20to%20Structure%20Related%20Data.html","content":""},{"url":"/PostgreSQL/index.html","content":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">brew services start postgresql</span><br><span class=\"line\">pg_ctl -D /usr/local/var/postgres start</span><br><span class=\"line\"></span><br><span class=\"line\">psql -U [user] -d [database] -h [host] -p [post] </span><br><span class=\"line\">psql -U Ben -d postgres</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> default post: 5432</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 相关命令</span></span><br><span class=\"line\">\\password：设置当前登录用户的密码</span><br><span class=\"line\">\\h：查看SQL命令的解释，比如\\h select。</span><br><span class=\"line\">\\?：查看psql命令列表。</span><br><span class=\"line\">\\l：列出所有数据库。</span><br><span class=\"line\">\\c [database_name]：连接其他数据库。</span><br><span class=\"line\">\\d：列出当前数据库的所有表格。</span><br><span class=\"line\">\\d [table_name]：列出某一张表格的结构。</span><br><span class=\"line\">\\du：列出所有用户。</span><br><span class=\"line\">\\e：打开文本编辑器。</span><br><span class=\"line\">\\conninfo：列出当前数据库和连接的信息。</span><br><span class=\"line\">\\password [user]: 修改用户密码</span><br><span class=\"line\">\\q：退出</span><br><span class=\"line\">\\i sql_file</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> createdb mydb</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dropdb mydb</span></span><br></pre></td></tr></table></figure>\n\n<p>重新加载配置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- reload config, 不用重启</span></span><br><span class=\"line\">pg_ctl reload -D your_data_directory_here</span><br><span class=\"line\">service postgresql reload <span class=\"comment\"># centos,ubuntu</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_reload_conf();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>连接管理</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> pg_stat_activity;</span><br><span class=\"line\"><span class=\"comment\">-- 取消,不会终止连接</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_cancel_backend(pid);</span><br><span class=\"line\"><span class=\"comment\">-- 终止连接</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_terminate_backend(pid);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>schema</p>\n<p>对数据进行分组. 基于角色的管理</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> my_extensions;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>权限管理</p>\n<p>对象级权限:select, insert, udpate, alter, execute, truncate</p>\n<h3 id=\"行构造器\"><a href=\"#行构造器\" class=\"headerlink\" title=\"行构造器\"></a>行构造器</h3><p>一个行构造器是能够构建一个行值（也称作一个组合类型）并用值作为其成员域的表达式。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">ROW</span>(<span class=\"number\">1</span>,<span class=\"number\">2.5</span>,<span class=\"string\">'this is a test'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-4-约束\"><a href=\"#5-4-约束\" class=\"headerlink\" title=\"5.4. 约束\"></a>5.4. 约束</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1jb25zdHJhaW50cy5odG1sI0RETC1DT05TVFJBSU5UUy1DSEVDSy1DT05TVFJBSU5UUw==\">5.4.1. 检查约束<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span> <span class=\"keyword\">CHECK</span> (price &gt; <span class=\"number\">0</span>) <span class=\"comment\">-- 检查约束</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span> <span class=\"keyword\">CONSTRAINT</span> positive_price <span class=\"keyword\">CHECK</span> (price &gt; <span class=\"number\">0</span>) <span class=\"comment\">-- 别名</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span> <span class=\"keyword\">CHECK</span> (price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    discounted_price <span class=\"built_in\">numeric</span> <span class=\"keyword\">CHECK</span> (discounted_price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (price &gt; discounted_price) <span class=\"comment\">-- 引用多个列</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 也可以写成:</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span>,</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    discounted_price <span class=\"built_in\">numeric</span>,</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (discounted_price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (price &gt; discounted_price)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 同上:</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span> <span class=\"keyword\">CHECK</span> (price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    discounted_price <span class=\"built_in\">numeric</span>,</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (discounted_price &gt; <span class=\"number\">0</span> <span class=\"keyword\">AND</span> price &gt; discounted_price)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表约束改列约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span>,</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    discounted_price <span class=\"built_in\">numeric</span>,</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (discounted_price &gt; <span class=\"number\">0</span>),</span><br><span class=\"line\">    <span class=\"keyword\">CONSTRAINT</span> valid_discount <span class=\"keyword\">CHECK</span> (price &gt; discounted_price)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1jb25zdHJhaW50cy5odG1sI2lkLTEuNS40LjYuNg==\">5.4.2. 非空约束<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1jb25zdHJhaW50cy5odG1sI0RETC1DT05TVFJBSU5UUy1VTklRVUUtQ09OU1RSQUlOVFM=\">5.4.3. 唯一约束<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>唯一约束保证\\在一列中或者一组列中保存的数据在表中所有行间是唯一的</p>\n<p>唯一约束会在约束中列出的列或列组上自动创建一个唯一B-tree索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span>,</span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> (product_no)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> example (</span><br><span class=\"line\">    a <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    b <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    c <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> (a, c)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 唯一索引命名</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">CONSTRAINT</span> must_be_different <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Note:两个空值被认为是不同的</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1jb25zdHJhaW50cy5odG1sI0RETC1DT05TVFJBSU5UUy1QUklNQVJZLUtFWVM=\">5.4.4. 主键<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>主键约束表示可以用作表中行的唯一标识符的一个列或者一组列</p>\n<p>一个主键将自动在主键中列出的列或列组上创建一个唯一B-tree索引。并且会强制这些列被标记为<code>NOT NULL</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多个列</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> example (</span><br><span class=\"line\">    a <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    b <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    c <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (a, c)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1jb25zdHJhaW50cy5odG1sI0RETC1DT05TVFJBSU5UUy1GSw==\">5.4.5. 外键<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>一个外键约束指定一列（或一组列）中的值必须匹配出现在另一个表中某些行的值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> orders (</span><br><span class=\"line\">    order_id <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> products (product_no), <span class=\"comment\">-- 外键 </span></span><br><span class=\"line\">    quantity <span class=\"built_in\">integer</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 简写</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> orders (</span><br><span class=\"line\">    order_id <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> products, <span class=\"comment\">-- 简写</span></span><br><span class=\"line\">    quantity <span class=\"built_in\">integer</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t1 (</span><br><span class=\"line\">  a <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">  b <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">  c <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">  <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (b, c) <span class=\"keyword\">REFERENCES</span> other_table (c1, c2)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果被引用的表数据被删除怎么办?</span></span><br><span class=\"line\"><span class=\"comment\">-- \t* 不允许删除一个被引用的产品</span></span><br><span class=\"line\"><span class=\"comment\">--  * 同时也删除引用产品的订单</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    price <span class=\"built_in\">numeric</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> orders (</span><br><span class=\"line\">    order_id <span class=\"built_in\">integer</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    shipping_address <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> order_items (</span><br><span class=\"line\">    product_no <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> products <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> RESTRICT, \t<span class=\"comment\">-- 限制删除: 阻止删除一个被引用的行</span></span><br><span class=\"line\">    order_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> orders <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">CASCADE</span>, \t\t\t<span class=\"comment\">-- 级联删除: 当一个被引用行被删除后，引用它的行也应该被自动删除</span></span><br><span class=\"line\">    quantity <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (product_no, order_id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1jb25zdHJhaW50cy5odG1sI0RETC1DT05TVFJBSU5UUy1FWENMVVNJT04=\">5.4.6. 排他约束<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>排他约束保证如果将任何两行的指定列或表达式使用指定操作符进行比较，至少其中一个操作符比较将会返回否或空值</p>\n<p>增加一个排他约束将在约束声明所指定的类型上自动创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> circles (</span><br><span class=\"line\">    c circle,</span><br><span class=\"line\">    <span class=\"keyword\">EXCLUDE</span> <span class=\"keyword\">USING</span> gist (c <span class=\"keyword\">WITH</span> &amp;&amp;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-6-修改表\"><a href=\"#5-6-修改表\" class=\"headerlink\" title=\"5.6. 修改表\"></a>5.6. 修改表</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI0RETC1BTFRFUi1BRERJTkctQS1DT0xVTU4=\">5.6.1. 增加列<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI0RETC1BTFRFUi1SRU1PVklORy1BLUNPTFVNTg==\">5.6.2. 移除列<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI0RETC1BTFRFUi1BRERJTkctQS1DT05TVFJBSU5U\">5.6.3. 增加约束<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI0RETC1BTFRFUi1SRU1PVklORy1BLUNPTlNUUkFJTlQ=\">5.6.4. 移除约束<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI2lkLTEuNS40LjguOQ==\">5.6.5. 更改列的默认值<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI2lkLTEuNS40LjguMTA=\">5.6.6. 修改列的数据类型<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI2lkLTEuNS40LjguMTE=\">5.6.7. 重命名列<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzEyL2RkbC1hbHRlci5odG1sI2lkLTEuNS40LjguMTI=\">5.6.8. 重命名表<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"5-7-权限\"><a href=\"#5-7-权限\" class=\"headerlink\" title=\"5.7. 权限\"></a>5.7. 权限</h2><p>初始状态下只有所有者（或者超级用户）能够对该对象做任何事情。为了允许其他角色使用它，必须分配<em>权限</em>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name OWNER <span class=\"keyword\">TO</span> user_name;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">TO</span> user_name;</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FROM</span> <span class=\"keyword\">PUBLIC</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"模式Schema\"><a href=\"#模式Schema\" class=\"headerlink\" title=\"模式Schema\"></a>模式Schema</h2><p>database -&gt; schema -&gt; table</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> first_schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> first_schema.User (</span><br><span class=\"line\">    user_name <span class=\"built_in\">varchar</span>(<span class=\"number\">80</span>),</span><br><span class=\"line\">    <span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">80</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> first_schema.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> first_schema.User <span class=\"keyword\">VALUES</span> (<span class=\"string\">'shibin'</span>, <span class=\"string\">'passwd'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> first_schema; <span class=\"comment\">-- 有数据无法删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> first_schema <span class=\"keyword\">CASCADE</span> ; <span class=\"comment\">-- 删除所有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> second_schema AUTHORIZATION user_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>默认public模式</p>\n</blockquote>\n"},{"title":"Archives","url":"/archives/index.html","content":""},{"title":"C++ Overview","url":"/c++/index.html","content":"<blockquote>\n<p>用来记录对 C++的理解,参考资料,示例代码</p>\n</blockquote>\n<p>文档参考:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cv\">https://en.cppreference.com/w/<i class=\"fa fa-external-link-alt\"></i></span> <strong>文档</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3BsdXNwbHVzLmNvbS8=\">https://www.cplusplus.com/<i class=\"fa fa-external-link-alt\"></i></span> <strong>文档</strong>(示例稍多)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc29jcHAub3JnLw==\">https://isocpp.org/<i class=\"fa fa-external-link-alt\"></i></span> <strong>The home of Standard C++</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc29jcHAuZ2l0aHViLmlvL0NwcENvcmVHdWlkZWxpbmVzL0NwcENvcmVHdWlkZWxpbmVz\">https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines<i class=\"fa fa-external-link-alt\"></i></span> <strong>C++ 核心指南</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3N0eWxlZ3VpZGUvY3BwZ3VpZGUuaHRtbA==\">https://google.github.io/styleguide/cppguide.html<i class=\"fa fa-external-link-alt\"></i></span> <strong>Google C++ Style Guide</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sbHZtLm9yZy8=\">https://llvm.org/<i class=\"fa fa-external-link-alt\"></i></span> <strong>LLVM</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZmZmFyYXovYXdlc29tZS1jcHA=\">https://github.com/fffaraz/awesome-cpp<i class=\"fa fa-external-link-alt\"></i></span> <strong>Awesome C++</strong></li>\n</ul>\n"},{"title":"Categories","url":"/categories/index.html","content":""},{"url":"/git/add.html","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git add *</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将未跟踪的文件加入到跟踪列表中</li>\n<li>将已经跟踪的文件纳入到暂存区中</li>\n<li>修改冲突后add，用来标记这个冲突已经解决了</li>\n</ul>\n<p>TAG</p>\n"},{"title":"Git","url":"/git/index.html","content":""},{"title":"CMake","url":"/cmake/index.html","content":"<h2 id=\"CMake是什么\"><a href=\"#CMake是什么\" class=\"headerlink\" title=\"CMake是什么?\"></a>CMake是什么?</h2><p>官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcv\">https://cmake.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and <strong>compiler independent configuration files</strong>, and <strong>generate native makefiles</strong> and workspaces that can be used in the compiler environment of your choice. </p>\n</blockquote>\n<p>开源,跨平台的<strong>构建,测试,打包</strong>软件工具,<br>使用简单平台和独立于编译器的<strong>配置文件</strong>来控制软件编译过程，生成可在您选择的编译器环境中使用的本机makefile和工作区</p>\n<p><strong>画重点</strong></p>\n<ul>\n<li>构建</li>\n<li>测试</li>\n<li>打包</li>\n<li>cmake命令及语法</li>\n</ul>\n<p><strong>CMake设计的目标:</strong></p>\n<blockquote>\n<p>提供一组工具，可以在不同平台上配置、构建、测试和部署项目. <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW9zYWJvb2sub3JnL2VuL2NtYWtlLmh0bWw=\">https://www.aosabook.org/en/cmake.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>CMake是一个<strong>构建生成器</strong>，提供了强大的领域特定语言(<strong>DSL</strong>)来描述构建系统应该实现的功能</p>\n<p><img data-src=\"https://static.bookstack.cn/projects/CMake-Cookbook/images/preface/1.png\" alt=\"\"></p>\n<p><strong>CMake软件工具集:</strong></p>\n<ul>\n<li><strong>CMake</strong>是描述如何在所有主要硬件和操作系统上配置、构建和安装项目，无论是构建可执行文件、库，还是两者都要构建。</li>\n<li><strong>CTest</strong>定义测试、测试套件，并设置应该如何执行。</li>\n<li><strong>CPack</strong>为打包需求提供了DSL。</li>\n<li><strong>CDash</strong>将项目的测试结果在面板中展示。</li>\n</ul>\n<p>CMake管理的项目的工作流发生在许多阶段(time)，我们称之为<em>时序</em>。可以简洁地总结如下图：</p>\n<p><img data-src=\"https://static.bookstack.cn/projects/CMake-Cookbook/images/preface/2.png\" alt=\"前言 - 图2\"></p>\n<ul>\n<li><strong>CMake time</strong>或<strong>confighure time</strong>，是CMake运行时的情况。这个阶段中，CMake将处理项目中的CMakeLists.txt文件并配置它。</li>\n<li><strong>Generation time</strong>配置成功后，CMake将生成本地构建工具所需的脚本，以执行项目中的后续步骤。</li>\n<li><strong>Build time</strong>这是在平台和工具原生构建脚本上调用原生构建工具的时候，这些脚本以前是由CMake生成的。此时，将调用编译器，并在特定的构建目录中构建目标(可执行文件和库)。注意递归的CMake time箭头：这看起来令人困惑，但是我们将在本书中多次使用它，用来实现平台无关的构建。</li>\n<li><strong>CTest time</strong>或 <strong>test time</strong>，运行项目的测试套件，以检查目标是否按预期执行。</li>\n<li><strong>CDash time</strong>或<strong>report time</strong>，将测试结果上传到面板，与其他开发人员共享。</li>\n<li><strong>Install time</strong>，将项目的目标、源文件、可执行文件和库从构建目录安装到安装位置。</li>\n<li><strong>CPack time</strong>或<strong>packaging time</strong>，将项目打包以便发布，可以是源代码，也可以是二进制代码。</li>\n<li><strong>Package install time</strong>，在系统范围内安装新生成的包。</li>\n</ul>\n"},{"url":"/rust/15.%20Smart%20Pointers.html","content":"<p>智能指针通常使用结构体实现。</p>\n<p>智能指针区别于常规结构体的显著特性在于其实现了 Deref 和 Drop trait。 </p>\n<ul>\n<li>Deref trait 允许智能指针结构体实例表现的像引用一样，这样就可以编写既 用于引用、又用于智能指针的代码。 </li>\n<li>Drop trait 允许我们自定义当智能指针离开作用域时运行 的代码。</li>\n</ul>\n<p>内容</p>\n<ul>\n<li>Box<T> ，用于在堆上分配值</li>\n<li>Rc<T> ，一个引用计数类型，其数据可以有多个所有者</li>\n<li>Ref<T> 和 RefMut<T> ，通过 RefCell<T> 访问，一个在运行时而不是在编译时执行借用规则的类型。</li>\n</ul>\n<p>内部可变性(<em>interior mutability</em>)模式，这时不可变类型暴露出改变其内部值的 API。</p>\n<p>引用循环(<em>reference cycles</em>)会如何泄露内存，以及如何避免。</p>\n<h2 id=\"使用-Box-lt-T-gt-指向堆上的数据\"><a href=\"#使用-Box-lt-T-gt-指向堆上的数据\" class=\"headerlink\" title=\"使用 Box&lt;T&gt; 指向堆上的数据\"></a>使用 <code>Box&lt;T&gt;</code> 指向堆上的数据</h2><h2 id=\"通过-Deref-trait-将智能指针当作常规引用处理\"><a href=\"#通过-Deref-trait-将智能指针当作常规引用处理\" class=\"headerlink\" title=\"通过 Deref trait 将智能指针当作常规引用处理\"></a>通过 <strong>Deref</strong> <strong>trait</strong> 将智能指针当作常规引用处理</h2><p>实现 Deref trait 允许我们重载 解引用运算符(<em>dereference operator</em>) * 。通过这种方式实现 Deref trait 的智能指针可以被当作常规引用来对待，可以编写操作引用的代码并用于智能指针。</p>\n<h3 id=\"通过解引用运算符追踪指针的值\"><a href=\"#通过解引用运算符追踪指针的值\" class=\"headerlink\" title=\"通过解引用运算符追踪指针的值\"></a>通过解引用运算符追踪指针的值</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"built_in\">Box</span>::new(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Option</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"i = &#123;:?&#125;\"</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = &amp;x;</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, *y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"像引用一样使用-Box-lt-T-gt\"><a href=\"#像引用一样使用-Box-lt-T-gt\" class=\"headerlink\" title=\"像引用一样使用 Box&lt;T&gt;\"></a>像引用一样使用 <code>Box&lt;T&gt;</code></h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"built_in\">Box</span>::new(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, *y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义智能指针\"><a href=\"#自定义智能指针\" class=\"headerlink\" title=\"自定义智能指针\"></a>自定义智能指针</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::ops::Deref;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyBox</span></span>&lt;T&gt;(T);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; &#123;</span><br><span class=\"line\">        MyBox(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Deref <span class=\"keyword\">for</span> MyBox&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Target</span></span> = T;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">deref</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; &amp;T &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"deref\"</span>);</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"comment\">// let y = Box::new(5);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = MyBox::new(x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, *y);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> z = *(y.deref());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"z = &#123;:?&#125;\"</span>, z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Drop-Trait\"><a href=\"#Drop-Trait\" class=\"headerlink\" title=\"Drop Trait\"></a>Drop Trait</h3><p>值要离开作用域时执行一 些代码</p>\n<p>Drop Trait的意义在于自动处理,不能手动调用Drop Trait的drop方法. 如果需要提前释放,调用<strong>std::mem::drop</strong></p>\n<h3 id=\"函数和方法的隐式解引用强制多态\"><a href=\"#函数和方法的隐式解引用强制多态\" class=\"headerlink\" title=\"函数和方法的隐式解引用强制多态\"></a>函数和方法的隐式解引用强制多态</h3><p>解引用强制多态(<em>deref coercions</em>)是 Rust 表现在函数或方法传参上的一种便利, 传参时解引用去匹配类型</p>\n<p>Deref, DerefMut重载可变或不可变</p>\n<p>Rust 在发现类型和 trait 实现满足三种情况时会进行解引用强制多态:</p>\n<ul>\n<li>当 T: Deref&lt;Target=U&gt; 时从 &amp;T 到 &amp;U 。</li>\n<li>当 T: DerefMut&lt;Target=U&gt; 时从 &amp;mut T 到 &amp;mut U 。 </li>\n<li>当 T: Deref&lt;Target=U&gt; 时从 &amp;mut T 到 &amp;U 。</li>\n</ul>\n<h3 id=\"Rc-lt-T-gt-引用计数智能指针\"><a href=\"#Rc-lt-T-gt-引用计数智能指针\" class=\"headerlink\" title=\"Rc&lt;T&gt; 引用计数智能指针\"></a><code>Rc&lt;T&gt;</code> 引用计数智能指针</h3><p>Rc:<em>reference counting</em>缩写</p>\n<p>引用计数意味着记录一个值引用的数量来知晓这个值是否仍在被使用。如 果某个值有零个引用，就代表没有任何有效引用并可以被清理。</p>\n<p>只能用于单线程场景</p>\n<p>怎么增加计数:Rc::clone / var.clone()</p>\n<p>如何查看计数:Rc::strong_count(&amp;a);</p>\n<p>问题:相同位置的多个可变借用可能造成数 据竞争和不一致</p>\n<h3 id=\"RefCell-lt-T-gt-和内部可变性模式\"><a href=\"#RefCell-lt-T-gt-和内部可变性模式\" class=\"headerlink\" title=\"RefCell&lt;T&gt; 和内部可变性模式\"></a><code>RefCell&lt;T&gt;</code> 和内部可变性模式</h3><blockquote>\n<p>允许你即使在有不可变引用 时改变数据; 不可变值的可变借用</p>\n</blockquote>\n<p><code>RefCell&lt;T&gt;</code> 代表其数据的唯一的所有权</p>\n<p><code>RefCell&lt;T&gt;</code> 正是用于当你确信代码遵守借用规则，而编译器不能理解和确定的 时候。</p>\n<p><code>RefCell&lt;T&gt;</code> 只能用于单线程场景</p>\n<p>检查借用规则</p>\n<p><strong>有些分析是不可能的</strong>, </p>\n<p>编译器 程序 程序员</p>\n<p><strong>如下为选择 Box<T> ， Rc<T> 或 RefCell<T> 的理由:</strong></p>\n<ul>\n<li>Rc<T> 允许相同数据有多个所有者; Box<T> 和 RefCell<T> 有单一所有者。</li>\n<li>Box<T> 允许在编译时执行不可变或可变借用检查; Rc<T> 仅允许在编译时执行不可变 借用检查; RefCell<T> 允许在运行时执行不可变或可变借用检查。</li>\n<li>因为 RefCell<T> 允许在运行时执行可变借用检查，所以我们可以在即便 RefCell<T> 自身是不可变的情况下修改其内部的值。</li>\n</ul>\n<p>对于引用和 <code>Box&lt;T&gt;</code> ，借用规则的不可变性作用于<strong>编译时</strong>。对于 <code>RefCell&lt;T&gt;</code> ，这些不可变性 作用于 <strong>运行时</strong>。</p>\n<p>标准库中其他提供内部可变性的类型</p>\n<ul>\n<li><code>Cell&lt;T&gt;</code>:类似(<code>RefCell&lt;T&gt;</code>)除了 相比提供内部值的引用，其值被拷贝进和拷贝出 Cell<T> </li>\n<li><code>Mutex&lt;T&gt;</code>:提供线程间 安全的内部可变性</li>\n</ul>\n<p>引用循环与内存泄漏</p>\n"},{"url":"/rust/10.%20Generic%20Types,%20Traits,%20and%20Lifetimes.html","content":"<h2 id=\"泛型数据类型Generic-Data-Types\"><a href=\"#泛型数据类型Generic-Data-Types\" class=\"headerlink\" title=\"泛型数据类型Generic Data Types\"></a>泛型数据类型Generic Data Types</h2><p>泛型是具体类型或其他属性的抽象替代,高效的处理重复概念的工具</p>\n<h3 id=\"函数Function中\"><a href=\"#函数Function中\" class=\"headerlink\" title=\"函数Function中\"></a>函数Function中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> largest = list[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &amp;item <span class=\"keyword\">in</span> list.iter() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item &gt; largest &#123;</span><br><span class=\"line\">            largest = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    largest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = largest(&amp;list);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"num = &#123;:?&#125;\"</span>, num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"结构体中\"><a href=\"#结构体中\" class=\"headerlink\" title=\"结构体中\"></a>结构体中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pointer</span></span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    x: T,</span><br><span class=\"line\">    y: U,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> integer = Pointer &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> float = Pointer &#123; x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span> &#125;;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> mul = Pointer &#123; x: <span class=\"number\">10</span>, y: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"enum中\"><a href=\"#enum中\" class=\"headerlink\" title=\"enum中\"></a>enum中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Option</span></span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(T),</span><br><span class=\"line\">    <span class=\"literal\">None</span>(),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Result</span></span>&lt;T, E&gt; &#123;</span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(T),</span><br><span class=\"line\">    <span class=\"literal\">Err</span>(E),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在方法Method中\"><a href=\"#在方法Method中\" class=\"headerlink\" title=\"在方法Method中\"></a>在方法Method中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    x: T,</span><br><span class=\"line\">    y: U,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">x</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; &amp;T &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> Point&lt;<span class=\"built_in\">f32</span>, <span class=\"built_in\">f32</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">distance_from_origin</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">f32</span> &#123;</span><br><span class=\"line\">        (<span class=\"keyword\">self</span>.x.powi(<span class=\"number\">2</span>) + <span class=\"keyword\">self</span>.y.powi(<span class=\"number\">2</span>)).sqrt()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">mixup</span></span>&lt;K, W&gt;(<span class=\"keyword\">self</span>, other: Point&lt;K, W&gt;) -&gt; Point&lt;T, W&gt; &#123;</span><br><span class=\"line\">        Point &#123;</span><br><span class=\"line\">            x: (<span class=\"keyword\">self</span>.x),</span><br><span class=\"line\">            y: (other.y),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> integer = Point &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> float: Point&lt;<span class=\"built_in\">f32</span>, <span class=\"built_in\">f32</span>&gt; = Point &#123; x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = integer.x;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = &#123;:?&#125;\"</span>, x);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = float.distance_from_origin();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"s = &#123;:?&#125;\"</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mix = Point &#123; x: <span class=\"number\">10</span>, y: <span class=\"number\">20.0</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mix = float.mixup(mix);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"mix = &#123;:#?&#125;\"</span>, mix);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"泛型代码的性能\"><a href=\"#泛型代码的性能\" class=\"headerlink\" title=\"泛型代码的性能\"></a>泛型代码的性能</h3><blockquote>\n<p>Rust 实现了泛型，使得使用泛型类型参数的代码相比使用具体类型并没有任何速度上的损失</p>\n<p>Rust 通过在编译时进行泛型代码的 <strong>单态化(<em>monomorphization</em>)</strong>来保证效率。单态化是一个 通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程,</p>\n<p>编译器寻找所有泛型代 码被调用的位置并使用泛型代码<strong>针对具体类型生成代码</strong></p>\n</blockquote>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Option_i32</span></span> &#123;</span><br><span class=\"line\">    <span class=\"literal\">Some</span>(<span class=\"built_in\">i32</span>),</span><br><span class=\"line\">    <span class=\"literal\">None</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Option_f64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"literal\">Some</span>(<span class=\"built_in\">f64</span>),</span><br><span class=\"line\">    <span class=\"literal\">None</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// let integer = Some(5); // i32</span></span><br><span class=\"line\">    <span class=\"comment\">// let float = Some(5.0); // f64</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> integer = Option_i32::<span class=\"literal\">Some</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> float = Option_f64::<span class=\"literal\">Some</span>(<span class=\"number\">5.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"trait-定义共享的行为\"><a href=\"#trait-定义共享的行为\" class=\"headerlink\" title=\"trait:定义共享的行为\"></a><strong>trait</strong>:定义共享的行为</h2><p><strong>trait</strong>:这是一个定义泛型行为的方法。trait 可以与泛型结合来将泛型限制为 拥有特定行为的类型，而不是任意类型</p>\n<p>某个特定类型拥有可能与其他类型共享的功能</p>\n<blockquote>\n<p>类似于其它语言中的接口</p>\n</blockquote>\n<ul>\n<li>一个trait可以有多个行为</li>\n<li>语法：一行一个方法签名且都以分号结尾</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Summary</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为类型实现-trait\"><a href=\"#为类型实现-trait\" class=\"headerlink\" title=\"为类型实现 trait\"></a>为类型实现 <strong>trait</strong></h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Summary</span></span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NewsArticle</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> headline: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> location: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> author: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> content: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> Summary <span class=\"keyword\">for</span> NewsArticle &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">\"&#123;&#125;, by &#123;&#125; (&#123;&#125;)\"</span>, <span class=\"keyword\">self</span>.headline, <span class=\"keyword\">self</span>.author, <span class=\"keyword\">self</span>.location)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tweet</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> username: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> content: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> reply: <span class=\"built_in\">bool</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> retweet: <span class=\"built_in\">bool</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> Summary <span class=\"keyword\">for</span> Tweet &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">\"&#123;&#125;: &#123;&#125;\"</span>, <span class=\"keyword\">self</span>.username, <span class=\"keyword\">self</span>.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"默认实现\"><a href=\"#默认实现\" class=\"headerlink\" title=\"默认实现\"></a>默认实现</h3><h3 id=\"trait-作为参数\"><a href=\"#trait-作为参数\" class=\"headerlink\" title=\"trait 作为参数\"></a><strong>trait</strong> 作为参数</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">notify</span></span>(item: <span class=\"keyword\">impl</span> Summary) -&gt; <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">format!</span>(<span class=\"string\">\"breaking news! &#123;&#125;\"</span>, item.summarize())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-指定多个-trait-bound\"><a href=\"#通过-指定多个-trait-bound\" class=\"headerlink\" title=\"通过 + 指定多个 trait bound\"></a>通过 <strong>+</strong> 指定多个 trait bound</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">notify</span></span>(item: <span class=\"keyword\">impl</span> Summary + Display) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">notify</span></span>&lt;T: Summary + Display&gt;(item: T) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-where-简化-trait-bound\"><a href=\"#通过-where-简化-trait-bound\" class=\"headerlink\" title=\"通过 where 简化 trait bound\"></a>通过 <strong>where</strong> 简化 <strong>trait bound</strong></h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">some_function</span></span>&lt;T: Display + <span class=\"built_in\">Clone</span>, U: <span class=\"built_in\">Clone</span> + <span class=\"built_in\">Debug</span>&gt;(t: T, u: U) -&gt; <span class=\"built_in\">i32</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 简化后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">some_function</span></span>&lt;T, U&gt;(t: T, u: U) -&gt; <span class=\"built_in\">i32</span></span><br><span class=\"line\">    <span class=\"keyword\">where</span> T: Display + <span class=\"built_in\">Clone</span>,</span><br><span class=\"line\">          U: <span class=\"built_in\">Clone</span> + <span class=\"built_in\">Debug</span>,</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回实现了-trait-的类型\"><a href=\"#返回实现了-trait-的类型\" class=\"headerlink\" title=\"返回实现了 trait 的类型\"></a>返回实现了 <strong>trait</strong> 的类型</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">returns_summarizable</span></span>() -&gt; <span class=\"keyword\">impl</span> Summary &#123;</span><br><span class=\"line\">    Tweet &#123;</span><br><span class=\"line\">        username: <span class=\"built_in\">String</span>::from(<span class=\"string\">\"horse_ebooks\"</span>),</span><br><span class=\"line\">        content: <span class=\"built_in\">String</span>::from(<span class=\"string\">\"of course, as you probably already know, people\"</span>),</span><br><span class=\"line\">        reply: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        retweet: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-trait-bound-有条件地实现方法\"><a href=\"#使用-trait-bound-有条件地实现方法\" class=\"headerlink\" title=\"使用 trait bound 有条件地实现方法\"></a>使用 <strong>trait bound</strong> 有条件地实现方法</h3><h2 id=\"生命周期与引用有效性\"><a href=\"#生命周期与引用有效性\" class=\"headerlink\" title=\"生命周期与引用有效性\"></a>生命周期与引用有效性</h2><p>Rust 中的每一个引用都有其 生命周期(<em>lifetime</em>)，也就是引用保持有效的作用域</p>\n<p>当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用泛型生命周期参数来注明他们的关系，这样就能确保运行时<strong>实际使用的引用绝对是有效的</strong></p>\n<p>它是一类允许我们向编译器提供引用如何相互关联的泛 型。Rust 的生命周期功能允许在很多场景下借用值的同时仍然使编译器能够检查这些引用的 有效性。</p>\n<h3 id=\"生命周期避免了悬垂引用\"><a href=\"#生命周期避免了悬垂引用\" class=\"headerlink\" title=\"生命周期避免了悬垂引用\"></a>生命周期避免了悬垂引用</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">        x = &amp;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = &#123;:?&#125;\"</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"借用检查器\"><a href=\"#借用检查器\" class=\"headerlink\" title=\"借用检查器\"></a>借用检查器</h3><p>Rust 编译器有一个 <strong>借用检查器</strong>(<em>borrow checker</em>)，它比较作用域来确保所有的借用都是有效的。</p>\n<p>rust会去检查一个变量的生命周期范围</p>\n<h3 id=\"函数中的泛型生命周期\"><a href=\"#函数中的泛型生命周期\" class=\"headerlink\" title=\"函数中的泛型生命周期\"></a>函数中的泛型生命周期</h3><p>生 命周期注解描述了多个引用生命周期相互的关系</p>\n<p>格式:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"built_in\">i32</span> <span class=\"comment\">// 引用</span></span><br><span class=\"line\">&amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">i32</span> <span class=\"comment\">// 带有显式生命周期的引用 </span></span><br><span class=\"line\">&amp;<span class=\"symbol\">'a</span> <span class=\"keyword\">mut</span> <span class=\"built_in\">i32</span> <span class=\"comment\">// 带有显式生命周期的可变引用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"深入理解生命周期\"><a href=\"#深入理解生命周期\" class=\"headerlink\" title=\"深入理解生命周期\"></a>深入理解生命周期</h3><p>生命周期语法是用于将函数的多个参数与其返回值的生命周期进行关联的，Rust 就有了足够的信息来允许内存安全的操作并阻止会产生悬垂指针亦或 是违反内存安全的行为</p>\n<h3 id=\"结构体定义中的生命周期注解\"><a href=\"#结构体定义中的生命周期注解\" class=\"headerlink\" title=\"结构体定义中的生命周期注解\"></a>结构体定义中的生命周期注解</h3><h3 id=\"生命周期省略-Lifetime-Elision\"><a href=\"#生命周期省略-Lifetime-Elision\" class=\"headerlink\" title=\"生命周期省略(Lifetime Elision)\"></a>生命周期省略(<strong>Lifetime Elision</strong>)</h3><blockquote>\n<p>省略规则并不提供完整的推断:如果 Rust 在明确遵守这些规则的前提下变量的生命周期仍然 是模棱两可的话，它不会猜测剩余引用的生命周期应该是什么。在这种情况，编译器会给出 一个错误，这可以通过增加对应引用之间相联系的生命周期注解来解决。</p>\n</blockquote>\n<p>判断引用何时不需要明确的注解:</p>\n<ul>\n<li>第一条规则是每一个是引用的参数都有它自己的生命周期参数。换句话说就是，有一个引用参数的函数有一个生命周期参数: fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) ，有两个引用参数的函数有两个不 同的生命周期参数， fn foo&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a i32, y: &amp;&#39;b i32) ，依此类推。</li>\n<li>第二条规则是如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数: fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) -&gt; &amp;&#39;a i32 。</li>\n<li>第三条规则是如果方法有多个输入生命周期参数，不过其中之一因为方法的缘故为 &amp;self 或 &amp;mut self ，那么 self 的生命周期被赋给所有输出生命周期参数。第三条规则使得方法更容易读写，因为只需更少的符号。</li>\n</ul>\n<h3 id=\"方法定义中的生命周期注解\"><a href=\"#方法定义中的生命周期注解\" class=\"headerlink\" title=\"方法定义中的生命周期注解\"></a>方法定义中的生命周期注解</h3><h3 id=\"静态生命周期\"><a href=\"#静态生命周期\" class=\"headerlink\" title=\"静态生命周期\"></a>静态生命周期</h3><blockquote>\n<p> &#39;static ，其生命周期能够存活于整个程序期间。所 有的字符串字面值都拥有 &#39;static 生命周期</p>\n</blockquote>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s: &amp;<span class=\"symbol\">'static</span> <span class=\"built_in\">str</span> = <span class=\"string\">\"I have a static lifetime.\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结合泛型类型参数、trait-bounds-和生命周期\"><a href=\"#结合泛型类型参数、trait-bounds-和生命周期\" class=\"headerlink\" title=\"结合泛型类型参数、trait bounds 和生命周期\"></a>结合泛型类型参数、<strong>trait bounds</strong> 和生命周期</h3><p>语法</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::fmt::Display;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">longest_with_an_announcement</span></span>&lt;<span class=\"symbol\">'a</span>, T&gt;(x: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>, y: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>, ann: T) -&gt; &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span></span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: Display,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Announcement! &#123;&#125;\"</span>, ann);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.len() &gt; y.len() &#123;</span><br><span class=\"line\">        x</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/rust/13.%20Functional%20Language%20Features:%20Iterators%20and%20Closures.html","content":"<ul>\n<li>闭包(<em>Closures</em>)，一个可以储存在变量里的类似函数的结构 </li>\n<li>迭代器(<em>Iterators</em>)，一种处理元素序列的方式 </li>\n<li>如何使用这些功能来改进第十二章的 I/O 项目。</li>\n<li>这两个功能的性能。(剧透警告: 他们的速度超乎你的想象!)</li>\n</ul>\n"},{"url":"/rust/12.%20An%20IO%20Project:%20Building%20a%20Command%20Line%20Program.html","content":"<p>main.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> minigrep::Config;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;env, process&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args: <span class=\"built_in\">Vec</span>&lt;<span class=\"built_in\">String</span>&gt; = env::args().collect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> config = Config::new(&amp;args).unwrap_or_else(|err| &#123;</span><br><span class=\"line\">        eprintln!(<span class=\"string\">\"Problem parsing arguments: &#123;&#125;\"</span>, err);</span><br><span class=\"line\">        process::exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"literal\">Err</span>(err) = minigrep::run(config) &#123;</span><br><span class=\"line\">        eprintln!(<span class=\"string\">\"Application err : &#123;&#125;\"</span>, err);</span><br><span class=\"line\">        process::exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>lib.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;env, error::Error, fs&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> query: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> file_name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> case_sensitive: <span class=\"built_in\">bool</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> Config &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">new</span></span>(args: &amp;[<span class=\"built_in\">String</span>]) -&gt; <span class=\"built_in\">Result</span>&lt;Config, &amp;<span class=\"symbol\">'static</span> <span class=\"built_in\">str</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.len() &lt; <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">Err</span>(<span class=\"string\">\"not enough arguments\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> query = args[<span class=\"number\">1</span>].clone();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> file_name = args[<span class=\"number\">2</span>].clone();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> case_sensitive = env::var(<span class=\"string\">\"CASE_INSENSITIVE\"</span>).is_err();</span><br><span class=\"line\">        <span class=\"literal\">Ok</span>(Config &#123;</span><br><span class=\"line\">            query,</span><br><span class=\"line\">            file_name,</span><br><span class=\"line\">            case_sensitive,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">run</span></span>(config: Config) -&gt; <span class=\"built_in\">Result</span>&lt;(), <span class=\"built_in\">Box</span>&lt;<span class=\"keyword\">dyn</span> Error&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = fs::read_to_string(config.file_name)?;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> config.case_sensitive &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> search(&amp;config.query, &amp;content) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">\"line = &#123;&#125;\"</span>, line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> search_case_insensitive(&amp;config.query, &amp;content) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">\"line = &#123;&#125;\"</span>, line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">search_case_insensitive</span></span>&lt;<span class=\"symbol\">'a</span>&gt;(query: &amp;<span class=\"built_in\">str</span>, content: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>) -&gt; <span class=\"built_in\">Vec</span>&lt;&amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> results = <span class=\"built_in\">Vec</span>::new();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> query = query.to_lowercase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content.lines() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> line.to_lowercase().contains(&amp;query) &#123;</span><br><span class=\"line\">            results.push(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    results</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">search</span></span>&lt;<span class=\"symbol\">'a</span>&gt;(query: &amp;<span class=\"built_in\">str</span>, content: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>) -&gt; <span class=\"built_in\">Vec</span>&lt;&amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> result = <span class=\"built_in\">Vec</span>::new();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content.lines() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> line.contains(query) &#123;</span><br><span class=\"line\">            result.push(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/rust/4.%20Understanding%20Ownership.html","content":"<p>Understanding Ownership</p>\n<h2 id=\"什么是所有权\"><a href=\"#什么是所有权\" class=\"headerlink\" title=\"什么是所有权?\"></a>什么是所有权?</h2><p>管理内存，编译器在编译时会根据一系列的规则 进行检查。</p>\n<h3 id=\"所有权规则\"><a href=\"#所有权规则\" class=\"headerlink\" title=\"所有权规则\"></a>所有权规则</h3><ol>\n<li>Rust中的每一个值都有一个被称为其所有者(<em>owner</em>)的变量。 </li>\n<li>值有且只有一个所有者。</li>\n<li>当所有者(变量)离开作用域，这个值将被丢弃。</li>\n</ol>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><h3 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a><strong>String</strong> 类型</h3><h3 id=\"内存与分配\"><a href=\"#内存与分配\" class=\"headerlink\" title=\"内存与分配\"></a>内存与分配</h3><h3 id=\"变量与数据交互的方式-一-移动\"><a href=\"#变量与数据交互的方式-一-移动\" class=\"headerlink\" title=\"变量与数据交互的方式(一):移动\"></a>变量与数据交互的方式(一):移动</h3><h3 id=\"变量与数据交互的方式-二-克隆\"><a href=\"#变量与数据交互的方式-二-克隆\" class=\"headerlink\" title=\"变量与数据交互的方式(二):克隆\"></a>变量与数据交互的方式(二):克隆</h3><h3 id=\"只在栈上的数据-拷贝\"><a href=\"#只在栈上的数据-拷贝\" class=\"headerlink\" title=\"只在栈上的数据:拷贝\"></a>只在栈上的数据:拷贝</h3><h3 id=\"所有权与函数\"><a href=\"#所有权与函数\" class=\"headerlink\" title=\"所有权与函数\"></a>所有权与函数</h3><h3 id=\"返回值与作用域\"><a href=\"#返回值与作用域\" class=\"headerlink\" title=\"返回值与作用域\"></a>返回值与作用域</h3><h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>将获取引用作为函数参数称为 借用(<em>borrowing</em>)</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><h3 id=\"悬垂引用-Dangling-References\"><a href=\"#悬垂引用-Dangling-References\" class=\"headerlink\" title=\"悬垂引用(Dangling References)\"></a>悬垂引用(<strong>Dangling References</strong>)</h3><p>是其指向的内存可能已经被分配给其它持有者</p>\n<p>在 Rust 中编译器确保引用永远也不会变成悬垂状态:当你拥有一些数据的引用，编译器 确保数据不会在其引用之前离开作用域。</p>\n<h3 id=\"引用的规则\"><a href=\"#引用的规则\" class=\"headerlink\" title=\"引用的规则\"></a>引用的规则</h3><ul>\n<li>在任意给定时间，要么只能有一个可变引用，要么只能有多个不可变引用。 </li>\n<li>引用必须总是有效的。</li>\n</ul>\n<h2 id=\"Slice-类型\"><a href=\"#Slice-类型\" class=\"headerlink\" title=\"Slice 类型\"></a><strong>Slice</strong> 类型</h2>"},{"url":"/rust/3.%20Common%20Programming%20Concepts.html","content":"<h1 id=\"“Common-Programming-Concepts\"><a href=\"#“Common-Programming-Concepts\" class=\"headerlink\" title=\"“Common Programming Concepts\"></a><a href=\"#common-programming-concepts\">“Common Programming Concepts</a></h1><p><a href=\"ch03-01-variables-and-mutability.html\"><strong>3.1.</strong> Variables and Mutability</a><br><a href=\"ch03-02-data-types.html\"><strong>3.2.</strong> Data Types</a><br><a href=\"ch03-03-how-functions-work.html\"><strong>3.3.</strong> Functions</a><br><a href=\"ch03-04-comments.html\"><strong>3.4.</strong> Comments</a><br><a href=\"ch03-05-control-flow.html\"><strong>3.5.</strong> Control Flow</a></p>\n<h2 id=\"Variables-and-Mutability\"><a href=\"#Variables-and-Mutability\" class=\"headerlink\" title=\"Variables and Mutability\"></a>Variables and Mutability</h2><h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><h3 id=\"可变性\"><a href=\"#可变性\" class=\"headerlink\" title=\"可变性\"></a>可变性</h3><blockquote>\n</blockquote>\n<h3 id=\"变量遮蔽-Shadowing\"><a href=\"#变量遮蔽-Shadowing\" class=\"headerlink\" title=\"变量遮蔽(Shadowing)\"></a>变量遮蔽(<strong>Shadowing</strong>)</h3><h3 id=\"模式解构\"><a href=\"#模式解构\" class=\"headerlink\" title=\"模式解构\"></a>模式解构</h3><ul>\n<li>tuple</li>\n<li>struct</li>\n<li>tuple struct</li>\n<li>enum</li>\n</ul>\n<h3 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h3><p>Rust只允许“局部变量/全局变量”实现类型推导，而函数签名等场 景下是不允许的</p>\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// `NanoSecond` 是 `u64` 的新名字。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">NanoSecond</span></span> = <span class=\"built_in\">u64</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Inch</span></span> = <span class=\"built_in\">u64</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Age</span></span> = <span class=\"built_in\">u32</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h3><p>变量的生命周期是整个程序，从启动到退出</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> GLOBAL: <span class=\"built_in\">i32</span> = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>不可变的变量</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> GLOBAL: <span class=\"built_in\">i32</span> = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Data-Types\"><a href=\"#Data-Types\" class=\"headerlink\" title=\"Data Types\"></a>Data Types</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ul>\n<li>bool</li>\n<li>char</li>\n<li>整数类型</li>\n<li>浮点类型</li>\n<li>指针类型</li>\n</ul>\n<h4 id=\"char\"><a href=\"#char\" class=\"headerlink\" title=\"char\"></a>char</h4><p>现代语言,没有历史包袱, 它可以描述任何一个符合unicode标准的字符值</p>\n<h4 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h4><table>\n<thead>\n<tr>\n<th>整数类型</th>\n<th>在符号</th>\n<th>无符号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 bits</td>\n<td>i8</td>\n<td>u8</td>\n</tr>\n<tr>\n<td>16 bits</td>\n<td>i16</td>\n<td>u16</td>\n</tr>\n<tr>\n<td>32 bits</td>\n<td>i32</td>\n<td>u32</td>\n</tr>\n<tr>\n<td>64 bits</td>\n<td>i64</td>\n<td>u64</td>\n</tr>\n<tr>\n<td>128 bits</td>\n<td>i128</td>\n<td>i128</td>\n</tr>\n<tr>\n<td>Pointer size</td>\n<td>isize</td>\n<td>usize</td>\n</tr>\n</tbody></table>\n<p>默认为i32类型(“缺省”类型)</p>\n<p>前缀声明(0x,0o,0b)</p>\n<p>后缀类型声明</p>\n<p>数字中的<code>_</code>字符</p>\n<h4 id=\"整数溢出\"><a href=\"#整数溢出\" class=\"headerlink\" title=\"整数溢出\"></a>整数溢出</h4><p>默认情况下，在debug模式 下编译器会自动插入整数溢出检查，一旦发生溢出，则会引发panic;  在release模式下，不检查整数溢出，而是采用自动舍弃高位的方式。</p>\n<h4 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h4><p>Rust提供了基于IEEE 754-2008标准的浮点类型; 分别为f32和f64, 默认f64</p>\n<h4 id=\"指针类型\"><a href=\"#指针类型\" class=\"headerlink\" title=\"指针类型\"></a>指针类型</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9yZWZlcmVuY2UvdHlwZXMvcG9pbnRlci5odG1s\">https://doc.rust-lang.org/reference/types/pointer.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>References (&amp; and &amp;mut)</li>\n<li>Shared references (&amp;)</li>\n<li>Mutable references (&amp;mut)</li>\n<li>Raw pointers (*const and *mut)</li>\n<li>Smart pointer<ul>\n<li><code>Box&lt;T&gt;</code> for allocating values on the heap</li>\n<li><code>Rc&lt;T&gt;</code>, a reference counting type that enables multiple ownership</li>\n<li><code>Ref&lt;T&gt;</code> and <code>RefMut&lt;T&gt;</code>, accessed through <code>RefCell&lt;T&gt;</code>, a type that enforces the borrowing rules at runtime instead of compile time</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"复合数据类型\"><a href=\"#复合数据类型\" class=\"headerlink\" title=\"复合数据类型\"></a>复合数据类型</h3><ul>\n<li>tuple</li>\n<li>unit(单元类型:tuple中一个元素也没有)</li>\n<li>struct</li>\n<li>tuple struct</li>\n<li>enum</li>\n<li>union</li>\n</ul>\n<p>模式匹配</p>\n<p><strong>tuple、struct、struct tuple对比</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">tuple</th>\n<th align=\"center\">struct</th>\n<th align=\"center\">struct tuple</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">语法</td>\n<td align=\"center\">没有名字+圆括号</td>\n<td align=\"center\">名字+大括号</td>\n<td align=\"center\">名字+圆括号</td>\n</tr>\n<tr>\n<td align=\"center\">类型名字</td>\n<td align=\"center\">没有单独的名字</td>\n<td align=\"center\">有单独的名字</td>\n<td align=\"center\">有单独的名字</td>\n</tr>\n<tr>\n<td align=\"center\">成员名字</td>\n<td align=\"center\">没有单独的名字</td>\n<td align=\"center\">有单独的名字</td>\n<td align=\"center\">没有单独的名字</td>\n</tr>\n</tbody></table>\n<h3 id=\"enum\"><a href=\"#enum\" class=\"headerlink\" title=\"enum\"></a>enum</h3><p>可 以像空结构体一样，不指定它的类型;也可以像tuple struct一样，用圆 括号加无名成员;还可以像正常结构体一样，用大括号加带名字的成 员。</p>\n<h3 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"union\"></a>union</h3><p>Rust里面也支持union类型，这个类型与C语言中的union完全一 致。但在Rust里面，读取它内部的值被认为是unsafe行为，一般情况下 我们不使用这种类型。它存在的主要目的是为了方便与C语言进行交 互。</p>\n<h3 id=\"类型转换as\"><a href=\"#类型转换as\" class=\"headerlink\" title=\"类型转换as\"></a>类型转换as</h3><h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><h2 id=\"Control-Flow\"><a href=\"#Control-Flow\" class=\"headerlink\" title=\"Control Flow\"></a>Control Flow</h2>"},{"url":"/rust/6.%20Enums%20and%20Pattern%20Matching.html","content":"<h2 id=\"枚举-enumerations\"><a href=\"#枚举-enumerations\" class=\"headerlink\" title=\"枚举(enumerations)\"></a>枚举(<em>enumerations</em>)</h2><h2 id=\"match-控制流运算符\"><a href=\"#match-控制流运算符\" class=\"headerlink\" title=\"match 控制流运算符\"></a><strong>match</strong> 控制流运算符</h2>"},{"url":"/rust/16.%20Fearless%20Concurrency.html","content":"<p>所有权和类型系统是一系列解决内存安全 和 并发问题</p>\n<ul>\n<li>如何创建线程来同时运行多段代码。</li>\n<li>消息传递(<em>Message passing</em>)并发，其中通道(channel)被用来在线程间传递消息。 </li>\n<li>共享状态(<em>Shared state</em>)并发，其中多个线程可以访问同一片数据。</li>\n<li>Sync 和 Send trait，他们允许 Rust 的并发保证能被扩展到用户定义的和标准库中提供 的类型中。</li>\n</ul>\n<p>对于高级语言来说，只实现可能 解决方案的子集是一个合理的策略，因为高级语言所许诺的价值来源于牺牲一些控制来换取 抽象。然而对于底层语言则期望提供在任何给定的情况下有着最高的性能且对硬件有更少的 抽象。因此，Rust 提供了多种工具，以符合实际情况和需求的方式来为问题建模。</p>\n<h2 id=\"使用-spawn-创建新线程\"><a href=\"#使用-spawn-创建新线程\" class=\"headerlink\" title=\"使用 spawn 创建新线程\"></a>使用 <strong>spawn</strong> 创建新线程</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handle = thread::spawn(|| &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">\"sub thread : &#123;&#125;\"</span>, i);</span><br><span class=\"line\">            thread::sleep(Duration::from_millis(<span class=\"number\">100</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"main thread : &#123;&#125;\"</span>, i);</span><br><span class=\"line\">        thread::sleep(Duration::from_millis(<span class=\"number\">100</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handle.join().unwrap();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程与-move-闭包\"><a href=\"#线程与-move-闭包\" class=\"headerlink\" title=\"线程与 move 闭包\"></a>线程与 <strong>move</strong> 闭包</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handle = thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"v = &#123;:?&#125;\"</span>, v);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    handle.join().unwrap();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用消息传递在线程间传送数据\"><a href=\"#使用消息传递在线程间传送数据\" class=\"headerlink\" title=\"使用消息传递在线程间传送数据\"></a>使用消息传递在线程间传送数据</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (sender, receiver) = mpsc::channel();</span><br><span class=\"line\">    <span class=\"comment\">// sender.send(()).unwrap();</span></span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        thread::sleep(std::time::Duration::from_millis(<span class=\"number\">300</span>));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = <span class=\"built_in\">String</span>::from(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">        sender.send(val).unwrap();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"wait for msg \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = receiver.recv().unwrap();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"msg = &#123;:?&#125;\"</span>, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"通道与所有权转移\"><a href=\"#通道与所有权转移\" class=\"headerlink\" title=\"通道与所有权转移\"></a>通道与所有权转移</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (sender, receiver) = mpsc::channel();</span><br><span class=\"line\">    <span class=\"comment\">// sender.send(()).unwrap();</span></span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        thread::sleep(Duration::from_millis(<span class=\"number\">300</span>));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = <span class=\"built_in\">String</span>::from(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">        sender.send(val).unwrap();</span><br><span class=\"line\">        <span class=\"comment\">// println!(\"val is = &#123;:?&#125;\", val);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"wait for msg \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = receiver.recv().unwrap();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"msg = &#123;:?&#125;\"</span>, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"发送多个值并观察接收者的等待\"><a href=\"#发送多个值并观察接收者的等待\" class=\"headerlink\" title=\"发送多个值并观察接收者的等待\"></a>发送多个值并观察接收者的等待</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (tx, rx) = std::sync::mpsc::channel();</span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> vals = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"hi\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"from\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"the\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"thread\"</span>),</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> vals &#123;</span><br><span class=\"line\">            thread::sleep(Duration::from_millis(<span class=\"number\">100</span>));</span><br><span class=\"line\">            tx.send(val).unwrap();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> rx &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"msg = &#123;:?&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过克隆发送者来创建多个生产者\"><a href=\"#通过克隆发送者来创建多个生产者\" class=\"headerlink\" title=\"通过克隆发送者来创建多个生产者\"></a>通过克隆发送者来创建多个生产者</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (tx, rx) = std::sync::mpsc::channel();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tx1 = mpsc::Sender::clone(&amp;tx);</span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> vals = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 hi\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 from\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 the\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 thread\"</span>),</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> vals &#123;</span><br><span class=\"line\">            tx.send(val).unwrap();</span><br><span class=\"line\">            thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> vals = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 more\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 messages\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 for\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 you\"</span>),</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> vals &#123;</span><br><span class=\"line\">            tx1.send(val).unwrap();</span><br><span class=\"line\">            thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> rx &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"got val = &#123;:?&#125;\"</span>, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"共享状态并发\"><a href=\"#共享状态并发\" class=\"headerlink\" title=\"共享状态并发\"></a>共享状态并发</h2><p> Send :这是确保所使用的类型意在用于并发环境的 trait 之一</p>\n<p>原子引用计数 <code>Arc&lt;T&gt;</code> <em>atomically reference counted</em></p>\n<p>使用 Arc<T> 包装一个 Mutex<T> 能够实现在多线程之间共享所有权</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;</span><br><span class=\"line\">    sync::&#123;Arc, Mutex&#125;,</span><br><span class=\"line\">    thread,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> counter = Arc::new(Mutex::new(<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> handles = <span class=\"built_in\">vec!</span>[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> counter = Arc::clone(&amp;counter);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> handle = thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> num = counter.lock().unwrap();</span><br><span class=\"line\">            *num += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        handles.push(handle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> handle <span class=\"keyword\">in</span> handles &#123;</span><br><span class=\"line\">        handle.join().unwrap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"counter = &#123;:?&#125;\"</span>, *counter.lock().unwrap());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mutex<T> 提供了内部可变性</p>\n<h2 id=\"使用-Sync-和-Send-trait-的可扩展并发\"><a href=\"#使用-Sync-和-Send-trait-的可扩展并发\" class=\"headerlink\" title=\"使用 Sync 和 Send trait 的可扩展并发\"></a>使用 <strong>Sync</strong> 和 <strong>Send</strong> <strong>trait</strong> 的可扩展并发</h2><h3 id=\"通过-Send-允许在线程间转移所有权\"><a href=\"#通过-Send-允许在线程间转移所有权\" class=\"headerlink\" title=\"通过 Send 允许在线程间转移所有权\"></a>通过 <strong>Send</strong> 允许在线程间转移所有权</h3><h3 id=\"Sync-允许多线程访问\"><a href=\"#Sync-允许多线程访问\" class=\"headerlink\" title=\"Sync 允许多线程访问\"></a><strong>Sync</strong> 允许多线程访问</h3>"},{"url":"/rust/8.%20Common%20Collections.html","content":"<h2 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h2><p>Doc:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9zdGQvdmVjL3N0cnVjdC5WZWMuaHRtbA==\">https://doc.rust-lang.org/std/vec/struct.Vec.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>more example:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9zdGFibGUvcnVzdC1ieS1leGFtcGxlL3N0ZC92ZWMuaHRtbA==\">https://doc.rust-lang.org/stable/rust-by-example/std/vec.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">vec_func</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Creating</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> v: <span class=\"built_in\">Vec</span>&lt;<span class=\"built_in\">i32</span>&gt; = <span class=\"built_in\">Vec</span>::new(); <span class=\"comment\">// new</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">// mocro</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// update</span></span><br><span class=\"line\">    v.push(<span class=\"number\">10</span>);</span><br><span class=\"line\">    v.push(<span class=\"number\">20</span>);</span><br><span class=\"line\">    v.push(<span class=\"number\">30</span>);</span><br><span class=\"line\">    v.push(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// get element</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> third: &amp;<span class=\"built_in\">i32</span> = &amp;v[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The third element is &#123;&#125;\"</span>, third);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">match</span> v.get(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"literal\">Some</span>(third) =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">\"The third element is &#123;&#125;\"</span>, third),</span><br><span class=\"line\">        <span class=\"literal\">None</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">\"There is no third element.\"</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// iterating</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">100</span>, <span class=\"number\">32</span>, <span class=\"number\">57</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &amp;v &#123; <span class=\"comment\">// unmutable</span></span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> v &#123; <span class=\"comment\">// mutable</span></span><br><span class=\"line\">        *i += <span class=\"number\">50</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i, x) <span class=\"keyword\">in</span> v.iter().enumerate() &#123; <span class=\"comment\">// with index</span></span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"In position &#123;&#125; we have value &#123;&#125;\"</span>, i, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// with enum</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SpreadsheetCell</span></span> &#123;</span><br><span class=\"line\">        Int(<span class=\"built_in\">i32</span>),</span><br><span class=\"line\">        Float(<span class=\"built_in\">f64</span>),</span><br><span class=\"line\">        Text(<span class=\"built_in\">String</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> row = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">        SpreadsheetCell::Int(<span class=\"number\">3</span>),</span><br><span class=\"line\">        SpreadsheetCell::Text(<span class=\"built_in\">String</span>::from(<span class=\"string\">\"blue\"</span>)),</span><br><span class=\"line\">        SpreadsheetCell::Float(<span class=\"number\">10.12</span>),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h2 id=\"hash-map\"><a href=\"#hash-map\" class=\"headerlink\" title=\"hash map\"></a>hash map</h2>"},{"url":"/rust/9.%20Error%20Handling.html","content":"<h2 id=\"panic-与不可恢复的错误\"><a href=\"#panic-与不可恢复的错误\" class=\"headerlink\" title=\"panic! 与不可恢复的错误\"></a><strong>panic!</strong> 与不可恢复的错误</h2><h2 id=\"Result-与可恢复的错误\"><a href=\"#Result-与可恢复的错误\" class=\"headerlink\" title=\"Result 与可恢复的错误\"></a><strong>Result</strong> 与可恢复的错误</h2><h3 id=\"匹配不同的错误\"><a href=\"#匹配不同的错误\" class=\"headerlink\" title=\"匹配不同的错误\"></a>匹配不同的错误</h3><h3 id=\"失败时-panic-的简写-unwrap-和-expect\"><a href=\"#失败时-panic-的简写-unwrap-和-expect\" class=\"headerlink\" title=\"失败时 panic 的简写: unwrap 和 expect\"></a>失败时 <strong>panic</strong> 的简写: <strong>unwrap</strong> 和 <strong>expect</strong></h3><p>unwrap:如果 Result 值是成员 Ok ， unwrap 会返回 Ok 中的值。如果Result 是成员 Err ， unwrap 会为我们调用 panic!</p>\n<p>expect 与 unwrap 的使用方式一样:返回Ok或调用 panic! 宏。 expect 用来调用panic! 的错误信息将会作为参数传递给 expect </p>\n<h3 id=\"传播错误\"><a href=\"#传播错误\" class=\"headerlink\" title=\"传播错误\"></a>传播错误</h3><p>谁来处理错误的问题:调用都来处理还是在调用中去处理</p>\n<h3 id=\"传播错误的简写-运算符\"><a href=\"#传播错误的简写-运算符\" class=\"headerlink\" title=\"传播错误的简写: ? 运算符\"></a>传播错误的简写: <strong>?</strong> 运算符</h3><p>如果 Result 的值是 Ok ，这个表达式将会返回 Ok 中的值而程序将继续执行。如果值是 Err ， Err 中的值将作为整个函数的返回值，就好像使用了 return 关 键字一样，这样错误值就被传播给了调用者。</p>\n<p>问号运算符:? 运算符所使用的错误值被 传递给了 from 函数，它定义于标准库的 From trait 中，其用来将错误从一种类型转换为另 一种类型。当 ? 运算符调用 from 函数时，收到的错误类型被转换为定义为当前函数返回 的错误类型。</p>\n<p>这在当一个函数返回一个错误类型来代表所有可能失败的方式时很有用，即使 其可能会因很多种原因失败。只要每一个错误类型都实现了 from 函数来定义如将其转换为 返回的错误类型， ? 运算符会自动处理这些转换</p>\n<h3 id=\"运算符可被用于返回-Result-的函数\"><a href=\"#运算符可被用于返回-Result-的函数\" class=\"headerlink\" title=\"? 运算符可被用于返回 Result 的函数\"></a><strong>?</strong> 运算符可被用于返回 <strong>Result</strong> 的函数</h3><p>main特殊性,有两种返回值类型:</p>\n<ul>\n<li>()</li>\n<li>Result&lt;T,E&gt;</li>\n</ul>\n<h3 id=\"panic-还是不-panic\"><a href=\"#panic-还是不-panic\" class=\"headerlink\" title=\"panic! 还是不 panic!\"></a><strong>panic!</strong> 还是不 <strong>panic!</strong></h3><ul>\n<li><p>示例、代码原型和测试都非常适合 <strong>panic</strong></p>\n</li>\n<li><p>当我们比编译器知道更多的情况</p>\n</li>\n<li><p>错误处理指导原则</p>\n<ul>\n<li>有害状态并不包含 预期 会偶尔发生的错误 </li>\n<li>之后的代码的运行依赖于处于这种有害状态 </li>\n<li>当没有可行的手段来将有害状态信息编码进所使用的类型中的情况</li>\n</ul>\n</li>\n<li><p>创建自定义类型进行有效性验证 guessing_game2</p>\n</li>\n</ul>\n"},{"url":"/rust/20.%20Final%20Project:%20Building%20a%20Multithreaded%20Web%20Server.html","content":"<h2 id=\"构建单线程-web-server\"><a href=\"#构建单线程-web-server\" class=\"headerlink\" title=\"构建单线程 web server\"></a>构建单线程 <strong>web server</strong></h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::io::prelude::*;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;net::TcpListener, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:8989\"</span>).unwrap();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"bind success\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> stream <span class=\"keyword\">in</span> listener.incoming() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> stream = stream.unwrap();</span><br><span class=\"line\">        handle_connection(stream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">handle_connection</span></span>(<span class=\"keyword\">mut</span> stream: std::net::TcpStream) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> buffer = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];</span><br><span class=\"line\">    stream.read(&amp;<span class=\"keyword\">mut</span> buffer).unwrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> get = <span class=\"string\">b\"GET / HTTP/1.1\\r\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sleep = <span class=\"string\">b\"GET /sleep HTTP/1.1\\r\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (status_line, file_name) = <span class=\"keyword\">if</span> buffer.starts_with(get) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"get\"</span>);</span><br><span class=\"line\">        (<span class=\"string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span>, <span class=\"string\">\"hello.html\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> buffer.starts_with(sleep) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">        thread::sleep(Duration::from_secs(<span class=\"number\">3</span>));</span><br><span class=\"line\">        (<span class=\"string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span>, <span class=\"string\">\"hello.html\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"not found\"</span>);</span><br><span class=\"line\">        (<span class=\"string\">\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\"</span>, <span class=\"string\">\"404.html\"</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// response</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = std::fs::read_to_string(file_name).unwrap();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"built_in\">format!</span>(<span class=\"string\">\"&#123;&#125;&#123;&#125;\"</span>, status_line, content);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// write to client</span></span><br><span class=\"line\">    stream.write(response.as_bytes()).unwrap();</span><br><span class=\"line\">    stream.flush().unwrap();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/rust/index.html","content":"<h2 id=\"let-pattern-destructure-模-式解构\"><a href=\"#let-pattern-destructure-模-式解构\" class=\"headerlink\" title=\"let:pattern destructure(模 式解构)\"></a>let:pattern destructure(模 式解构)</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span>(<span class=\"built_in\">String</span>, <span class=\"built_in\">i32</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span> &#123;</span><br><span class=\"line\">    x: <span class=\"built_in\">i32</span>,</span><br><span class=\"line\">    y: <span class=\"built_in\">i32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">foo</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = Person(<span class=\"built_in\">String</span>::from(<span class=\"string\">\"shibin\"</span>), <span class=\"number\">18</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> Person(name, age) = p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = Point &#123; x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> Point &#123; x, y &#125; = p;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = &#123;:?&#125;\"</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Age</span></span> = <span class=\"built_in\">u32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> x : Age = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 别名 + 泛型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Double</span></span>&lt;T&gt; = (T, <span class=\"built_in\">Vec</span>&lt;T&gt;); <span class=\"comment\">// tuple,</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h2><ul>\n<li>全局变量必须在声明的时候马上初始化; </li>\n<li>全局变量的初始化必须是编译期可确定的常量，不能包括执行期才能确定的表达式、语句和函数调用; </li>\n<li>带有mut修饰的全局变量，在使用的时候必须使用unsafe关键字。</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> GLOBAL: <span class=\"built_in\">i32</span> = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2>"},{"url":"/rust/7.%20Managing%20Growing%20Projects%20with%20Packages,%20Crates,%20and%20Modules.html","content":"<p>模块系统(the module system)</p>\n<ul>\n<li>包(<em>Packages</em>): Cargo 的一个功能，它允许你构建、测试和分享 crate。 </li>\n<li><strong>Crates</strong> :一个模块的树形结构，它形成了库或二进制项目。</li>\n<li>模块(<em>Modules</em>)和 <strong>use</strong>: 允许你控制作用域和路径的私有性。 </li>\n<li>路径(<em>path</em>):一个命名例如结构体、函数或模块等项的方式</li>\n</ul>\n<h2 id=\"包和-crate\"><a href=\"#包和-crate\" class=\"headerlink\" title=\"包和 crate\"></a>包和 <strong>crate</strong></h2><p>crate 是一个二进制项或者库</p>\n<p>规则:</p>\n<ul>\n<li>一个包中至多 只能 包含一个库 crate(library crate); </li>\n<li>包中可以包含任意多个二进制 crate(binary crate);</li>\n<li>包中至少包含一个 crate，无论是库的还是 二进制的。</li>\n</ul>\n<p><em>src/main.rs</em> 就是一个与包同名的二进制 crate 的 crate 根</p>\n<p>如果包目录中包含 <em>src/lib.rs*，则包带有与其同名的库 crate，且 *src/lib.rs</em> 是 crate 根</p>\n<h2 id=\"定义模块来控制作用域与私有性\"><a href=\"#定义模块来控制作用域与私有性\" class=\"headerlink\" title=\"定义模块来控制作用域与私有性\"></a>定义模块来控制作用域与私有性</h2><p>模块 让我们可以将一个 crate 中的代码进行分组，以提高可读性与重用性</p>\n<p>模块树 (<em>module tree</em>)</p>\n<p>crate<br>     └── front_of_house</p>\n<p>​            ├── hosting</p>\n<p>​           │          ├── add_to_waitlist</p>\n<p>​           │          └── seat_at_table</p>\n<p>​           └── serving</p>\n<p>​                         ├── take_order </p>\n<p>​                         ├── serve_order </p>\n<p>​                        └── take_payment</p>\n<h2 id=\"路径用于引用模块树中的项\"><a href=\"#路径用于引用模块树中的项\" class=\"headerlink\" title=\"路径用于引用模块树中的项\"></a>路径用于引用模块树中的项</h2><ul>\n<li>绝对路径(<em>absolute path</em>)从 crate 根开始，以 crate 名或者字面值 crate 开头。 </li>\n<li>相对路径(<em>relative path</em>)从当前模块开始，以 self 、 super 或当前模块的标识符开 头。</li>\n</ul>\n<h3 id=\"使用-super-起始的相对路径\"><a href=\"#使用-super-起始的相对路径\" class=\"headerlink\" title=\"使用 super 起始的相对路径\"></a>使用 <strong>super</strong> 起始的相对路径</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">serve_order</span></span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> back_of_house &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">fix_incorrect_order</span></span>() &#123;</span><br><span class=\"line\">        cook_order();</span><br><span class=\"line\">        super::serve_order();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">cook_order</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用-use-关键字将名称引入作用域\"><a href=\"#使用-use-关键字将名称引入作用域\" class=\"headerlink\" title=\"使用 use 关键字将名称引入作用域\"></a>使用 <strong>use</strong> 关键字将名称引入作用域</h2><h3 id=\"使用-as-关键字提供新的名称\"><a href=\"#使用-as-关键字提供新的名称\" class=\"headerlink\" title=\"使用 as 关键字提供新的名称\"></a>使用 <strong>as</strong> 关键字提供新的名称</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::fmt::<span class=\"built_in\">Result</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::io::<span class=\"built_in\">Result</span> <span class=\"keyword\">as</span> IoResult;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">function1</span></span>() -&gt; <span class=\"built_in\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// --snip--</span></span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">function2</span></span>() -&gt; IoResult&lt;()&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// --snip--</span></span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用-pub-use-重导出名称\"><a href=\"#使用-pub-use-重导出名称\" class=\"headerlink\" title=\"使用 pub use 重导出名称\"></a>使用 <strong>pub use</strong> 重导出名称</h3><h3 id=\"使用外部包\"><a href=\"#使用外部包\" class=\"headerlink\" title=\"使用外部包\"></a>使用外部包</h3><h3 id=\"嵌套路径来消除大量的-use-行\"><a href=\"#嵌套路径来消除大量的-use-行\" class=\"headerlink\" title=\"嵌套路径来消除大量的 use 行\"></a>嵌套路径来消除大量的 <strong>use</strong> 行</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::io::&#123;<span class=\"keyword\">self</span>, Write&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-glob-运算符将所有的公有定义引入作用域\"><a href=\"#通过-glob-运算符将所有的公有定义引入作用域\" class=\"headerlink\" title=\"通过 glob 运算符将所有的公有定义引入作用域\"></a>通过 <strong>glob</strong> 运算符将所有的公有定义引入作用域</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::collections::*;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"将模块分割进不同文件\"><a href=\"#将模块分割进不同文件\" class=\"headerlink\" title=\"将模块分割进不同文件\"></a>将模块分割进不同文件</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> crate::front_of_house::hosting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">eat_at_restaurant</span></span>() &#123;</span><br><span class=\"line\">    hosting::add_to_waitlist();</span><br><span class=\"line\">    hosting::add_to_waitlist();</span><br><span class=\"line\">    hosting::add_to_waitlist();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 mod front_of_house 后使用分号，而不是代码块，这将告诉 Rust 在另一个与模块同名的 文件中加载模块的内容</p>\n<p>src/front_of_house.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hosting &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>重构</strong>:保持<em>模块树</em></p>\n<p>src/front_of_house.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hosting;</span><br></pre></td></tr></table></figure>\n\n<p>src/front_of_house/hosting.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">add_to_waitlist</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/spring/%E8%AE%A4%E8%AF%86.html","content":"<p><img data-src=\".assets/image-20200815120351847.png\" alt=\"image-20200815120351847\"></p>\n<p><img data-src=\".assets/image-20200815120458283.png\" alt=\"image-20200815120458283\"></p>\n<p><img data-src=\".assets/image-20200815120555518.png\" alt=\"image-20200815120555518\"></p>\n<p><img data-src=\".assets/image-20200815120900267.png\" alt=\"image-20200815120900267\"></p>\n<p><img data-src=\".assets/image-20200815121111743.png\" alt=\"image-20200815121111743\"></p>\n<p><img data-src=\".assets/image-20200815121048231.png\" alt=\"image-20200815121048231\"></p>\n<p><img data-src=\".assets/image-20200816110309238.png\" alt=\"image-20200816110309238\"></p>\n<p><img data-src=\".assets/image-20200816110328188.png\" alt=\"image-20200816110328188\"></p>\n"},{"title":"Tags","url":"/tags/index.html","content":""},{"url":"/unix/environment.html","content":"<p>环境变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span>** environ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; environ[i]; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, environ[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>相关函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getenv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>; <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setenv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value, <span class=\"keyword\">int</span> overwrite)</span></span>; <span class=\"comment\">// 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">putenv</span><span class=\"params\">(<span class=\"keyword\">char</span> *<span class=\"built_in\">string</span>)</span></span>; <span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">unsetenv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>; <span class=\"comment\">// unset</span></span><br></pre></td></tr></table></figure>\n\n"},{"url":"/unix/%E8%BF%9B%E7%A8%8B.html","content":"<p>fork()</p>\n<p>getpid()</p>\n<p>getppid()</p>\n"},{"title":"Utility library Overview","url":"/c++/general-utilities-library/index.html","content":""},{"title":"C++ language","url":"/c++/language/index.html","content":"<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2Jhc2ljX2NvbmNlcHRz\">Basic concepts<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2tleXdvcmQ=\">C++ Keywords<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL3ByZXByb2Nlc3Nvcg==\">Preprocessor<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2V4cHJlc3Npb25z\">Expressions<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2RlY2xhcmF0aW9ucw==\">Declaration<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2luaXRpYWxpemF0aW9u\">Initialization<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2Z1bmN0aW9ucw==\">Functions<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL3N0YXRlbWVudHM=\">Statements<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2NsYXNzZXM=\">Classes<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL3RlbXBsYXRlcw==\">Templates<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2V4Y2VwdGlvbnM=\">Exceptions<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong>Miscellaneous</strong></p>\n"},{"url":"/cmake/Modules/index.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC9sYXRlc3QvbWFudWFsL2NtYWtlLW1vZHVsZXMuNy5odG1s\">https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p> 拓展CMake的功能</p>\n</blockquote>\n<h2 id=\"两类\"><a href=\"#两类\" class=\"headerlink\" title=\"两类:\"></a>两类:</h2><ul>\n<li>CMake内置的module</li>\n<li>自己定制的module</li>\n</ul>\n<h2 id=\"其它相关\"><a href=\"#其它相关\" class=\"headerlink\" title=\"其它相关:\"></a>其它相关:</h2><p>变量:<a href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html#variable:CMAKE_MODULE_PATH\" target=\"_blank\" rel=\"noopener\"><code>CMAKE_MODULE_PATH</code></a></p>\n<p>通过include来引入</p>\n<p>cmake --help-module module_name</p>\n<p><strong>CMakeDependentOption</strong></p>\n<blockquote>\n<p>设置一个option依赖于另一个option</p>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(CMakeDependentOption)</span><br><span class=\"line\"></span><br><span class=\"line\">cmake_dependent_option(</span><br><span class=\"line\">    option_var <span class=\"string\">\"docs\"</span></span><br><span class=\"line\">        <span class=\"keyword\">ON</span> <span class=\"string\">\"condition_expreesion\"</span> <span class=\"keyword\">OFF</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如果condition_expreesion是true, option_var是ON, 反之option_var是OFF</p>\n"}]