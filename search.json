[{"title":"译文:Googletest Primer","url":"/Googletest-Primer/","content":"<p>文档:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nb29nbGV0ZXN0L2Jsb2IvbWFzdGVyL2dvb2dsZXRlc3QvZG9jcy9wcmltZXIubWQ=\">https://github.com/google/googletest/blob/master/googletest/docs/primer.md<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"简介-为什么要使用googletest\"><a href=\"#简介-为什么要使用googletest\" class=\"headerlink\" title=\"简介:为什么要使用googletest?\"></a>简介:为什么要使用googletest?</h2><p><em>googletest</em>能帮助你写更好的C++测试代码.</p>\n<p>googletest是由测试技术团队根据Google的特定要求和约束来开发的测试框架. 不管你是在Linux,windows,还是Mac上工作,如果你写C++代码, googletest能帮助到你,它能支持运行任何类型的测试,不仅仅是支持unit tests.</p>\n<a id=\"more\"></a>\n\n<p>那么什么是一个好的测试,以及googletest是如何做到这些的? 我们相信:</p>\n<ol>\n<li>测试应该是独立和重复的.调试一个成功或是失败做其它测试的结果是一件很痛苦的事.googletest通过让他们运行在不同的object上来隔离它们.当一个测试fails,googletest允许你在单独的运行它进行快速调试</li>\n<li>测试应该组织得井井有条,并能反映出测试代码的结构.googletest将相关的测试分组到能共享数据和子程序的测试大几中,这个觉的落木模式让识别,并且使得测试易于维护.当人们切换项目,在新的代码仓库开始工作,这种一致性会非常的有用</li>\n<li>测试应该是可移植和可重复使用的.Google有很多和平台无关的代码,它们的测试也应该是和平台无关的.googletest能使用不同的编译器,使用或不使用异常,工作在不同的系统上.所以googletest能使用多种配置工作</li>\n<li>当测试失败,它们应该提供尽可能多的关于问题的信息.googletest不会在当第一个测试失败的时候停止,相反,它仅仅停止当前的测试,并会继续下一个测试,同时你也可以配置报告没有致命故障的测试,然后进行当前的测试.因此,你能在单个run-edit-compile循环中检测和修复多个bug.</li>\n<li>测试框架应该让测试者从乱七八糟的事情中解放出来,并专注于测试内容上.googletest会自动的跟踪所有的测试,并且不需要用户去列举他们,即可运行他们</li>\n<li>测试应该是非常快的.使用googletest,你能在不同的测试之间共享数据,这些只需要配置/拆卸一次,而不需要让测试相互依赖</li>\n</ol>\n<p>由于googletest基于流行的xUnit架构,如果你以前已经使用过JUnit或是PyUnit,你会感到宾至如归.如果没有使用过,它会话费大约10分钟去学习基础,然后开始</p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>当使用googletest,开始编写检查条件是不是真的<em>断言</em>,一个<em>断言</em>的结果可能是成功,非致命的故障,或是致命的故障.如果一个致命的故障出现了,它会终止当前的函数;反之,他会正常的继续运行</p>\n<p>测试使用断言来验证用户的行为.如果测试崩溃或是有一个失败的断言,则这个测试失败了,反之这个测试成功了</p>\n<p><em>Tests</em> use assertions to verify the tested code&#39;s behavior. If a test crashes or has a failed assertion, then it <em>fails</em>; otherwise it <em>succeeds</em>.</p>\n<p>A <em>test suite</em> contains one or many tests. You should group your tests into test suites that reflect the structure of the tested code. When multiple tests in a test suite need to share common objects and subroutines, you can put them into a <em>test fixture</em> class.</p>\n<p>A <em>test program</em> can contain multiple test suites.</p>\n<p>We&#39;ll now explain how to write a test program, starting at the individual assertion level and building up to tests and test suites.</p>\n","categories":["Test"],"tags":["Test","googletest"]},{"title":"理解命令行程序","url":"/Understand-Command-Line-Programming/","content":"<blockquote>\n<p>本来是不想写这篇文章的,在写<code>理解Git</code>的时候,发现关于命令行的知识点一两句讲不完,就间单独来写一篇文章,就有了你看到的</p>\n</blockquote>\n<blockquote>\n<p> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTIyNDc2ODYw\">Hacker News<i class=\"fa fa-external-link-alt\"></i></span></strong>上有一个关于man手册的讨论非常有意思:<strong>对于Gui程序,界面可以去指导/指示用户去如何使用程序;而对于命令行的程序你必需去阅读man手册才能了解如何去使用它,所以应该把命令行的man手册视为命令行程序的一部分</strong></p>\n</blockquote>\n<p><strong>命令行程序</strong>: 程序 + 手册</p>\n<a id=\"more\"></a>\n\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><h2 id=\"手册\"><a href=\"#手册\" class=\"headerlink\" title=\"手册\"></a>手册</h2><p><strong>如果去查看一个命令行的帮助手册</strong></p>\n<ul>\n<li>包括哪些部分</li>\n<li>SYNOPSIS中的语法含义<ul>\n<li><code>[...]</code>:可选</li>\n<li><code>a|b</code>:二选一</li>\n<li><code>&lt;command&gt;</code>:强制一定要写</li>\n</ul>\n</li>\n</ul>\n","categories":["cmd"],"tags":["help","manual"]},{"title":"理解 Git","url":"/Understand-Git/","content":"<blockquote>\n<p>Git的学习曲线和难度相对较高,理解内部的原理和一些核心概念对使用git帮助极大</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"Git学习的难度在哪里？\"><a href=\"#Git学习的难度在哪里？\" class=\"headerlink\" title=\"Git学习的难度在哪里？\"></a>Git学习的难度在哪里？</h2><p><strong>命令多</strong>:tab键一个就200多个,选项更多</p>\n<p><strong>一个命令多种用途</strong>:add命令</p>\n<ul>\n<li>跟踪文件</li>\n<li>添加到暂存区</li>\n<li>修改冲突文件后,用add来标记这个冲突已经解决</li>\n</ul>\n<p><strong>有些命令是组合命令</strong>:一个命令可以包含多个命令（隐藏操作）</p>\n<p><strong>如果不明白原理,可以文档都看不懂</strong>:git help push</p>\n<h2 id=\"认识Git仓库-git目录\"><a href=\"#认识Git仓库-git目录\" class=\"headerlink\" title=\"认识Git仓库.git目录\"></a>认识Git仓库.git目录</h2><h2 id=\"Git的工作模型？\"><a href=\"#Git的工作模型？\" class=\"headerlink\" title=\"Git的工作模型？\"></a>Git的工作模型？</h2><ul>\n<li>Untrack -- Unmodified -- Modified -- Staged </li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1CYXNpY3MtUmVjb3JkaW5nLUNoYW5nZXMtdG8tdGhlLVJlcG9zaXRvcnk=\">https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://git-scm.com/book/en/v2/images/lifecycle.png\" alt=\"The lifecycle of the status of your files.\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1CcmFuY2hpbmctQnJhbmNoZXMtaW4tYS1OdXRzaGVsbA==\">https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://git-scm.com/book/en/v2/images/branch-and-history.png\" alt=\"A branch and its commit history.\"></p>\n<p><img data-src=\"https://git-scm.com/book/en/v2/images/commit-and-tree.png\" alt=\"A commit and its tree.\"></p>\n<p><strong>git中的三大对象objects</strong></p>\n<ul>\n<li>commit object:保存提交信息(项目快照,时间,作者,备注)</li>\n<li>tree object:目录</li>\n<li>blob:文件</li>\n</ul>\n<h2 id=\"Git中的HEAD指的是什么？\"><a href=\"#Git中的HEAD指的是什么？\" class=\"headerlink\" title=\"Git中的HEAD指的是什么？\"></a>Git中的HEAD指的是什么？</h2><ul>\n<li>文件存储位置./.git/HEAD(linux:一切皆文件)</li>\n<li>指向的是分支,而分支是指向当前分支的最后一个commit</li>\n<li>代表当前工作目录中的文件是基于哪个commit的</li>\n</ul>\n<h2 id=\"Git保存的是文件的修改还是文件的全部内容？\"><a href=\"#Git保存的是文件的修改还是文件的全部内容？\" class=\"headerlink\" title=\"Git保存的是文件的修改还是文件的全部内容？\"></a>Git保存的是文件的修改还是文件的全部内容？</h2><blockquote>\n<p>保存文件的全部内容</p>\n</blockquote>\n<h2 id=\"Git是如何管理存储文件的？\"><a href=\"#Git是如何管理存储文件的？\" class=\"headerlink\" title=\"Git是如何管理存储文件的？\"></a>Git是如何管理存储文件的？</h2><blockquote>\n<p>对文件内容进行hash,用于目录和文件名,内容进行二进制缩,存储在.git/objecs目录下</p>\n</blockquote>\n<h2 id=\"Git新建分支为什么非常的快？\"><a href=\"#Git新建分支为什么非常的快？\" class=\"headerlink\" title=\"Git新建分支为什么非常的快？\"></a>Git新建分支为什么非常的快？</h2><blockquote>\n<p>它不需要拷贝当前项目的所有文件,它只需要基于commit新建几个文件</p>\n</blockquote>\n<h2 id=\"Git中隐藏的操作\"><a href=\"#Git中隐藏的操作\" class=\"headerlink\" title=\"Git中隐藏的操作\"></a>Git中隐藏的操作</h2><ul>\n<li>gc打包</li>\n<li>zlib压缩</li>\n</ul>\n<p>hash-object</p>\n<p>References:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2Nz\">https://git-scm.com/docs<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1JbnRlcm5hbHMtUGx1bWJpbmctYW5kLVBvcmNlbGFpbg==\">https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi90ZWNobmljYWw=\">https://github.com/git/git/blob/master/Documentation/technical<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vcmVzdWx0cz9zZWFyY2hfcXVlcnk9Z2l0K2ludGVybmFs\">https://www.youtube.com/results?search_query=git+internal<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taW5jb25nLmlvLzIwMTgvMDQvMjgvZ2l0LWluZGV4Lw==\">https://mincong.io/2018/04/28/git-index/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["git"],"tags":["git"]},{"title":"Homebrew","url":"/Homebrew/","content":"<h2 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h2><blockquote>\n<p><strong>The Missing Package(软件) Manager for macOS (or Linux)</strong></p>\n</blockquote>\n<p>在Mac/Linux缺失的软件包管理器</p>\n<ul>\n<li>App Store --&gt; GUI,官方</li>\n<li>Homebrew --&gt; CMD,第三方维护</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要用它？\"><a href=\"#为什么要用它？\" class=\"headerlink\" title=\"为什么要用它？\"></a>为什么要用它？</h2><p><strong>Apple自己家的App Store</strong>:</p>\n<ul>\n<li>只能下载最新版的软件</li>\n<li>开发者发交钱。注册苹果开发者账号，几百的年费</li>\n<li>上传一个程序需要经过苹果公司的审核（尤其是第一次上传一个新的软件，有的甚至会等几个月）</li>\n<li>没有命令行和服务类程序下载，管理</li>\n</ul>\n<h2 id=\"怎么用？\"><a href=\"#怎么用？\" class=\"headerlink\" title=\"怎么用？\"></a>怎么用？</h2><h3 id=\"Install安装\"><a href=\"#Install安装\" class=\"headerlink\" title=\"Install安装\"></a>Install安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>既然Homebrew和App store的作用是类似的，就来类比来学习这款软件的使用</p>\n</blockquote>\n<h3 id=\"App-store有什么样的功能\"><a href=\"#App-store有什么样的功能\" class=\"headerlink\" title=\"App store有什么样的功能\"></a>App store有什么样的功能</h3><p><strong>用户的角度</strong></p>\n<ul>\n<li>搜索软件</li>\n<li>查看软件信息</li>\n<li>安装软件</li>\n<li>更新软件</li>\n<li>安装了哪些软件</li>\n<li>卸载</li>\n</ul>\n<p><strong>开发者、管理者</strong></p>\n<ul>\n<li>上传软件包，提交相交信息</li>\n<li>文件服务器</li>\n</ul>\n<h3 id=\"和Hombrew相关的命令\"><a href=\"#和Hombrew相关的命令\" class=\"headerlink\" title=\"和Hombrew相关的命令\"></a>和Hombrew相关的命令</h3><ul>\n<li>brew help: 查看brew的帮助文档</li>\n<li>brew help sub_cmd: 查看brew子命令的帮助文档</li>\n<li>brew home：转跳到Homebrew的官网</li>\n<li>brew config: 查看Homebrew配置</li>\n<li>brew commands: 查看Homebrew有哪些命令</li>\n<li>brew list: 查看通过brew装了哪些软件</li>\n<li>brew info: 装了多少软件，有多少个文件，占用多少空间</li>\n<li>brew update: 更新Homebrew软件</li>\n<li>brew cleanup: 清理</li>\n<li>brew outdatad: 查看有哪些已经的软件有新版本</li>\n<li><strong>brew doctor</strong>: 检查你系统中可能存在的问题</li>\n<li>brew --version: Homebrew版本</li>\n<li>brew --repo: Homebrew仓库位置</li>\n<li>brew --cache: Homebrew下载软件的缓存位置</li>\n<li>brew --cellar: Homebrew安装CMD软件的位置</li>\n</ul>\n<h3 id=\"和安装CMD软件相关的命令\"><a href=\"#和安装CMD软件相关的命令\" class=\"headerlink\" title=\"和安装CMD软件相关的命令\"></a>和安装CMD软件相关的命令</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvQm90dGxlcw==\">https://docs.brew.sh/Bottles<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p><strong>Bottle</strong>:</p>\n</blockquote>\n<ul>\n<li>brew search formula: 搜索某个软件</li>\n<li>brew info formula: 查看软件的info</li>\n<li>brew home formula: 转跳到对应软件主页</li>\n<li>brew install formula: 安装软件</li>\n<li>brew upgrade formula: 更新软件</li>\n<li>brew reinstall formula: 重装软件</li>\n<li>brew uninstall formula: 卸载软件</li>\n<li>brew fetch formula: 下载，不安装</li>\n<li>brew deps formula: 查看软件依赖的相关软件</li>\n<li>brew pin formula: 锁定软件版本，防止upgrade的时候更新软件</li>\n<li>brew unpin formula: 解除锁定，和上面相反</li>\n<li>brew log formula：查看软件的更新日志log</li>\n</ul>\n<h3 id=\"和安装macOS-native-apps相关的命令\"><a href=\"#和安装macOS-native-apps相关的命令\" class=\"headerlink\" title=\"和安装macOS native apps相关的命令\"></a>和安装macOS native apps相关的命令</h3><blockquote>\n<p>Cask: 用来安装Mac native apps(GUI:有界面)</p>\n</blockquote>\n<ul>\n<li>brew help cask: 查看相关cask的帮助文档</li>\n<li>brew cask home formula: 转跳到对应软件主页</li>\n<li>brew cask info formula: 相关info</li>\n<li>brew cask list: list</li>\n<li>brew cask install formula</li>\n<li>brew cask upgrade formula</li>\n<li>brew cask reinstall formula</li>\n<li>brew cask uninstall formula</li>\n<li>brew cask fetch formula: 下载，不安装</li>\n<li>brew cask outdated formula: 查看有哪些已经的软件有新版本</li>\n<li>brew cask zap formula: 删除和软件相关的所有文件</li>\n</ul>\n<h3 id=\"和Service相关的命令\"><a href=\"#和Service相关的命令\" class=\"headerlink\" title=\"和Service相关的命令\"></a>和Service相关的命令</h3><blockquote>\n<p>使用macOS的launchctl（1）守护程序管理器管理后台服务(postgresql,es...)</p>\n<ul>\n<li>launchd 去特定的目录去加载启动配置文件. 制定规则</li>\n<li>homebrew:生成/删除文件</li>\n<li>postgresql:提供启动命令</li>\n</ul>\n</blockquote>\n<ul>\n<li>brew help services</li>\n<li>[sudo] brew services [list]: 显示服务程序列表,及运行状态</li>\n<li>[sudo] brew services run (formula|--all): 运行服务，但没有注册开机启动</li>\n<li>[sudo] brew services start (formula|--all): 运行服务，同时注册开机启动</li>\n<li>[sudo] brew services stop (formula|--all): 停止服务，并且删除开机启动</li>\n<li>[sudo] brew services restart (formula|--all): 重启服务</li>\n<li>[sudo] brew services cleanup: Remove all unused services.</li>\n</ul>\n<h3 id=\"和软件仓库Taps相关的命令\"><a href=\"#和软件仓库Taps相关的命令\" class=\"headerlink\" title=\"和软件仓库Taps相关的命令\"></a>和软件仓库Taps相关的命令</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvVGFwcw==\">https://docs.brew.sh/Taps<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>Taps (Third-Party Repositories):软件集合的仓库</p>\n</blockquote>\n<ul>\n<li>brew tap</li>\n<li>brew untap</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew tap</span></span><br><span class=\"line\">elastic/tap</span><br><span class=\"line\">homebrew/cask</span><br><span class=\"line\">homebrew/cask-versions</span><br><span class=\"line\">homebrew/core</span><br><span class=\"line\">homebrew/services</span><br></pre></td></tr></table></figure>\n\n<p>homebrew/cask --&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hvbWVicmV3L2hvbWVicmV3LWNhc2s=\">https://github.com/homebrew/homebrew-cask<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Github: username/homebrew-tapname</p>\n<p><strong>Elastic Stack</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMvaG9tZWJyZXctdGFw\">https://github.com/elastic/homebrew-tap<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew tap elastic/tap</span><br><span class=\"line\">$ brew install elastic/tap/elasticsearch-full</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"和开发者相关的命令\"><a href=\"#和开发者相关的命令\" class=\"headerlink\" title=\"和开发者相关的命令\"></a>和开发者相关的命令</h3><p>...</p>\n<h2 id=\"内部原理\"><a href=\"#内部原理\" class=\"headerlink\" title=\"内部原理\"></a>内部原理</h2><h3 id=\"安装的时候做了什么\"><a href=\"#安装的时候做了什么\" class=\"headerlink\" title=\"安装的时候做了什么\"></a>安装的时候做了什么</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>curl 下载安装脚本</li>\n<li>/bin/bash执行脚本<ol>\n<li>检查系统及其版本</li>\n<li>检查git有没有装</li>\n<li>准备工作：目录创建，目录权限检查</li>\n<li>检查CommandLineTools</li>\n<li>用git下载Homebrew</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"通过几个命令看看他干了什么\"><a href=\"#通过几个命令看看他干了什么\" class=\"headerlink\" title=\"通过几个命令看看他干了什么\"></a>通过几个命令看看他干了什么</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew search formula</span><br><span class=\"line\">brew install formula</span><br><span class=\"line\">brew cask install wechat</span><br><span class=\"line\">brew update</span><br><span class=\"line\">brew upgrade postgresql</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://raw.githubusercontent.com/WShiBin/pic-repo/master/20200614014551-homebrew_internal.png\" alt=\"\"></p>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><h3 id=\"Homebrew相关的配置\"><a href=\"#Homebrew相关的配置\" class=\"headerlink\" title=\"Homebrew相关的配置\"></a>Homebrew相关的配置</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRm9ybXVsYS1Db29rYm9vayNob21lYnJldy10ZXJtaW5vbG9neQ==\">https://docs.brew.sh/Formula-Cookbook#homebrew-terminology<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>Homebrew程序安装位置：/usr/local/Homebrew/</li>\n<li>Taps仓库位置：/usr/local/Homebrew/Library/Taps</li>\n<li>Homebrew下载缓存的位置：~/Library/Caches/Homebrew</li>\n<li>CMD程序的位置：/usr/local/Cellar</li>\n<li>CMD程序创建链接文件位置：/usr/local/opt/</li>\n<li>程序配置目录：/usr/local，~/.config，<code>查看相关软件文档</code></li>\n</ul>\n<h3 id=\"更换源\"><a href=\"#更换源\" class=\"headerlink\" title=\"更换源\"></a>更换源</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==\">清华大学<i class=\"fa fa-external-link-alt\"></i></span> ，<span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24v\">中科大<i class=\"fa fa-external-link-alt\"></i></span><strong>以网站上文档为准</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Homebrew 源</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Homebrew Core 源</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Homebrew Cask 源</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更换后测试工作是否正常</span></span><br><span class=\"line\">brew update -v</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Homebrew Bottles 源</span></span><br><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zsh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭自动更新\"><a href=\"#关闭自动更新\" class=\"headerlink\" title=\"关闭自动更新\"></a>关闭自动更新</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_AUTO_UPDATE=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭匿名上传数据\"><a href=\"#关闭匿名上传数据\" class=\"headerlink\" title=\"关闭匿名上传数据\"></a>关闭匿名上传数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_ANALYTICS=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建自己的仓库和软件\"><a href=\"#创建自己的仓库和软件\" class=\"headerlink\" title=\"创建自己的仓库和软件\"></a>创建自己的仓库和软件</h2><p><strong>创建自己的仓库：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvSG93LXRvLUNyZWF0ZS1hbmQtTWFpbnRhaW4tYS1UYXA=\">https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>如果把tap仓库放在Github管理</p>\n<p>brew tap user/repo<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3VzZXIvaG9tZWJyZXctcmVwbw==\">https://github.com/user/homebrew-repo<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>创建自己的软件：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRm9ybXVsYS1Db29rYm9vaw==\">https://docs.brew.sh/Formula-Cookbook<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvRkFR\">https://docs.brew.sh/FAQ<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmJyZXcuc2gvVmVyc2lvbnM=\">https://docs.brew.sh/Versions<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2hvbWVicmV3\">https://stackoverflow.com/questions/tagged/homebrew<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"如何安装老版本软件：\"><a href=\"#如何安装老版本软件：\" class=\"headerlink\" title=\"如何安装老版本软件：\"></a>如何安装老版本软件：</h3><h4 id=\"大的老版本：\"><a href=\"#大的老版本：\" class=\"headerlink\" title=\"大的老版本：\"></a>大的老版本：</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew search postgresql</span></span><br><span class=\"line\">postgresql ✔                       postgresql@10                      postgresql@11</span><br><span class=\"line\">postgresql@9.4                     postgresql@9.5                     postgresql@9.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特定版本：\"><a href=\"#特定版本：\" class=\"headerlink\" title=\"特定版本：\"></a>特定版本：</h4><blockquote>\n<p>通过git找到对应软件版本的安装文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew <span class=\"built_in\">log</span> postgresql</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core \t\t<span class=\"comment\"># 切换到对应的软件仓库里面</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard bed9405b1f31ec884d4d047c294394873015f4a1</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew uninstall postgresql</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install postgresql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew upgrade postgresql</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>搜索慢，还不</p>\n","tags":["Homebrew"]},{"title":"本站搭建相关文档","url":"/%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/","content":"<blockquote>\n<p>写这篇文章是为了自己在修改本站时，方便查找相关文档</p>\n</blockquote>\n<p>本站基于：Hexo(Next主题) + Github Pages</p>\n<a id=\"more\"></a>\n\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><ul>\n<li>Hexo：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">doc<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Next-theme：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0\">repo<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=\">doc<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Github：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dTaGlCaW4vd3NoaWJpbi5naXRodWIuaW8=\">repo<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>相关常用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo version                                <span class=\"comment\"># version</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo --<span class=\"built_in\">help</span>                                 <span class=\"comment\"># help信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo sub_cmd                                <span class=\"comment\"># 子命令help信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init [folder]                          <span class=\"comment\"># 新建网站</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new [layout] &lt;title&gt;                   <span class=\"comment\"># 新建页面 layout:post(Default)/page/draft</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new page --path about/me <span class=\"string\">\"About me\"</span>    <span class=\"comment\"># Customize the path of the post</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo publish [layout] &lt;filename&gt;            <span class=\"comment\"># publish draft</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo render file_name                       <span class=\"comment\"># 把md文件渲染成html文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo list &lt;<span class=\"built_in\">type</span>&gt;                            <span class=\"comment\"># 显示网站相关信息types: page, post, route, tag, category</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo server/s                               <span class=\"comment\"># 本地运行</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo generate/g                             <span class=\"comment\"># 生成网站</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo deploy/d                               <span class=\"comment\"># 部署</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo clean                                  <span class=\"comment\"># 清理生成的网站和cache</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><p>相关网站源码参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC5vcmc=\">theme-next.org<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next.org</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> theme-next.org</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh ./hexo-theme-next-autoinstall.sh</span></span><br></pre></td></tr></table></figure>\n\n<p>主题update</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> themes/next</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull</span></span><br></pre></td></tr></table></figure>\n\n","tags":["Hexo","Next"]},{"title":"404","url":"//404.html","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">404</span><br><span class=\"line\">\tnot</span><br><span class=\"line\">\t\tfound</span><br><span class=\"line\">\t\t\t4444      4444    0000000000    4444      4444</span><br><span class=\"line\">\t\t\t4444      4444  00000000000000  4444      4444</span><br><span class=\"line\">\t\t\t4444      4444  0000      0000  4444      4444</span><br><span class=\"line\">\t\t\t44444444444444  0000      0000  44444444444444</span><br><span class=\"line\">\t\t\t 4444444444444  0000      0000   4444444444444</span><br><span class=\"line\">\t\t\t          4444  0000      0000            4444</span><br><span class=\"line\">\t\t\t          4444  0000      0000            4444</span><br><span class=\"line\">\t\t\t          4444  00000000000000            4444</span><br><span class=\"line\">\t\t\t          4444    0000000000              4444</span><br><span class=\"line\">\t\tnot</span><br><span class=\"line\">\tfound</span><br><span class=\"line\">404</span><br></pre></td></tr></table></figure>\n"},{"url":"/crowdin.json","content":"{\"files\":[{\"source\":\"/source/**/*.md\",\"ignore\":[\"/source/_posts/*\"],\"translation\":\"/source/%two_letters_code%/**/%original_file_name%\"}]}"},{"url":"/rust/11.%20Writing%20Automated%20Tests.html","content":""},{"url":"/rust/14.%20More%20about%20Cargo%20and%20Crates.io.html","content":""},{"title":"Archives","url":"/archives/index.html","content":""},{"title":"C++ Overview","url":"/c++/index.html","content":"<blockquote>\n<p>用来记录对 C++的理解,参考资料,示例代码</p>\n</blockquote>\n<p>文档参考:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cv\">https://en.cppreference.com/w/<i class=\"fa fa-external-link-alt\"></i></span> <strong>文档</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3BsdXNwbHVzLmNvbS8=\">https://www.cplusplus.com/<i class=\"fa fa-external-link-alt\"></i></span> <strong>文档</strong>(示例稍多)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc29jcHAub3JnLw==\">https://isocpp.org/<i class=\"fa fa-external-link-alt\"></i></span> <strong>The home of Standard C++</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc29jcHAuZ2l0aHViLmlvL0NwcENvcmVHdWlkZWxpbmVzL0NwcENvcmVHdWlkZWxpbmVz\">https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines<i class=\"fa fa-external-link-alt\"></i></span> <strong>C++ 核心指南</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3N0eWxlZ3VpZGUvY3BwZ3VpZGUuaHRtbA==\">https://google.github.io/styleguide/cppguide.html<i class=\"fa fa-external-link-alt\"></i></span> <strong>Google C++ Style Guide</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sbHZtLm9yZy8=\">https://llvm.org/<i class=\"fa fa-external-link-alt\"></i></span> <strong>LLVM</strong></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZmZmFyYXovYXdlc29tZS1jcHA=\">https://github.com/fffaraz/awesome-cpp<i class=\"fa fa-external-link-alt\"></i></span> <strong>Awesome C++</strong></li>\n</ul>\n"},{"title":"Categories","url":"/categories/index.html","content":""},{"title":"CMake","url":"/cmake/index.html","content":"<p><strong>CMake设计的目标:</strong></p>\n<blockquote>\n<p>提供一组工具，可以在不同平台上配置、构建、测试和部署项目. <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW9zYWJvb2sub3JnL2VuL2NtYWtlLmh0bWw=\">https://www.aosabook.org/en/cmake.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>CMake是一个<strong>构建生成器</strong>，提供了强大的领域特定语言(<strong>DSL</strong>)来描述构建系统应该实现的功能</p>\n<p><img data-src=\"https://static.bookstack.cn/projects/CMake-Cookbook/images/preface/1.png\" alt=\"\"></p>\n<p><strong>CMake软件工具集:</strong></p>\n<ul>\n<li><strong>CMake</strong>是描述如何在所有主要硬件和操作系统上配置、构建和安装项目，无论是构建可执行文件、库，还是两者都要构建。</li>\n<li><strong>CTest</strong>定义测试、测试套件，并设置应该如何执行。</li>\n<li><strong>CPack</strong>为打包需求提供了DSL。</li>\n<li><strong>CDash</strong>将项目的测试结果在面板中展示。</li>\n</ul>\n<p>CMake管理的项目的工作流发生在许多阶段(time)，我们称之为<em>时序</em>。可以简洁地总结如下图：</p>\n<p><img data-src=\"https://static.bookstack.cn/projects/CMake-Cookbook/images/preface/2.png\" alt=\"前言 - 图2\"></p>\n<ul>\n<li><strong>CMake time</strong>或<strong>confighure time</strong>，是CMake运行时的情况。这个阶段中，CMake将处理项目中的CMakeLists.txt文件并配置它。</li>\n<li><strong>Generation time</strong>配置成功后，CMake将生成本地构建工具所需的脚本，以执行项目中的后续步骤。</li>\n<li><strong>Build time</strong>这是在平台和工具原生构建脚本上调用原生构建工具的时候，这些脚本以前是由CMake生成的。此时，将调用编译器，并在特定的构建目录中构建目标(可执行文件和库)。注意递归的CMake time箭头：这看起来令人困惑，但是我们将在本书中多次使用它，用来实现平台无关的构建。</li>\n<li><strong>CTest time</strong>或 <strong>test time</strong>，运行项目的测试套件，以检查目标是否按预期执行。</li>\n<li><strong>CDash time</strong>或<strong>report time</strong>，将测试结果上传到面板，与其他开发人员共享。</li>\n<li><strong>Install time</strong>，将项目的目标、源文件、可执行文件和库从构建目录安装到安装位置。</li>\n<li><strong>CPack time</strong>或<strong>packaging time</strong>，将项目打包以便发布，可以是源代码，也可以是二进制代码。</li>\n<li><strong>Package install time</strong>，在系统范围内安装新生成的包。</li>\n</ul>\n"},{"url":"/git/add.html","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git add *</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将未跟踪的文件加入到跟踪列表中</li>\n<li>将已经跟踪的文件纳入到暂存区中</li>\n<li>修改冲突后add，用来标记这个冲突已经解决了</li>\n</ul>\n<p>TAG</p>\n"},{"url":"/rust/10.%20Generic%20Types,%20Traits,%20and%20Lifetimes.html","content":"<h2 id=\"泛型数据类型Generic-Data-Types\"><a href=\"#泛型数据类型Generic-Data-Types\" class=\"headerlink\" title=\"泛型数据类型Generic Data Types\"></a>泛型数据类型Generic Data Types</h2><p>泛型是具体类型或其他属性的抽象替代,高效的处理重复概念的工具</p>\n<h3 id=\"函数Function中\"><a href=\"#函数Function中\" class=\"headerlink\" title=\"函数Function中\"></a>函数Function中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> largest = list[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &amp;item <span class=\"keyword\">in</span> list.iter() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item &gt; largest &#123;</span><br><span class=\"line\">            largest = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    largest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = largest(&amp;list);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"num = &#123;:?&#125;\"</span>, num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"结构体中\"><a href=\"#结构体中\" class=\"headerlink\" title=\"结构体中\"></a>结构体中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pointer</span></span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    x: T,</span><br><span class=\"line\">    y: U,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> integer = Pointer &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> float = Pointer &#123; x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span> &#125;;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> mul = Pointer &#123; x: <span class=\"number\">10</span>, y: <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"enum中\"><a href=\"#enum中\" class=\"headerlink\" title=\"enum中\"></a>enum中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Option</span></span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(T),</span><br><span class=\"line\">    <span class=\"literal\">None</span>(),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Result</span></span>&lt;T, E&gt; &#123;</span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(T),</span><br><span class=\"line\">    <span class=\"literal\">Err</span>(E),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在方法Method中\"><a href=\"#在方法Method中\" class=\"headerlink\" title=\"在方法Method中\"></a>在方法Method中</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    x: T,</span><br><span class=\"line\">    y: U,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">x</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; &amp;T &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> Point&lt;<span class=\"built_in\">f32</span>, <span class=\"built_in\">f32</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">distance_from_origin</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">f32</span> &#123;</span><br><span class=\"line\">        (<span class=\"keyword\">self</span>.x.powi(<span class=\"number\">2</span>) + <span class=\"keyword\">self</span>.y.powi(<span class=\"number\">2</span>)).sqrt()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">mixup</span></span>&lt;K, W&gt;(<span class=\"keyword\">self</span>, other: Point&lt;K, W&gt;) -&gt; Point&lt;T, W&gt; &#123;</span><br><span class=\"line\">        Point &#123;</span><br><span class=\"line\">            x: (<span class=\"keyword\">self</span>.x),</span><br><span class=\"line\">            y: (other.y),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> integer = Point &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> float: Point&lt;<span class=\"built_in\">f32</span>, <span class=\"built_in\">f32</span>&gt; = Point &#123; x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = integer.x;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = &#123;:?&#125;\"</span>, x);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = float.distance_from_origin();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"s = &#123;:?&#125;\"</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mix = Point &#123; x: <span class=\"number\">10</span>, y: <span class=\"number\">20.0</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mix = float.mixup(mix);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"mix = &#123;:#?&#125;\"</span>, mix);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"泛型代码的性能\"><a href=\"#泛型代码的性能\" class=\"headerlink\" title=\"泛型代码的性能\"></a>泛型代码的性能</h3><blockquote>\n<p>Rust 实现了泛型，使得使用泛型类型参数的代码相比使用具体类型并没有任何速度上的损失</p>\n<p>Rust 通过在编译时进行泛型代码的 <strong>单态化(<em>monomorphization</em>)</strong>来保证效率。单态化是一个 通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程,</p>\n<p>编译器寻找所有泛型代 码被调用的位置并使用泛型代码<strong>针对具体类型生成代码</strong></p>\n</blockquote>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Option_i32</span></span> &#123;</span><br><span class=\"line\">    <span class=\"literal\">Some</span>(<span class=\"built_in\">i32</span>),</span><br><span class=\"line\">    <span class=\"literal\">None</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Option_f64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"literal\">Some</span>(<span class=\"built_in\">f64</span>),</span><br><span class=\"line\">    <span class=\"literal\">None</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// let integer = Some(5); // i32</span></span><br><span class=\"line\">    <span class=\"comment\">// let float = Some(5.0); // f64</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> integer = Option_i32::<span class=\"literal\">Some</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> float = Option_f64::<span class=\"literal\">Some</span>(<span class=\"number\">5.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"trait-定义共享的行为\"><a href=\"#trait-定义共享的行为\" class=\"headerlink\" title=\"trait:定义共享的行为\"></a><strong>trait</strong>:定义共享的行为</h2><p><strong>trait</strong>:这是一个定义泛型行为的方法。trait 可以与泛型结合来将泛型限制为 拥有特定行为的类型，而不是任意类型</p>\n<p>某个特定类型拥有可能与其他类型共享的功能</p>\n<blockquote>\n<p>类似于其它语言中的接口</p>\n</blockquote>\n<ul>\n<li>一个trait可以有多个行为</li>\n<li>语法：一行一个方法签名且都以分号结尾</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Summary</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为类型实现-trait\"><a href=\"#为类型实现-trait\" class=\"headerlink\" title=\"为类型实现 trait\"></a>为类型实现 <strong>trait</strong></h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Summary</span></span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NewsArticle</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> headline: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> location: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> author: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> content: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> Summary <span class=\"keyword\">for</span> NewsArticle &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">\"&#123;&#125;, by &#123;&#125; (&#123;&#125;)\"</span>, <span class=\"keyword\">self</span>.headline, <span class=\"keyword\">self</span>.author, <span class=\"keyword\">self</span>.location)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tweet</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> username: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> content: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> reply: <span class=\"built_in\">bool</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> retweet: <span class=\"built_in\">bool</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> Summary <span class=\"keyword\">for</span> Tweet &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">summarize</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">\"&#123;&#125;: &#123;&#125;\"</span>, <span class=\"keyword\">self</span>.username, <span class=\"keyword\">self</span>.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"默认实现\"><a href=\"#默认实现\" class=\"headerlink\" title=\"默认实现\"></a>默认实现</h3><h3 id=\"trait-作为参数\"><a href=\"#trait-作为参数\" class=\"headerlink\" title=\"trait 作为参数\"></a><strong>trait</strong> 作为参数</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">notify</span></span>(item: <span class=\"keyword\">impl</span> Summary) -&gt; <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">format!</span>(<span class=\"string\">\"breaking news! &#123;&#125;\"</span>, item.summarize())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-指定多个-trait-bound\"><a href=\"#通过-指定多个-trait-bound\" class=\"headerlink\" title=\"通过 + 指定多个 trait bound\"></a>通过 <strong>+</strong> 指定多个 trait bound</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">notify</span></span>(item: <span class=\"keyword\">impl</span> Summary + Display) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">notify</span></span>&lt;T: Summary + Display&gt;(item: T) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-where-简化-trait-bound\"><a href=\"#通过-where-简化-trait-bound\" class=\"headerlink\" title=\"通过 where 简化 trait bound\"></a>通过 <strong>where</strong> 简化 <strong>trait bound</strong></h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">some_function</span></span>&lt;T: Display + <span class=\"built_in\">Clone</span>, U: <span class=\"built_in\">Clone</span> + <span class=\"built_in\">Debug</span>&gt;(t: T, u: U) -&gt; <span class=\"built_in\">i32</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 简化后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">some_function</span></span>&lt;T, U&gt;(t: T, u: U) -&gt; <span class=\"built_in\">i32</span></span><br><span class=\"line\">    <span class=\"keyword\">where</span> T: Display + <span class=\"built_in\">Clone</span>,</span><br><span class=\"line\">          U: <span class=\"built_in\">Clone</span> + <span class=\"built_in\">Debug</span>,</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回实现了-trait-的类型\"><a href=\"#返回实现了-trait-的类型\" class=\"headerlink\" title=\"返回实现了 trait 的类型\"></a>返回实现了 <strong>trait</strong> 的类型</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">returns_summarizable</span></span>() -&gt; <span class=\"keyword\">impl</span> Summary &#123;</span><br><span class=\"line\">    Tweet &#123;</span><br><span class=\"line\">        username: <span class=\"built_in\">String</span>::from(<span class=\"string\">\"horse_ebooks\"</span>),</span><br><span class=\"line\">        content: <span class=\"built_in\">String</span>::from(<span class=\"string\">\"of course, as you probably already know, people\"</span>),</span><br><span class=\"line\">        reply: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        retweet: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-trait-bound-有条件地实现方法\"><a href=\"#使用-trait-bound-有条件地实现方法\" class=\"headerlink\" title=\"使用 trait bound 有条件地实现方法\"></a>使用 <strong>trait bound</strong> 有条件地实现方法</h3><h2 id=\"生命周期与引用有效性\"><a href=\"#生命周期与引用有效性\" class=\"headerlink\" title=\"生命周期与引用有效性\"></a>生命周期与引用有效性</h2><p>Rust 中的每一个引用都有其 生命周期(<em>lifetime</em>)，也就是引用保持有效的作用域</p>\n<p>当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用泛型生命周期参数来注明他们的关系，这样就能确保运行时<strong>实际使用的引用绝对是有效的</strong></p>\n<p>它是一类允许我们向编译器提供引用如何相互关联的泛 型。Rust 的生命周期功能允许在很多场景下借用值的同时仍然使编译器能够检查这些引用的 有效性。</p>\n<h3 id=\"生命周期避免了悬垂引用\"><a href=\"#生命周期避免了悬垂引用\" class=\"headerlink\" title=\"生命周期避免了悬垂引用\"></a>生命周期避免了悬垂引用</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">        x = &amp;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = &#123;:?&#125;\"</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"借用检查器\"><a href=\"#借用检查器\" class=\"headerlink\" title=\"借用检查器\"></a>借用检查器</h3><p>Rust 编译器有一个 <strong>借用检查器</strong>(<em>borrow checker</em>)，它比较作用域来确保所有的借用都是有效的。</p>\n<p>rust会去检查一个变量的生命周期范围</p>\n<h3 id=\"函数中的泛型生命周期\"><a href=\"#函数中的泛型生命周期\" class=\"headerlink\" title=\"函数中的泛型生命周期\"></a>函数中的泛型生命周期</h3><p>生 命周期注解描述了多个引用生命周期相互的关系</p>\n<p>格式:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"built_in\">i32</span> <span class=\"comment\">// 引用</span></span><br><span class=\"line\">&amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">i32</span> <span class=\"comment\">// 带有显式生命周期的引用 </span></span><br><span class=\"line\">&amp;<span class=\"symbol\">'a</span> <span class=\"keyword\">mut</span> <span class=\"built_in\">i32</span> <span class=\"comment\">// 带有显式生命周期的可变引用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"深入理解生命周期\"><a href=\"#深入理解生命周期\" class=\"headerlink\" title=\"深入理解生命周期\"></a>深入理解生命周期</h3><p>生命周期语法是用于将函数的多个参数与其返回值的生命周期进行关联的，Rust 就有了足够的信息来允许内存安全的操作并阻止会产生悬垂指针亦或 是违反内存安全的行为</p>\n<h3 id=\"结构体定义中的生命周期注解\"><a href=\"#结构体定义中的生命周期注解\" class=\"headerlink\" title=\"结构体定义中的生命周期注解\"></a>结构体定义中的生命周期注解</h3><h3 id=\"生命周期省略-Lifetime-Elision\"><a href=\"#生命周期省略-Lifetime-Elision\" class=\"headerlink\" title=\"生命周期省略(Lifetime Elision)\"></a>生命周期省略(<strong>Lifetime Elision</strong>)</h3><blockquote>\n<p>省略规则并不提供完整的推断:如果 Rust 在明确遵守这些规则的前提下变量的生命周期仍然 是模棱两可的话，它不会猜测剩余引用的生命周期应该是什么。在这种情况，编译器会给出 一个错误，这可以通过增加对应引用之间相联系的生命周期注解来解决。</p>\n</blockquote>\n<p>判断引用何时不需要明确的注解:</p>\n<ul>\n<li>第一条规则是每一个是引用的参数都有它自己的生命周期参数。换句话说就是，有一个引用参数的函数有一个生命周期参数: fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) ，有两个引用参数的函数有两个不 同的生命周期参数， fn foo&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a i32, y: &amp;&#39;b i32) ，依此类推。</li>\n<li>第二条规则是如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数: fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) -&gt; &amp;&#39;a i32 。</li>\n<li>第三条规则是如果方法有多个输入生命周期参数，不过其中之一因为方法的缘故为 &amp;self 或 &amp;mut self ，那么 self 的生命周期被赋给所有输出生命周期参数。第三条规则使得方法更容易读写，因为只需更少的符号。</li>\n</ul>\n<h3 id=\"方法定义中的生命周期注解\"><a href=\"#方法定义中的生命周期注解\" class=\"headerlink\" title=\"方法定义中的生命周期注解\"></a>方法定义中的生命周期注解</h3><h3 id=\"静态生命周期\"><a href=\"#静态生命周期\" class=\"headerlink\" title=\"静态生命周期\"></a>静态生命周期</h3><blockquote>\n<p> &#39;static ，其生命周期能够存活于整个程序期间。所 有的字符串字面值都拥有 &#39;static 生命周期</p>\n</blockquote>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s: &amp;<span class=\"symbol\">'static</span> <span class=\"built_in\">str</span> = <span class=\"string\">\"I have a static lifetime.\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结合泛型类型参数、trait-bounds-和生命周期\"><a href=\"#结合泛型类型参数、trait-bounds-和生命周期\" class=\"headerlink\" title=\"结合泛型类型参数、trait bounds 和生命周期\"></a>结合泛型类型参数、<strong>trait bounds</strong> 和生命周期</h3><p>语法</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::fmt::Display;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">longest_with_an_announcement</span></span>&lt;<span class=\"symbol\">'a</span>, T&gt;(x: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>, y: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>, ann: T) -&gt; &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span></span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: Display,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Announcement! &#123;&#125;\"</span>, ann);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.len() &gt; y.len() &#123;</span><br><span class=\"line\">        x</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git","url":"/git/index.html","content":""},{"url":"/rust/12.%20An%20IO%20Project:%20Building%20a%20Command%20Line%20Program.html","content":"<p>main.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> minigrep::Config;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;env, process&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args: <span class=\"built_in\">Vec</span>&lt;<span class=\"built_in\">String</span>&gt; = env::args().collect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> config = Config::new(&amp;args).unwrap_or_else(|err| &#123;</span><br><span class=\"line\">        eprintln!(<span class=\"string\">\"Problem parsing arguments: &#123;&#125;\"</span>, err);</span><br><span class=\"line\">        process::exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"literal\">Err</span>(err) = minigrep::run(config) &#123;</span><br><span class=\"line\">        eprintln!(<span class=\"string\">\"Application err : &#123;&#125;\"</span>, err);</span><br><span class=\"line\">        process::exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>lib.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;env, error::Error, fs&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Config</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> query: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> file_name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> case_sensitive: <span class=\"built_in\">bool</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> Config &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">new</span></span>(args: &amp;[<span class=\"built_in\">String</span>]) -&gt; <span class=\"built_in\">Result</span>&lt;Config, &amp;<span class=\"symbol\">'static</span> <span class=\"built_in\">str</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.len() &lt; <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">Err</span>(<span class=\"string\">\"not enough arguments\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> query = args[<span class=\"number\">1</span>].clone();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> file_name = args[<span class=\"number\">2</span>].clone();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> case_sensitive = env::var(<span class=\"string\">\"CASE_INSENSITIVE\"</span>).is_err();</span><br><span class=\"line\">        <span class=\"literal\">Ok</span>(Config &#123;</span><br><span class=\"line\">            query,</span><br><span class=\"line\">            file_name,</span><br><span class=\"line\">            case_sensitive,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">run</span></span>(config: Config) -&gt; <span class=\"built_in\">Result</span>&lt;(), <span class=\"built_in\">Box</span>&lt;<span class=\"keyword\">dyn</span> Error&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = fs::read_to_string(config.file_name)?;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> config.case_sensitive &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> search(&amp;config.query, &amp;content) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">\"line = &#123;&#125;\"</span>, line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> search_case_insensitive(&amp;config.query, &amp;content) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">\"line = &#123;&#125;\"</span>, line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">search_case_insensitive</span></span>&lt;<span class=\"symbol\">'a</span>&gt;(query: &amp;<span class=\"built_in\">str</span>, content: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>) -&gt; <span class=\"built_in\">Vec</span>&lt;&amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> results = <span class=\"built_in\">Vec</span>::new();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> query = query.to_lowercase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content.lines() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> line.to_lowercase().contains(&amp;query) &#123;</span><br><span class=\"line\">            results.push(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    results</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">search</span></span>&lt;<span class=\"symbol\">'a</span>&gt;(query: &amp;<span class=\"built_in\">str</span>, content: &amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>) -&gt; <span class=\"built_in\">Vec</span>&lt;&amp;<span class=\"symbol\">'a</span> <span class=\"built_in\">str</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> result = <span class=\"built_in\">Vec</span>::new();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content.lines() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> line.contains(query) &#123;</span><br><span class=\"line\">            result.push(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/rust/13.%20Functional%20Language%20Features:%20Iterators%20and%20Closures.html","content":"<ul>\n<li>闭包(<em>Closures</em>)，一个可以储存在变量里的类似函数的结构 </li>\n<li>迭代器(<em>Iterators</em>)，一种处理元素序列的方式 </li>\n<li>如何使用这些功能来改进第十二章的 I/O 项目。</li>\n<li>这两个功能的性能。(剧透警告: 他们的速度超乎你的想象!)</li>\n</ul>\n"},{"url":"/rust/15.%20Smart%20Pointers.html","content":"<p>智能指针通常使用结构体实现。</p>\n<p>智能指针区别于常规结构体的显著特性在于其实现了 Deref 和 Drop trait。 </p>\n<ul>\n<li>Deref trait 允许智能指针结构体实例表现的像引用一样，这样就可以编写既 用于引用、又用于智能指针的代码。 </li>\n<li>Drop trait 允许我们自定义当智能指针离开作用域时运行 的代码。</li>\n</ul>\n<p>内容</p>\n<ul>\n<li>Box<T> ，用于在堆上分配值</li>\n<li>Rc<T> ，一个引用计数类型，其数据可以有多个所有者</li>\n<li>Ref<T> 和 RefMut<T> ，通过 RefCell<T> 访问，一个在运行时而不是在编译时执行借用规则的类型。</li>\n</ul>\n<p>内部可变性(<em>interior mutability</em>)模式  引用循环(<em>reference cycles</em>)</p>\n<h2 id=\"使用-Box-lt-T-gt-指向堆上的数据\"><a href=\"#使用-Box-lt-T-gt-指向堆上的数据\" class=\"headerlink\" title=\"使用 Box&lt;T&gt; 指向堆上的数据\"></a>使用 <code>Box&lt;T&gt;</code> 指向堆上的数据</h2><h2 id=\"通过-Deref-trait-将智能指针当作常规引用处理\"><a href=\"#通过-Deref-trait-将智能指针当作常规引用处理\" class=\"headerlink\" title=\"通过 Deref trait 将智能指针当作常规引用处理\"></a>通过 <strong>Deref</strong> <strong>trait</strong> 将智能指针当作常规引用处理</h2><h3 id=\"通过解引用运算符追踪指针的值\"><a href=\"#通过解引用运算符追踪指针的值\" class=\"headerlink\" title=\"通过解引用运算符追踪指针的值\"></a>通过解引用运算符追踪指针的值</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"built_in\">Box</span>::new(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Option</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"i = &#123;:?&#125;\"</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = &amp;x;</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, *y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"像引用一样使用-Box-lt-T-gt\"><a href=\"#像引用一样使用-Box-lt-T-gt\" class=\"headerlink\" title=\"像引用一样使用 Box&lt;T&gt;\"></a>像引用一样使用 <code>Box&lt;T&gt;</code></h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"built_in\">Box</span>::new(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, *y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义智能指针\"><a href=\"#自定义智能指针\" class=\"headerlink\" title=\"自定义智能指针\"></a>自定义智能指针</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::ops::Deref;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyBox</span></span>&lt;T&gt;(T);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; &#123;</span><br><span class=\"line\">        MyBox(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Deref <span class=\"keyword\">for</span> MyBox&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Target</span></span> = T;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">deref</span></span>(&amp;<span class=\"keyword\">self</span>) -&gt; &amp;T &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"deref\"</span>);</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"comment\">// let y = Box::new(5);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = MyBox::new(x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, x);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(<span class=\"number\">5</span>, *y);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> z = *(y.deref());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"z = &#123;:?&#125;\"</span>, z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数和方法的隐式解引用强制多态\"><a href=\"#函数和方法的隐式解引用强制多态\" class=\"headerlink\" title=\"函数和方法的隐式解引用强制多态\"></a>函数和方法的隐式解引用强制多态</h3><p>解引用强制多态(<em>deref coercions</em>)是 Rust 表现在函数或方法传参上的一种便利</p>\n<h3 id=\"Rc-lt-T-gt-引用计数智能指针\"><a href=\"#Rc-lt-T-gt-引用计数智能指针\" class=\"headerlink\" title=\"Rc&lt;T&gt; 引用计数智能指针\"></a><code>Rc&lt;T&gt;</code> 引用计数智能指针</h3>"},{"url":"/rust/16.%20Fearless%20Concurrency.html","content":"<p>所有权和类型系统是一系列解决内存安全 和 并发问题</p>\n<ul>\n<li>如何创建线程来同时运行多段代码。</li>\n<li>消息传递(<em>Message passing</em>)并发，其中通道(channel)被用来在线程间传递消息。 </li>\n<li>共享状态(<em>Shared state</em>)并发，其中多个线程可以访问同一片数据。</li>\n<li>Sync 和 Send trait，他们允许 Rust 的并发保证能被扩展到用户定义的和标准库中提供 的类型中。</li>\n</ul>\n<p>对于高级语言来说，只实现可能 解决方案的子集是一个合理的策略，因为高级语言所许诺的价值来源于牺牲一些控制来换取 抽象。然而对于底层语言则期望提供在任何给定的情况下有着最高的性能且对硬件有更少的 抽象。因此，Rust 提供了多种工具，以符合实际情况和需求的方式来为问题建模。</p>\n<h2 id=\"使用-spawn-创建新线程\"><a href=\"#使用-spawn-创建新线程\" class=\"headerlink\" title=\"使用 spawn 创建新线程\"></a>使用 <strong>spawn</strong> 创建新线程</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handle = thread::spawn(|| &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">\"sub thread : &#123;&#125;\"</span>, i);</span><br><span class=\"line\">            thread::sleep(Duration::from_millis(<span class=\"number\">100</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"main thread : &#123;&#125;\"</span>, i);</span><br><span class=\"line\">        thread::sleep(Duration::from_millis(<span class=\"number\">100</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handle.join().unwrap();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程与-move-闭包\"><a href=\"#线程与-move-闭包\" class=\"headerlink\" title=\"线程与 move 闭包\"></a>线程与 <strong>move</strong> 闭包</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handle = thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"v = &#123;:?&#125;\"</span>, v);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    handle.join().unwrap();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用消息传递在线程间传送数据\"><a href=\"#使用消息传递在线程间传送数据\" class=\"headerlink\" title=\"使用消息传递在线程间传送数据\"></a>使用消息传递在线程间传送数据</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (sender, receiver) = mpsc::channel();</span><br><span class=\"line\">    <span class=\"comment\">// sender.send(()).unwrap();</span></span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        thread::sleep(std::time::Duration::from_millis(<span class=\"number\">300</span>));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = <span class=\"built_in\">String</span>::from(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">        sender.send(val).unwrap();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"wait for msg \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = receiver.recv().unwrap();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"msg = &#123;:?&#125;\"</span>, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"通道与所有权转移\"><a href=\"#通道与所有权转移\" class=\"headerlink\" title=\"通道与所有权转移\"></a>通道与所有权转移</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (sender, receiver) = mpsc::channel();</span><br><span class=\"line\">    <span class=\"comment\">// sender.send(()).unwrap();</span></span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        thread::sleep(Duration::from_millis(<span class=\"number\">300</span>));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = <span class=\"built_in\">String</span>::from(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">        sender.send(val).unwrap();</span><br><span class=\"line\">        <span class=\"comment\">// println!(\"val is = &#123;:?&#125;\", val);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"wait for msg \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = receiver.recv().unwrap();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"msg = &#123;:?&#125;\"</span>, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"发送多个值并观察接收者的等待\"><a href=\"#发送多个值并观察接收者的等待\" class=\"headerlink\" title=\"发送多个值并观察接收者的等待\"></a>发送多个值并观察接收者的等待</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (tx, rx) = std::sync::mpsc::channel();</span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> vals = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"hi\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"from\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"the\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"thread\"</span>),</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> vals &#123;</span><br><span class=\"line\">            thread::sleep(Duration::from_millis(<span class=\"number\">100</span>));</span><br><span class=\"line\">            tx.send(val).unwrap();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> rx &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"msg = &#123;:?&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过克隆发送者来创建多个生产者\"><a href=\"#通过克隆发送者来创建多个生产者\" class=\"headerlink\" title=\"通过克隆发送者来创建多个生产者\"></a>通过克隆发送者来创建多个生产者</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;sync::mpsc, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (tx, rx) = std::sync::mpsc::channel();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tx1 = mpsc::Sender::clone(&amp;tx);</span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> vals = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 hi\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 from\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 the\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"1 thread\"</span>),</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> vals &#123;</span><br><span class=\"line\">            tx.send(val).unwrap();</span><br><span class=\"line\">            thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    thread::spawn(<span class=\"keyword\">move</span> || &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> vals = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 more\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 messages\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 for\"</span>),</span><br><span class=\"line\">            <span class=\"built_in\">String</span>::from(<span class=\"string\">\"2 you\"</span>),</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> vals &#123;</span><br><span class=\"line\">            tx1.send(val).unwrap();</span><br><span class=\"line\">            thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> rx &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"got val = &#123;:?&#125;\"</span>, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"共享状态并发\"><a href=\"#共享状态并发\" class=\"headerlink\" title=\"共享状态并发\"></a>共享状态并发</h2>"},{"url":"/rust/20.%20Final%20Project:%20Building%20a%20Multithreaded%20Web%20Server.html","content":"<h2 id=\"构建单线程-web-server\"><a href=\"#构建单线程-web-server\" class=\"headerlink\" title=\"构建单线程 web server\"></a>构建单线程 <strong>web server</strong></h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::io::prelude::*;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;net::TcpListener, thread, time::Duration&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:8989\"</span>).unwrap();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"bind success\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> stream <span class=\"keyword\">in</span> listener.incoming() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> stream = stream.unwrap();</span><br><span class=\"line\">        handle_connection(stream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">handle_connection</span></span>(<span class=\"keyword\">mut</span> stream: std::net::TcpStream) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> buffer = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];</span><br><span class=\"line\">    stream.read(&amp;<span class=\"keyword\">mut</span> buffer).unwrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> get = <span class=\"string\">b\"GET / HTTP/1.1\\r\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sleep = <span class=\"string\">b\"GET /sleep HTTP/1.1\\r\\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (status_line, file_name) = <span class=\"keyword\">if</span> buffer.starts_with(get) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"get\"</span>);</span><br><span class=\"line\">        (<span class=\"string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span>, <span class=\"string\">\"hello.html\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> buffer.starts_with(sleep) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">        thread::sleep(Duration::from_secs(<span class=\"number\">3</span>));</span><br><span class=\"line\">        (<span class=\"string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span>, <span class=\"string\">\"hello.html\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"not found\"</span>);</span><br><span class=\"line\">        (<span class=\"string\">\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\"</span>, <span class=\"string\">\"404.html\"</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// response</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = std::fs::read_to_string(file_name).unwrap();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"built_in\">format!</span>(<span class=\"string\">\"&#123;&#125;&#123;&#125;\"</span>, status_line, content);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// write to client</span></span><br><span class=\"line\">    stream.write(response.as_bytes()).unwrap();</span><br><span class=\"line\">    stream.flush().unwrap();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/rust/6.%20Enums%20and%20Pattern%20Matching.html","content":"<h2 id=\"枚举-enumerations\"><a href=\"#枚举-enumerations\" class=\"headerlink\" title=\"枚举(enumerations)\"></a>枚举(<em>enumerations</em>)</h2><h2 id=\"match-控制流运算符\"><a href=\"#match-控制流运算符\" class=\"headerlink\" title=\"match 控制流运算符\"></a><strong>match</strong> 控制流运算符</h2>"},{"url":"/rust/7.%20Managing%20Growing%20Projects%20with%20Packages,%20Crates,%20and%20Modules.html","content":"<p>模块系统(the module system)</p>\n<ul>\n<li>包(<em>Packages</em>): Cargo 的一个功能，它允许你构建、测试和分享 crate。 </li>\n<li><strong>Crates</strong> :一个模块的树形结构，它形成了库或二进制项目。</li>\n<li>模块(<em>Modules</em>)和 <strong>use</strong>: 允许你控制作用域和路径的私有性。 </li>\n<li>路径(<em>path</em>):一个命名例如结构体、函数或模块等项的方式</li>\n</ul>\n<h2 id=\"包和-crate\"><a href=\"#包和-crate\" class=\"headerlink\" title=\"包和 crate\"></a>包和 <strong>crate</strong></h2><p>crate 是一个二进制项或者库</p>\n<p>规则:</p>\n<ul>\n<li>一个包中至多 只能 包含一个库 crate(library crate); </li>\n<li>包中可以包含任意多个二进制 crate(binary crate);</li>\n<li>包中至少包含一个 crate，无论是库的还是 二进制的。</li>\n</ul>\n<p><em>src/main.rs</em> 就是一个与包同名的二进制 crate 的 crate 根</p>\n<p>如果包目录中包含 <em>src/lib.rs*，则包带有与其同名的库 crate，且 *src/lib.rs</em> 是 crate 根</p>\n<h2 id=\"定义模块来控制作用域与私有性\"><a href=\"#定义模块来控制作用域与私有性\" class=\"headerlink\" title=\"定义模块来控制作用域与私有性\"></a>定义模块来控制作用域与私有性</h2><p>模块 让我们可以将一个 crate 中的代码进行分组，以提高可读性与重用性</p>\n<p>模块树 (<em>module tree</em>)</p>\n<p>crate<br>     └── front_of_house</p>\n<p>​            ├── hosting</p>\n<p>​           │          ├── add_to_waitlist</p>\n<p>​           │          └── seat_at_table</p>\n<p>​           └── serving</p>\n<p>​                         ├── take_order </p>\n<p>​                         ├── serve_order </p>\n<p>​                        └── take_payment</p>\n<h2 id=\"路径用于引用模块树中的项\"><a href=\"#路径用于引用模块树中的项\" class=\"headerlink\" title=\"路径用于引用模块树中的项\"></a>路径用于引用模块树中的项</h2><ul>\n<li>绝对路径(<em>absolute path</em>)从 crate 根开始，以 crate 名或者字面值 crate 开头。 </li>\n<li>相对路径(<em>relative path</em>)从当前模块开始，以 self 、 super 或当前模块的标识符开 头。</li>\n</ul>\n<h3 id=\"使用-super-起始的相对路径\"><a href=\"#使用-super-起始的相对路径\" class=\"headerlink\" title=\"使用 super 起始的相对路径\"></a>使用 <strong>super</strong> 起始的相对路径</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">serve_order</span></span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> back_of_house &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">fix_incorrect_order</span></span>() &#123;</span><br><span class=\"line\">        cook_order();</span><br><span class=\"line\">        super::serve_order();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">cook_order</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用-use-关键字将名称引入作用域\"><a href=\"#使用-use-关键字将名称引入作用域\" class=\"headerlink\" title=\"使用 use 关键字将名称引入作用域\"></a>使用 <strong>use</strong> 关键字将名称引入作用域</h2><h3 id=\"使用-as-关键字提供新的名称\"><a href=\"#使用-as-关键字提供新的名称\" class=\"headerlink\" title=\"使用 as 关键字提供新的名称\"></a>使用 <strong>as</strong> 关键字提供新的名称</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::fmt::<span class=\"built_in\">Result</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::io::<span class=\"built_in\">Result</span> <span class=\"keyword\">as</span> IoResult;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">function1</span></span>() -&gt; <span class=\"built_in\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// --snip--</span></span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">function2</span></span>() -&gt; IoResult&lt;()&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// --snip--</span></span><br><span class=\"line\">    <span class=\"literal\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用-pub-use-重导出名称\"><a href=\"#使用-pub-use-重导出名称\" class=\"headerlink\" title=\"使用 pub use 重导出名称\"></a>使用 <strong>pub use</strong> 重导出名称</h3><h3 id=\"使用外部包\"><a href=\"#使用外部包\" class=\"headerlink\" title=\"使用外部包\"></a>使用外部包</h3><h3 id=\"嵌套路径来消除大量的-use-行\"><a href=\"#嵌套路径来消除大量的-use-行\" class=\"headerlink\" title=\"嵌套路径来消除大量的 use 行\"></a>嵌套路径来消除大量的 <strong>use</strong> 行</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::io::&#123;<span class=\"keyword\">self</span>, Write&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-glob-运算符将所有的公有定义引入作用域\"><a href=\"#通过-glob-运算符将所有的公有定义引入作用域\" class=\"headerlink\" title=\"通过 glob 运算符将所有的公有定义引入作用域\"></a>通过 <strong>glob</strong> 运算符将所有的公有定义引入作用域</h3><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::collections::*;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"将模块分割进不同文件\"><a href=\"#将模块分割进不同文件\" class=\"headerlink\" title=\"将模块分割进不同文件\"></a>将模块分割进不同文件</h2><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> crate::front_of_house::hosting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">eat_at_restaurant</span></span>() &#123;</span><br><span class=\"line\">    hosting::add_to_waitlist();</span><br><span class=\"line\">    hosting::add_to_waitlist();</span><br><span class=\"line\">    hosting::add_to_waitlist();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 mod front_of_house 后使用分号，而不是代码块，这将告诉 Rust 在另一个与模块同名的 文件中加载模块的内容</p>\n<p>src/front_of_house.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hosting &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>重构</strong>:保持<em>模块树</em></p>\n<p>src/front_of_house.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hosting;</span><br></pre></td></tr></table></figure>\n\n<p>src/front_of_house/hosting.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">add_to_waitlist</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/rust/8.%20Common%20Collections.html","content":"<h2 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h2><p>Doc:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9zdGQvdmVjL3N0cnVjdC5WZWMuaHRtbA==\">https://doc.rust-lang.org/std/vec/struct.Vec.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>more example:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9zdGFibGUvcnVzdC1ieS1leGFtcGxlL3N0ZC92ZWMuaHRtbA==\">https://doc.rust-lang.org/stable/rust-by-example/std/vec.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">vec_func</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Creating</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> v: <span class=\"built_in\">Vec</span>&lt;<span class=\"built_in\">i32</span>&gt; = <span class=\"built_in\">Vec</span>::new(); <span class=\"comment\">// new</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">// mocro</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// update</span></span><br><span class=\"line\">    v.push(<span class=\"number\">10</span>);</span><br><span class=\"line\">    v.push(<span class=\"number\">20</span>);</span><br><span class=\"line\">    v.push(<span class=\"number\">30</span>);</span><br><span class=\"line\">    v.push(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// get element</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> third: &amp;<span class=\"built_in\">i32</span> = &amp;v[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The third element is &#123;&#125;\"</span>, third);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">match</span> v.get(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"literal\">Some</span>(third) =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">\"The third element is &#123;&#125;\"</span>, third),</span><br><span class=\"line\">        <span class=\"literal\">None</span> =&gt; <span class=\"built_in\">println!</span>(<span class=\"string\">\"There is no third element.\"</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// iterating</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> v = <span class=\"built_in\">vec!</span>[<span class=\"number\">100</span>, <span class=\"number\">32</span>, <span class=\"number\">57</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &amp;v &#123; <span class=\"comment\">// unmutable</span></span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"&#123;&#125;\"</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> v &#123; <span class=\"comment\">// mutable</span></span><br><span class=\"line\">        *i += <span class=\"number\">50</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i, x) <span class=\"keyword\">in</span> v.iter().enumerate() &#123; <span class=\"comment\">// with index</span></span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"In position &#123;&#125; we have value &#123;&#125;\"</span>, i, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// with enum</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SpreadsheetCell</span></span> &#123;</span><br><span class=\"line\">        Int(<span class=\"built_in\">i32</span>),</span><br><span class=\"line\">        Float(<span class=\"built_in\">f64</span>),</span><br><span class=\"line\">        Text(<span class=\"built_in\">String</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> row = <span class=\"built_in\">vec!</span>[</span><br><span class=\"line\">        SpreadsheetCell::Int(<span class=\"number\">3</span>),</span><br><span class=\"line\">        SpreadsheetCell::Text(<span class=\"built_in\">String</span>::from(<span class=\"string\">\"blue\"</span>)),</span><br><span class=\"line\">        SpreadsheetCell::Float(<span class=\"number\">10.12</span>),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h2 id=\"hash-map\"><a href=\"#hash-map\" class=\"headerlink\" title=\"hash map\"></a>hash map</h2>"},{"url":"/rust/9.%20Error%20Handling.html","content":"<h2 id=\"panic-与不可恢复的错误\"><a href=\"#panic-与不可恢复的错误\" class=\"headerlink\" title=\"panic! 与不可恢复的错误\"></a><strong>panic!</strong> 与不可恢复的错误</h2><h2 id=\"Result-与可恢复的错误\"><a href=\"#Result-与可恢复的错误\" class=\"headerlink\" title=\"Result 与可恢复的错误\"></a><strong>Result</strong> 与可恢复的错误</h2><h3 id=\"匹配不同的错误\"><a href=\"#匹配不同的错误\" class=\"headerlink\" title=\"匹配不同的错误\"></a>匹配不同的错误</h3><h3 id=\"失败时-panic-的简写-unwrap-和-expect\"><a href=\"#失败时-panic-的简写-unwrap-和-expect\" class=\"headerlink\" title=\"失败时 panic 的简写: unwrap 和 expect\"></a>失败时 <strong>panic</strong> 的简写: <strong>unwrap</strong> 和 <strong>expect</strong></h3><p>unwrap:如果 Result 值是成员 Ok ， unwrap 会返回 Ok 中的值。如果Result 是成员 Err ， unwrap 会为我们调用 panic!</p>\n<p>expect 与 unwrap 的使用方式一样:返回Ok或调用 panic! 宏。 expect 用来调用panic! 的错误信息将会作为参数传递给 expect </p>\n<h3 id=\"传播错误\"><a href=\"#传播错误\" class=\"headerlink\" title=\"传播错误\"></a>传播错误</h3><p>谁来处理错误的问题:调用都来处理还是在调用中去处理</p>\n<h3 id=\"传播错误的简写-运算符\"><a href=\"#传播错误的简写-运算符\" class=\"headerlink\" title=\"传播错误的简写: ? 运算符\"></a>传播错误的简写: <strong>?</strong> 运算符</h3><p>如果 Result 的值是 Ok ，这个表达式将会返回 Ok 中的值而程序将继续执行。如果值是 Err ， Err 中的值将作为整个函数的返回值，就好像使用了 return 关 键字一样，这样错误值就被传播给了调用者。</p>\n<p>问号运算符:? 运算符所使用的错误值被 传递给了 from 函数，它定义于标准库的 From trait 中，其用来将错误从一种类型转换为另 一种类型。当 ? 运算符调用 from 函数时，收到的错误类型被转换为定义为当前函数返回 的错误类型。</p>\n<p>这在当一个函数返回一个错误类型来代表所有可能失败的方式时很有用，即使 其可能会因很多种原因失败。只要每一个错误类型都实现了 from 函数来定义如将其转换为 返回的错误类型， ? 运算符会自动处理这些转换</p>\n<h3 id=\"运算符可被用于返回-Result-的函数\"><a href=\"#运算符可被用于返回-Result-的函数\" class=\"headerlink\" title=\"? 运算符可被用于返回 Result 的函数\"></a><strong>?</strong> 运算符可被用于返回 <strong>Result</strong> 的函数</h3><p>main特殊性,有两种返回值类型:</p>\n<ul>\n<li>()</li>\n<li>Result&lt;T,E&gt;</li>\n</ul>\n<h3 id=\"panic-还是不-panic\"><a href=\"#panic-还是不-panic\" class=\"headerlink\" title=\"panic! 还是不 panic!\"></a><strong>panic!</strong> 还是不 <strong>panic!</strong></h3><ul>\n<li><p>示例、代码原型和测试都非常适合 <strong>panic</strong></p>\n</li>\n<li><p>当我们比编译器知道更多的情况</p>\n</li>\n<li><p>错误处理指导原则</p>\n<ul>\n<li>有害状态并不包含 预期 会偶尔发生的错误 </li>\n<li>之后的代码的运行依赖于处于这种有害状态 </li>\n<li>当没有可行的手段来将有害状态信息编码进所使用的类型中的情况</li>\n</ul>\n</li>\n<li><p>创建自定义类型进行有效性验证 guessing_game2</p>\n</li>\n</ul>\n"},{"url":"/rust/index.html","content":""},{"title":"Tags","url":"/tags/index.html","content":""},{"title":"Utility library Overview","url":"/c++/general-utilities-library/index.html","content":""},{"title":"C++ language","url":"/c++/language/index.html","content":"<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2Jhc2ljX2NvbmNlcHRz\">Basic concepts<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2tleXdvcmQ=\">C++ Keywords<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL3ByZXByb2Nlc3Nvcg==\">Preprocessor<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2V4cHJlc3Npb25z\">Expressions<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2RlY2xhcmF0aW9ucw==\">Declaration<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2luaXRpYWxpemF0aW9u\">Initialization<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2Z1bmN0aW9ucw==\">Functions<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL3N0YXRlbWVudHM=\">Statements<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2NsYXNzZXM=\">Classes<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL3RlbXBsYXRlcw==\">Templates<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2V4Y2VwdGlvbnM=\">Exceptions<i class=\"fa fa-external-link-alt\"></i></span></strong><br><strong>Miscellaneous</strong></p>\n"},{"url":"/cmake/Modules/index.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC9sYXRlc3QvbWFudWFsL2NtYWtlLW1vZHVsZXMuNy5odG1s\">https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p> 拓展CMake的功能</p>\n</blockquote>\n<h2 id=\"两类\"><a href=\"#两类\" class=\"headerlink\" title=\"两类:\"></a>两类:</h2><ul>\n<li>CMake内置的module</li>\n<li>自己定制的module</li>\n</ul>\n<h2 id=\"其它相关\"><a href=\"#其它相关\" class=\"headerlink\" title=\"其它相关:\"></a>其它相关:</h2><p>变量:<a href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html#variable:CMAKE_MODULE_PATH\" target=\"_blank\" rel=\"noopener\"><code>CMAKE_MODULE_PATH</code></a></p>\n<p>通过include来引入</p>\n<p>cmake --help-module module_name</p>\n<p><strong>CMakeDependentOption</strong></p>\n<blockquote>\n<p>设置一个option依赖于另一个option</p>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(CMakeDependentOption)</span><br><span class=\"line\"></span><br><span class=\"line\">cmake_dependent_option(</span><br><span class=\"line\">    option_var <span class=\"string\">\"docs\"</span></span><br><span class=\"line\">        <span class=\"keyword\">ON</span> <span class=\"string\">\"condition_expreesion\"</span> <span class=\"keyword\">OFF</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如果condition_expreesion是true, option_var是ON, 反之option_var是OFF</p>\n"}]